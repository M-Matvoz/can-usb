
CAN-USB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b0dc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000020c  0800b26c  0800b26c  0001b26c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b478  0800b478  000201d8  2**0
                  CONTENTS
  4 .ARM          00000000  0800b478  0800b478  000201d8  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800b478  0800b478  000201d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b478  0800b478  0001b478  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b47c  0800b47c  0001b47c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d8  20000000  0800b480  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201d8  2**0
                  CONTENTS
 10 .bss          000013a0  200001d8  200001d8  000201d8  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20001578  20001578  000201d8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201d8  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001029b  00000000  00000000  0002024b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003191  00000000  00000000  000304e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000d08  00000000  00000000  00033678  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000098e  00000000  00000000  00034380  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000205ce  00000000  00000000  00034d0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000135ad  00000000  00000000  000552dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000b1b70  00000000  00000000  00068889  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00003ce8  00000000  00000000  0011a3fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000048  00000000  00000000  0011e0e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d8 	.word	0x200001d8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b254 	.word	0x0800b254

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001dc 	.word	0x200001dc
 80001cc:	0800b254 	.word	0x0800b254

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <CAN_to_SLCAN_and_send>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void CAN_to_SLCAN_and_send(CAN_RxHeaderTypeDef *header, uint8_t *data)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	b08c      	sub	sp, #48	; 0x30
 8000274:	af00      	add	r7, sp, #0
 8000276:	6078      	str	r0, [r7, #4]
 8000278:	6039      	str	r1, [r7, #0]
  char slcan_msg[32];
  int len = 0;
 800027a:	2300      	movs	r3, #0
 800027c:	62fb      	str	r3, [r7, #44]	; 0x2c

  // Standard frame
  if (header->IDE == CAN_ID_STD)
 800027e:	687b      	ldr	r3, [r7, #4]
 8000280:	689b      	ldr	r3, [r3, #8]
 8000282:	2b00      	cmp	r3, #0
 8000284:	d10a      	bne.n	800029c <CAN_to_SLCAN_and_send+0x2c>
  {
    len = sprintf(slcan_msg, "t%03X%u", (unsigned int)header->StdId, (unsigned int)header->DLC);
 8000286:	687b      	ldr	r3, [r7, #4]
 8000288:	681a      	ldr	r2, [r3, #0]
 800028a:	687b      	ldr	r3, [r7, #4]
 800028c:	691b      	ldr	r3, [r3, #16]
 800028e:	f107 0008 	add.w	r0, r7, #8
 8000292:	4921      	ldr	r1, [pc, #132]	; (8000318 <CAN_to_SLCAN_and_send+0xa8>)
 8000294:	f009 ff70 	bl	800a178 <siprintf>
 8000298:	62f8      	str	r0, [r7, #44]	; 0x2c
 800029a:	e009      	b.n	80002b0 <CAN_to_SLCAN_and_send+0x40>
  }
  else
  { // Extended frame
    len = sprintf(slcan_msg, "T%08X%u", (unsigned int)header->ExtId, (unsigned int)header->DLC);
 800029c:	687b      	ldr	r3, [r7, #4]
 800029e:	685a      	ldr	r2, [r3, #4]
 80002a0:	687b      	ldr	r3, [r7, #4]
 80002a2:	691b      	ldr	r3, [r3, #16]
 80002a4:	f107 0008 	add.w	r0, r7, #8
 80002a8:	491c      	ldr	r1, [pc, #112]	; (800031c <CAN_to_SLCAN_and_send+0xac>)
 80002aa:	f009 ff65 	bl	800a178 <siprintf>
 80002ae:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  for (uint8_t i = 0; i < header->DLC; i++)
 80002b0:	2300      	movs	r3, #0
 80002b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80002b6:	e015      	b.n	80002e4 <CAN_to_SLCAN_and_send+0x74>
  {
    len += sprintf(slcan_msg + len, "%02X", data[i]);
 80002b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80002ba:	f107 0208 	add.w	r2, r7, #8
 80002be:	18d0      	adds	r0, r2, r3
 80002c0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80002c4:	683a      	ldr	r2, [r7, #0]
 80002c6:	4413      	add	r3, r2
 80002c8:	781b      	ldrb	r3, [r3, #0]
 80002ca:	461a      	mov	r2, r3
 80002cc:	4914      	ldr	r1, [pc, #80]	; (8000320 <CAN_to_SLCAN_and_send+0xb0>)
 80002ce:	f009 ff53 	bl	800a178 <siprintf>
 80002d2:	4602      	mov	r2, r0
 80002d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80002d6:	4413      	add	r3, r2
 80002d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  for (uint8_t i = 0; i < header->DLC; i++)
 80002da:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80002de:	3301      	adds	r3, #1
 80002e0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80002e4:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 80002e8:	687b      	ldr	r3, [r7, #4]
 80002ea:	691b      	ldr	r3, [r3, #16]
 80002ec:	429a      	cmp	r2, r3
 80002ee:	d3e3      	bcc.n	80002b8 <CAN_to_SLCAN_and_send+0x48>
  }
  slcan_msg[len++] = '\r'; // SLCAN frame end
 80002f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80002f2:	1c5a      	adds	r2, r3, #1
 80002f4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80002f6:	3330      	adds	r3, #48	; 0x30
 80002f8:	443b      	add	r3, r7
 80002fa:	220d      	movs	r2, #13
 80002fc:	f803 2c28 	strb.w	r2, [r3, #-40]

  CDC_Transmit_FS((uint8_t *)slcan_msg, len);
 8000300:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000302:	b29a      	uxth	r2, r3
 8000304:	f107 0308 	add.w	r3, r7, #8
 8000308:	4611      	mov	r1, r2
 800030a:	4618      	mov	r0, r3
 800030c:	f009 f9bc 	bl	8009688 <CDC_Transmit_FS>
}
 8000310:	bf00      	nop
 8000312:	3730      	adds	r7, #48	; 0x30
 8000314:	46bd      	mov	sp, r7
 8000316:	bd80      	pop	{r7, pc}
 8000318:	0800b26c 	.word	0x0800b26c
 800031c:	0800b274 	.word	0x0800b274
 8000320:	0800b27c 	.word	0x0800b27c

08000324 <slcan_set_channel>:

void slcan_set_channel(uint8_t channel) {
 8000324:	b580      	push	{r7, lr}
 8000326:	b082      	sub	sp, #8
 8000328:	af00      	add	r7, sp, #0
 800032a:	4603      	mov	r3, r0
 800032c:	71fb      	strb	r3, [r7, #7]
  if (channel == 0) {
 800032e:	79fb      	ldrb	r3, [r7, #7]
 8000330:	2b00      	cmp	r3, #0
 8000332:	d105      	bne.n	8000340 <slcan_set_channel+0x1c>
    HAL_GPIO_WritePin(CAN_SELECT_GPIO_Port, CAN_SELECT_Pin, GPIO_PIN_SET);
 8000334:	2201      	movs	r2, #1
 8000336:	2120      	movs	r1, #32
 8000338:	4806      	ldr	r0, [pc, #24]	; (8000354 <slcan_set_channel+0x30>)
 800033a:	f002 f935 	bl	80025a8 <HAL_GPIO_WritePin>
  } else {
    HAL_GPIO_WritePin(CAN_SELECT_GPIO_Port, CAN_SELECT_Pin, GPIO_PIN_RESET);
  }
}
 800033e:	e004      	b.n	800034a <slcan_set_channel+0x26>
    HAL_GPIO_WritePin(CAN_SELECT_GPIO_Port, CAN_SELECT_Pin, GPIO_PIN_RESET);
 8000340:	2200      	movs	r2, #0
 8000342:	2120      	movs	r1, #32
 8000344:	4803      	ldr	r0, [pc, #12]	; (8000354 <slcan_set_channel+0x30>)
 8000346:	f002 f92f 	bl	80025a8 <HAL_GPIO_WritePin>
}
 800034a:	bf00      	nop
 800034c:	3708      	adds	r7, #8
 800034e:	46bd      	mov	sp, r7
 8000350:	bd80      	pop	{r7, pc}
 8000352:	bf00      	nop
 8000354:	48000400 	.word	0x48000400

08000358 <slcan_send_ok>:

void slcan_send_ok(void) {
 8000358:	b580      	push	{r7, lr}
 800035a:	af00      	add	r7, sp, #0
  CDC_Transmit_FS((uint8_t*)"\r", 1);
 800035c:	2101      	movs	r1, #1
 800035e:	4802      	ldr	r0, [pc, #8]	; (8000368 <slcan_send_ok+0x10>)
 8000360:	f009 f992 	bl	8009688 <CDC_Transmit_FS>
}
 8000364:	bf00      	nop
 8000366:	bd80      	pop	{r7, pc}
 8000368:	0800b284 	.word	0x0800b284

0800036c <slcan_send_error>:

void slcan_send_error(void) {
 800036c:	b580      	push	{r7, lr}
 800036e:	af00      	add	r7, sp, #0
  CDC_Transmit_FS((uint8_t*)"\a", 1);
 8000370:	2101      	movs	r1, #1
 8000372:	4802      	ldr	r0, [pc, #8]	; (800037c <slcan_send_error+0x10>)
 8000374:	f009 f988 	bl	8009688 <CDC_Transmit_FS>
}
 8000378:	bf00      	nop
 800037a:	bd80      	pop	{r7, pc}
 800037c:	0800b288 	.word	0x0800b288

08000380 <slcan_send_serial_number>:

void slcan_send_version(void){
  CDC_Transmit_FS((uint8_t*)"V0101\r", 6);
}

void slcan_send_serial_number(void){
 8000380:	b580      	push	{r7, lr}
 8000382:	af00      	add	r7, sp, #0
  CDC_Transmit_FS((uint8_t*)"N6969\r", 6);
 8000384:	2106      	movs	r1, #6
 8000386:	4802      	ldr	r0, [pc, #8]	; (8000390 <slcan_send_serial_number+0x10>)
 8000388:	f009 f97e 	bl	8009688 <CDC_Transmit_FS>
}
 800038c:	bf00      	nop
 800038e:	bd80      	pop	{r7, pc}
 8000390:	0800b294 	.word	0x0800b294

08000394 <slcan_return_status_flags>:

void slcan_return_status_flags(void){
 8000394:	b580      	push	{r7, lr}
 8000396:	b084      	sub	sp, #16
 8000398:	af00      	add	r7, sp, #0
  uint8_t status = 0;
 800039a:	2300      	movs	r3, #0
 800039c:	71fb      	strb	r3, [r7, #7]
  // Bit 4: 0
  // Bit 5: 0
  // Bit 6: CAN arbitration lost
  // Bit 7: CAN bus error

  uint8_t bit0 = HAL_CAN_GetRxFifoFillLevel(&hcan, CAN_RX_FIFO0) >= 3 ? 1 : 0; // Check if FIFO is full (size is 3)
 800039e:	2100      	movs	r1, #0
 80003a0:	483a      	ldr	r0, [pc, #232]	; (800048c <slcan_return_status_flags+0xf8>)
 80003a2:	f001 fbf8 	bl	8001b96 <HAL_CAN_GetRxFifoFillLevel>
 80003a6:	4603      	mov	r3, r0
 80003a8:	2b02      	cmp	r3, #2
 80003aa:	bf8c      	ite	hi
 80003ac:	2301      	movhi	r3, #1
 80003ae:	2300      	movls	r3, #0
 80003b0:	b2db      	uxtb	r3, r3
 80003b2:	73fb      	strb	r3, [r7, #15]
  uint8_t bit1 = HAL_CAN_GetTxMailboxesFreeLevel(&hcan) == 0 ? 1 : 0;
 80003b4:	4835      	ldr	r0, [pc, #212]	; (800048c <slcan_return_status_flags+0xf8>)
 80003b6:	f001 fa97 	bl	80018e8 <HAL_CAN_GetTxMailboxesFreeLevel>
 80003ba:	4603      	mov	r3, r0
 80003bc:	2b00      	cmp	r3, #0
 80003be:	bf0c      	ite	eq
 80003c0:	2301      	moveq	r3, #1
 80003c2:	2300      	movne	r3, #0
 80003c4:	b2db      	uxtb	r3, r3
 80003c6:	73bb      	strb	r3, [r7, #14]
  uint8_t bit2 = 0;
 80003c8:	2300      	movs	r3, #0
 80003ca:	737b      	strb	r3, [r7, #13]
  uint8_t bit3 = 0;
 80003cc:	2300      	movs	r3, #0
 80003ce:	733b      	strb	r3, [r7, #12]
  uint8_t bit4 = 0;
 80003d0:	2300      	movs	r3, #0
 80003d2:	72fb      	strb	r3, [r7, #11]
  uint8_t bit5 = 0;
 80003d4:	2300      	movs	r3, #0
 80003d6:	72bb      	strb	r3, [r7, #10]
  uint8_t bit6 = 0;
 80003d8:	2300      	movs	r3, #0
 80003da:	727b      	strb	r3, [r7, #9]
  uint8_t bit7 = (hcan.Instance->ESR & CAN_ESR_EWGF) ? 1 : 0;
 80003dc:	4b2b      	ldr	r3, [pc, #172]	; (800048c <slcan_return_status_flags+0xf8>)
 80003de:	681b      	ldr	r3, [r3, #0]
 80003e0:	699b      	ldr	r3, [r3, #24]
 80003e2:	f003 0301 	and.w	r3, r3, #1
 80003e6:	2b00      	cmp	r3, #0
 80003e8:	bf14      	ite	ne
 80003ea:	2301      	movne	r3, #1
 80003ec:	2300      	moveq	r3, #0
 80003ee:	b2db      	uxtb	r3, r3
 80003f0:	723b      	strb	r3, [r7, #8]

  status |= (bit0 << 0);
 80003f2:	79fa      	ldrb	r2, [r7, #7]
 80003f4:	7bfb      	ldrb	r3, [r7, #15]
 80003f6:	4313      	orrs	r3, r2
 80003f8:	b2db      	uxtb	r3, r3
 80003fa:	71fb      	strb	r3, [r7, #7]
  status |= (bit1 << 1);
 80003fc:	7bbb      	ldrb	r3, [r7, #14]
 80003fe:	005b      	lsls	r3, r3, #1
 8000400:	b25a      	sxtb	r2, r3
 8000402:	79fb      	ldrb	r3, [r7, #7]
 8000404:	b25b      	sxtb	r3, r3
 8000406:	4313      	orrs	r3, r2
 8000408:	b25b      	sxtb	r3, r3
 800040a:	b2db      	uxtb	r3, r3
 800040c:	71fb      	strb	r3, [r7, #7]
  status |= (bit2 << 2);
 800040e:	7b7b      	ldrb	r3, [r7, #13]
 8000410:	009b      	lsls	r3, r3, #2
 8000412:	b25a      	sxtb	r2, r3
 8000414:	79fb      	ldrb	r3, [r7, #7]
 8000416:	b25b      	sxtb	r3, r3
 8000418:	4313      	orrs	r3, r2
 800041a:	b25b      	sxtb	r3, r3
 800041c:	b2db      	uxtb	r3, r3
 800041e:	71fb      	strb	r3, [r7, #7]
  status |= (bit3 << 3);
 8000420:	7b3b      	ldrb	r3, [r7, #12]
 8000422:	00db      	lsls	r3, r3, #3
 8000424:	b25a      	sxtb	r2, r3
 8000426:	79fb      	ldrb	r3, [r7, #7]
 8000428:	b25b      	sxtb	r3, r3
 800042a:	4313      	orrs	r3, r2
 800042c:	b25b      	sxtb	r3, r3
 800042e:	b2db      	uxtb	r3, r3
 8000430:	71fb      	strb	r3, [r7, #7]
  status |= (bit4 << 4);
 8000432:	7afb      	ldrb	r3, [r7, #11]
 8000434:	011b      	lsls	r3, r3, #4
 8000436:	b25a      	sxtb	r2, r3
 8000438:	79fb      	ldrb	r3, [r7, #7]
 800043a:	b25b      	sxtb	r3, r3
 800043c:	4313      	orrs	r3, r2
 800043e:	b25b      	sxtb	r3, r3
 8000440:	b2db      	uxtb	r3, r3
 8000442:	71fb      	strb	r3, [r7, #7]
  status |= (bit5 << 5);
 8000444:	7abb      	ldrb	r3, [r7, #10]
 8000446:	015b      	lsls	r3, r3, #5
 8000448:	b25a      	sxtb	r2, r3
 800044a:	79fb      	ldrb	r3, [r7, #7]
 800044c:	b25b      	sxtb	r3, r3
 800044e:	4313      	orrs	r3, r2
 8000450:	b25b      	sxtb	r3, r3
 8000452:	b2db      	uxtb	r3, r3
 8000454:	71fb      	strb	r3, [r7, #7]
  status |= (bit6 << 6);
 8000456:	7a7b      	ldrb	r3, [r7, #9]
 8000458:	019b      	lsls	r3, r3, #6
 800045a:	b25a      	sxtb	r2, r3
 800045c:	79fb      	ldrb	r3, [r7, #7]
 800045e:	b25b      	sxtb	r3, r3
 8000460:	4313      	orrs	r3, r2
 8000462:	b25b      	sxtb	r3, r3
 8000464:	b2db      	uxtb	r3, r3
 8000466:	71fb      	strb	r3, [r7, #7]
  status |= (bit7 << 7);
 8000468:	7a3b      	ldrb	r3, [r7, #8]
 800046a:	01db      	lsls	r3, r3, #7
 800046c:	b25a      	sxtb	r2, r3
 800046e:	79fb      	ldrb	r3, [r7, #7]
 8000470:	b25b      	sxtb	r3, r3
 8000472:	4313      	orrs	r3, r2
 8000474:	b25b      	sxtb	r3, r3
 8000476:	b2db      	uxtb	r3, r3
 8000478:	71fb      	strb	r3, [r7, #7]

  CDC_Transmit_FS(&status, 1);
 800047a:	1dfb      	adds	r3, r7, #7
 800047c:	2101      	movs	r1, #1
 800047e:	4618      	mov	r0, r3
 8000480:	f009 f902 	bl	8009688 <CDC_Transmit_FS>
}
 8000484:	bf00      	nop
 8000486:	3710      	adds	r7, #16
 8000488:	46bd      	mov	sp, r7
 800048a:	bd80      	pop	{r7, pc}
 800048c:	200001f4 	.word	0x200001f4

08000490 <slcan_set_bitrate>:

void slcan_set_bitrate(uint8_t bitrate) {
 8000490:	b580      	push	{r7, lr}
 8000492:	b084      	sub	sp, #16
 8000494:	af00      	add	r7, sp, #0
 8000496:	4603      	mov	r3, r0
 8000498:	71fb      	strb	r3, [r7, #7]
  // Set the CAN bitrate based on the provided value
  uint8_t ok = 1;
 800049a:	2301      	movs	r3, #1
 800049c:	73fb      	strb	r3, [r7, #15]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 800049e:	4b59      	ldr	r3, [pc, #356]	; (8000604 <slcan_set_bitrate+0x174>)
 80004a0:	2200      	movs	r2, #0
 80004a2:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80004a4:	4b57      	ldr	r3, [pc, #348]	; (8000604 <slcan_set_bitrate+0x174>)
 80004a6:	2200      	movs	r2, #0
 80004a8:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeTriggeredMode = DISABLE;
 80004aa:	4b56      	ldr	r3, [pc, #344]	; (8000604 <slcan_set_bitrate+0x174>)
 80004ac:	2200      	movs	r2, #0
 80004ae:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 80004b0:	4b54      	ldr	r3, [pc, #336]	; (8000604 <slcan_set_bitrate+0x174>)
 80004b2:	2200      	movs	r2, #0
 80004b4:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 80004b6:	4b53      	ldr	r3, [pc, #332]	; (8000604 <slcan_set_bitrate+0x174>)
 80004b8:	2200      	movs	r2, #0
 80004ba:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 80004bc:	4b51      	ldr	r3, [pc, #324]	; (8000604 <slcan_set_bitrate+0x174>)
 80004be:	2200      	movs	r2, #0
 80004c0:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80004c2:	4b50      	ldr	r3, [pc, #320]	; (8000604 <slcan_set_bitrate+0x174>)
 80004c4:	2200      	movs	r2, #0
 80004c6:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 80004c8:	4b4e      	ldr	r3, [pc, #312]	; (8000604 <slcan_set_bitrate+0x174>)
 80004ca:	2200      	movs	r2, #0
 80004cc:	775a      	strb	r2, [r3, #29]
  switch (bitrate)
 80004ce:	79fb      	ldrb	r3, [r7, #7]
 80004d0:	2b08      	cmp	r3, #8
 80004d2:	f200 8081 	bhi.w	80005d8 <slcan_set_bitrate+0x148>
 80004d6:	a201      	add	r2, pc, #4	; (adr r2, 80004dc <slcan_set_bitrate+0x4c>)
 80004d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80004dc:	08000501 	.word	0x08000501
 80004e0:	08000519 	.word	0x08000519
 80004e4:	08000531 	.word	0x08000531
 80004e8:	08000549 	.word	0x08000549
 80004ec:	08000561 	.word	0x08000561
 80004f0:	08000579 	.word	0x08000579
 80004f4:	08000591 	.word	0x08000591
 80004f8:	080005a9 	.word	0x080005a9
 80004fc:	080005c1 	.word	0x080005c1
  {
    case 0:
    { // 100k
      hcan.Init.TimeSeg1 = CAN_BS1_14TQ;
 8000500:	4b40      	ldr	r3, [pc, #256]	; (8000604 <slcan_set_bitrate+0x174>)
 8000502:	f44f 2250 	mov.w	r2, #851968	; 0xd0000
 8000506:	611a      	str	r2, [r3, #16]
      hcan.Init.TimeSeg2 = CAN_BS2_3TQ;
 8000508:	4b3e      	ldr	r3, [pc, #248]	; (8000604 <slcan_set_bitrate+0x174>)
 800050a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800050e:	615a      	str	r2, [r3, #20]
      hcan.Init.Prescaler = 200;
 8000510:	4b3c      	ldr	r3, [pc, #240]	; (8000604 <slcan_set_bitrate+0x174>)
 8000512:	22c8      	movs	r2, #200	; 0xc8
 8000514:	605a      	str	r2, [r3, #4]
      break;
 8000516:	e062      	b.n	80005de <slcan_set_bitrate+0x14e>
    }
    case 1:
    { // 20k
      hcan.Init.TimeSeg1 = CAN_BS1_14TQ;
 8000518:	4b3a      	ldr	r3, [pc, #232]	; (8000604 <slcan_set_bitrate+0x174>)
 800051a:	f44f 2250 	mov.w	r2, #851968	; 0xd0000
 800051e:	611a      	str	r2, [r3, #16]
      hcan.Init.TimeSeg2 = CAN_BS2_3TQ;
 8000520:	4b38      	ldr	r3, [pc, #224]	; (8000604 <slcan_set_bitrate+0x174>)
 8000522:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000526:	615a      	str	r2, [r3, #20]
      hcan.Init.Prescaler = 100;
 8000528:	4b36      	ldr	r3, [pc, #216]	; (8000604 <slcan_set_bitrate+0x174>)
 800052a:	2264      	movs	r2, #100	; 0x64
 800052c:	605a      	str	r2, [r3, #4]
      break;
 800052e:	e056      	b.n	80005de <slcan_set_bitrate+0x14e>
    }
    case 2:
    { // 50k
      hcan.Init.TimeSeg1 = CAN_BS1_14TQ;
 8000530:	4b34      	ldr	r3, [pc, #208]	; (8000604 <slcan_set_bitrate+0x174>)
 8000532:	f44f 2250 	mov.w	r2, #851968	; 0xd0000
 8000536:	611a      	str	r2, [r3, #16]
      hcan.Init.TimeSeg2 = CAN_BS2_3TQ;
 8000538:	4b32      	ldr	r3, [pc, #200]	; (8000604 <slcan_set_bitrate+0x174>)
 800053a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800053e:	615a      	str	r2, [r3, #20]
      hcan.Init.Prescaler = 40;
 8000540:	4b30      	ldr	r3, [pc, #192]	; (8000604 <slcan_set_bitrate+0x174>)
 8000542:	2228      	movs	r2, #40	; 0x28
 8000544:	605a      	str	r2, [r3, #4]
      break;
 8000546:	e04a      	b.n	80005de <slcan_set_bitrate+0x14e>
    }
    case 3:
    { // 100k
      hcan.Init.TimeSeg1 = CAN_BS1_14TQ;
 8000548:	4b2e      	ldr	r3, [pc, #184]	; (8000604 <slcan_set_bitrate+0x174>)
 800054a:	f44f 2250 	mov.w	r2, #851968	; 0xd0000
 800054e:	611a      	str	r2, [r3, #16]
      hcan.Init.TimeSeg2 = CAN_BS2_3TQ;
 8000550:	4b2c      	ldr	r3, [pc, #176]	; (8000604 <slcan_set_bitrate+0x174>)
 8000552:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000556:	615a      	str	r2, [r3, #20]
      hcan.Init.Prescaler = 20;
 8000558:	4b2a      	ldr	r3, [pc, #168]	; (8000604 <slcan_set_bitrate+0x174>)
 800055a:	2214      	movs	r2, #20
 800055c:	605a      	str	r2, [r3, #4]
      break;
 800055e:	e03e      	b.n	80005de <slcan_set_bitrate+0x14e>
    }
    case 4:
    { // 125k
      hcan.Init.TimeSeg1 = CAN_BS1_12TQ;
 8000560:	4b28      	ldr	r3, [pc, #160]	; (8000604 <slcan_set_bitrate+0x174>)
 8000562:	f44f 2230 	mov.w	r2, #720896	; 0xb0000
 8000566:	611a      	str	r2, [r3, #16]
      hcan.Init.TimeSeg2 = CAN_BS2_5TQ;
 8000568:	4b26      	ldr	r3, [pc, #152]	; (8000604 <slcan_set_bitrate+0x174>)
 800056a:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800056e:	615a      	str	r2, [r3, #20]
      hcan.Init.Prescaler = 16;
 8000570:	4b24      	ldr	r3, [pc, #144]	; (8000604 <slcan_set_bitrate+0x174>)
 8000572:	2210      	movs	r2, #16
 8000574:	605a      	str	r2, [r3, #4]
      break;
 8000576:	e032      	b.n	80005de <slcan_set_bitrate+0x14e>
    }
    case 5:
    { // 250k
      hcan.Init.TimeSeg1 = CAN_BS1_12TQ;
 8000578:	4b22      	ldr	r3, [pc, #136]	; (8000604 <slcan_set_bitrate+0x174>)
 800057a:	f44f 2230 	mov.w	r2, #720896	; 0xb0000
 800057e:	611a      	str	r2, [r3, #16]
      hcan.Init.TimeSeg2 = CAN_BS2_5TQ;
 8000580:	4b20      	ldr	r3, [pc, #128]	; (8000604 <slcan_set_bitrate+0x174>)
 8000582:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000586:	615a      	str	r2, [r3, #20]
      hcan.Init.Prescaler = 8;
 8000588:	4b1e      	ldr	r3, [pc, #120]	; (8000604 <slcan_set_bitrate+0x174>)
 800058a:	2208      	movs	r2, #8
 800058c:	605a      	str	r2, [r3, #4]
      break;
 800058e:	e026      	b.n	80005de <slcan_set_bitrate+0x14e>
    }
    case 6:
    { // 500k
      hcan.Init.TimeSeg1 = CAN_BS1_12TQ;
 8000590:	4b1c      	ldr	r3, [pc, #112]	; (8000604 <slcan_set_bitrate+0x174>)
 8000592:	f44f 2230 	mov.w	r2, #720896	; 0xb0000
 8000596:	611a      	str	r2, [r3, #16]
      hcan.Init.TimeSeg2 = CAN_BS2_5TQ;
 8000598:	4b1a      	ldr	r3, [pc, #104]	; (8000604 <slcan_set_bitrate+0x174>)
 800059a:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800059e:	615a      	str	r2, [r3, #20]
      hcan.Init.Prescaler = 4;
 80005a0:	4b18      	ldr	r3, [pc, #96]	; (8000604 <slcan_set_bitrate+0x174>)
 80005a2:	2204      	movs	r2, #4
 80005a4:	605a      	str	r2, [r3, #4]
      break;
 80005a6:	e01a      	b.n	80005de <slcan_set_bitrate+0x14e>
    }
    case 7:
    { // 750k
      hcan.Init.TimeSeg1 = CAN_BS1_16TQ;
 80005a8:	4b16      	ldr	r3, [pc, #88]	; (8000604 <slcan_set_bitrate+0x174>)
 80005aa:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
 80005ae:	611a      	str	r2, [r3, #16]
      hcan.Init.TimeSeg2 = CAN_BS2_7TQ;
 80005b0:	4b14      	ldr	r3, [pc, #80]	; (8000604 <slcan_set_bitrate+0x174>)
 80005b2:	f44f 02c0 	mov.w	r2, #6291456	; 0x600000
 80005b6:	615a      	str	r2, [r3, #20]
      hcan.Init.Prescaler = 2;
 80005b8:	4b12      	ldr	r3, [pc, #72]	; (8000604 <slcan_set_bitrate+0x174>)
 80005ba:	2202      	movs	r2, #2
 80005bc:	605a      	str	r2, [r3, #4]
      break;
 80005be:	e00e      	b.n	80005de <slcan_set_bitrate+0x14e>
    }
    case 8:
    { // 1M
      hcan.Init.TimeSeg1 = CAN_BS1_12TQ;
 80005c0:	4b10      	ldr	r3, [pc, #64]	; (8000604 <slcan_set_bitrate+0x174>)
 80005c2:	f44f 2230 	mov.w	r2, #720896	; 0xb0000
 80005c6:	611a      	str	r2, [r3, #16]
      hcan.Init.TimeSeg2 = CAN_BS2_5TQ;
 80005c8:	4b0e      	ldr	r3, [pc, #56]	; (8000604 <slcan_set_bitrate+0x174>)
 80005ca:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80005ce:	615a      	str	r2, [r3, #20]
      hcan.Init.Prescaler = 2;
 80005d0:	4b0c      	ldr	r3, [pc, #48]	; (8000604 <slcan_set_bitrate+0x174>)
 80005d2:	2202      	movs	r2, #2
 80005d4:	605a      	str	r2, [r3, #4]
      break;
 80005d6:	e002      	b.n	80005de <slcan_set_bitrate+0x14e>
    }
    default:
      ok = 0;
 80005d8:	2300      	movs	r3, #0
 80005da:	73fb      	strb	r3, [r7, #15]
      break;
 80005dc:	bf00      	nop
  }
  if (ok && HAL_CAN_Init(&hcan) == HAL_OK)
 80005de:	7bfb      	ldrb	r3, [r7, #15]
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d008      	beq.n	80005f6 <slcan_set_bitrate+0x166>
 80005e4:	4807      	ldr	r0, [pc, #28]	; (8000604 <slcan_set_bitrate+0x174>)
 80005e6:	f000 fe5d 	bl	80012a4 <HAL_CAN_Init>
 80005ea:	4603      	mov	r3, r0
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d102      	bne.n	80005f6 <slcan_set_bitrate+0x166>
  {
    slcan_send_ok();
 80005f0:	f7ff feb2 	bl	8000358 <slcan_send_ok>
 80005f4:	e002      	b.n	80005fc <slcan_set_bitrate+0x16c>
  }
  else
  {
    slcan_send_error();
 80005f6:	f7ff feb9 	bl	800036c <slcan_send_error>
  }
}
 80005fa:	bf00      	nop
 80005fc:	bf00      	nop
 80005fe:	3710      	adds	r7, #16
 8000600:	46bd      	mov	sp, r7
 8000602:	bd80      	pop	{r7, pc}
 8000604:	200001f4 	.word	0x200001f4

08000608 <slcan_send_std_can_msg>:

void slcan_send_std_can_msg(uint32_t id, uint8_t dlc, uint8_t *data)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b08e      	sub	sp, #56	; 0x38
 800060c:	af00      	add	r7, sp, #0
 800060e:	60f8      	str	r0, [r7, #12]
 8000610:	460b      	mov	r3, r1
 8000612:	607a      	str	r2, [r7, #4]
 8000614:	72fb      	strb	r3, [r7, #11]
  // Send standard can message to CAN
  CAN_TxHeaderTypeDef txHeader;
  uint8_t txData[8] = {0};
 8000616:	2300      	movs	r3, #0
 8000618:	61bb      	str	r3, [r7, #24]
 800061a:	2300      	movs	r3, #0
 800061c:	61fb      	str	r3, [r7, #28]
  uint32_t txMailbox;

  txHeader.StdId = id;
 800061e:	68fb      	ldr	r3, [r7, #12]
 8000620:	623b      	str	r3, [r7, #32]
  txHeader.IDE = CAN_ID_STD;
 8000622:	2300      	movs	r3, #0
 8000624:	62bb      	str	r3, [r7, #40]	; 0x28
  txHeader.RTR = CAN_RTR_DATA;
 8000626:	2300      	movs	r3, #0
 8000628:	62fb      	str	r3, [r7, #44]	; 0x2c
  txHeader.DLC = dlc;
 800062a:	7afb      	ldrb	r3, [r7, #11]
 800062c:	633b      	str	r3, [r7, #48]	; 0x30

  memcpy(txData, data, dlc);
 800062e:	7afa      	ldrb	r2, [r7, #11]
 8000630:	f107 0318 	add.w	r3, r7, #24
 8000634:	6879      	ldr	r1, [r7, #4]
 8000636:	4618      	mov	r0, r3
 8000638:	f009 fe7c 	bl	800a334 <memcpy>

  if (HAL_CAN_AddTxMessage(&hcan, &txHeader, txData, &txMailbox) == HAL_OK)
 800063c:	f107 0314 	add.w	r3, r7, #20
 8000640:	f107 0218 	add.w	r2, r7, #24
 8000644:	f107 0120 	add.w	r1, r7, #32
 8000648:	4808      	ldr	r0, [pc, #32]	; (800066c <slcan_send_std_can_msg+0x64>)
 800064a:	f001 f87d 	bl	8001748 <HAL_CAN_AddTxMessage>
 800064e:	4603      	mov	r3, r0
 8000650:	2b00      	cmp	r3, #0
 8000652:	d102      	bne.n	800065a <slcan_send_std_can_msg+0x52>
  {
    slcan_send_ok();
 8000654:	f7ff fe80 	bl	8000358 <slcan_send_ok>
  }
  else
  {
    CDC_Transmit_FS((uint8_t *)"z\r", 2);
  }
}
 8000658:	e003      	b.n	8000662 <slcan_send_std_can_msg+0x5a>
    CDC_Transmit_FS((uint8_t *)"z\r", 2);
 800065a:	2102      	movs	r1, #2
 800065c:	4804      	ldr	r0, [pc, #16]	; (8000670 <slcan_send_std_can_msg+0x68>)
 800065e:	f009 f813 	bl	8009688 <CDC_Transmit_FS>
}
 8000662:	bf00      	nop
 8000664:	3738      	adds	r7, #56	; 0x38
 8000666:	46bd      	mov	sp, r7
 8000668:	bd80      	pop	{r7, pc}
 800066a:	bf00      	nop
 800066c:	200001f4 	.word	0x200001f4
 8000670:	0800b29c 	.word	0x0800b29c

08000674 <slcan_send_ext_can_msg>:

void slcan_send_ext_can_msg(uint32_t id, uint8_t dlc, uint8_t *data)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b08e      	sub	sp, #56	; 0x38
 8000678:	af00      	add	r7, sp, #0
 800067a:	60f8      	str	r0, [r7, #12]
 800067c:	460b      	mov	r3, r1
 800067e:	607a      	str	r2, [r7, #4]
 8000680:	72fb      	strb	r3, [r7, #11]
  // Send extended CAN message to CAN
  CAN_TxHeaderTypeDef txHeader;
  uint8_t txData[8] = {0};
 8000682:	2300      	movs	r3, #0
 8000684:	61bb      	str	r3, [r7, #24]
 8000686:	2300      	movs	r3, #0
 8000688:	61fb      	str	r3, [r7, #28]
  uint32_t txMailbox;

  txHeader.ExtId = id;
 800068a:	68fb      	ldr	r3, [r7, #12]
 800068c:	627b      	str	r3, [r7, #36]	; 0x24
  txHeader.IDE = CAN_ID_EXT;
 800068e:	2304      	movs	r3, #4
 8000690:	62bb      	str	r3, [r7, #40]	; 0x28
  txHeader.RTR = CAN_RTR_DATA;
 8000692:	2300      	movs	r3, #0
 8000694:	62fb      	str	r3, [r7, #44]	; 0x2c
  txHeader.DLC = dlc;
 8000696:	7afb      	ldrb	r3, [r7, #11]
 8000698:	633b      	str	r3, [r7, #48]	; 0x30

  memcpy(txData, data, dlc);
 800069a:	7afa      	ldrb	r2, [r7, #11]
 800069c:	f107 0318 	add.w	r3, r7, #24
 80006a0:	6879      	ldr	r1, [r7, #4]
 80006a2:	4618      	mov	r0, r3
 80006a4:	f009 fe46 	bl	800a334 <memcpy>

  if (HAL_CAN_AddTxMessage(&hcan, &txHeader, txData, &txMailbox) == HAL_OK)
 80006a8:	f107 0314 	add.w	r3, r7, #20
 80006ac:	f107 0218 	add.w	r2, r7, #24
 80006b0:	f107 0120 	add.w	r1, r7, #32
 80006b4:	4808      	ldr	r0, [pc, #32]	; (80006d8 <slcan_send_ext_can_msg+0x64>)
 80006b6:	f001 f847 	bl	8001748 <HAL_CAN_AddTxMessage>
 80006ba:	4603      	mov	r3, r0
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d104      	bne.n	80006ca <slcan_send_ext_can_msg+0x56>
  {
    CDC_Transmit_FS((uint8_t *)"Z\r", 2);
 80006c0:	2102      	movs	r1, #2
 80006c2:	4806      	ldr	r0, [pc, #24]	; (80006dc <slcan_send_ext_can_msg+0x68>)
 80006c4:	f008 ffe0 	bl	8009688 <CDC_Transmit_FS>
  }
  else
  {
    slcan_send_error();
  }
}
 80006c8:	e001      	b.n	80006ce <slcan_send_ext_can_msg+0x5a>
    slcan_send_error();
 80006ca:	f7ff fe4f 	bl	800036c <slcan_send_error>
}
 80006ce:	bf00      	nop
 80006d0:	3738      	adds	r7, #56	; 0x38
 80006d2:	46bd      	mov	sp, r7
 80006d4:	bd80      	pop	{r7, pc}
 80006d6:	bf00      	nop
 80006d8:	200001f4 	.word	0x200001f4
 80006dc:	0800b2a0 	.word	0x0800b2a0

080006e0 <slcan_send_std_rtr_msg>:

void slcan_send_std_rtr_msg(uint32_t id, uint8_t dlc)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b08a      	sub	sp, #40	; 0x28
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	6078      	str	r0, [r7, #4]
 80006e8:	460b      	mov	r3, r1
 80006ea:	70fb      	strb	r3, [r7, #3]
  // Send standard RTR message to CAN
  CAN_TxHeaderTypeDef txHeader;
  uint32_t txMailbox;

  txHeader.StdId = id;
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	613b      	str	r3, [r7, #16]
  txHeader.IDE = CAN_ID_STD;
 80006f0:	2300      	movs	r3, #0
 80006f2:	61bb      	str	r3, [r7, #24]
  txHeader.RTR = CAN_RTR_REMOTE;
 80006f4:	2302      	movs	r3, #2
 80006f6:	61fb      	str	r3, [r7, #28]
  txHeader.DLC = dlc;
 80006f8:	78fb      	ldrb	r3, [r7, #3]
 80006fa:	623b      	str	r3, [r7, #32]

  if (HAL_CAN_AddTxMessage(&hcan, &txHeader, NULL, &txMailbox) == HAL_OK)
 80006fc:	f107 030c 	add.w	r3, r7, #12
 8000700:	f107 0110 	add.w	r1, r7, #16
 8000704:	2200      	movs	r2, #0
 8000706:	4808      	ldr	r0, [pc, #32]	; (8000728 <slcan_send_std_rtr_msg+0x48>)
 8000708:	f001 f81e 	bl	8001748 <HAL_CAN_AddTxMessage>
 800070c:	4603      	mov	r3, r0
 800070e:	2b00      	cmp	r3, #0
 8000710:	d104      	bne.n	800071c <slcan_send_std_rtr_msg+0x3c>
  {
    CDC_Transmit_FS((uint8_t *)"z\r", 2);
 8000712:	2102      	movs	r1, #2
 8000714:	4805      	ldr	r0, [pc, #20]	; (800072c <slcan_send_std_rtr_msg+0x4c>)
 8000716:	f008 ffb7 	bl	8009688 <CDC_Transmit_FS>
  }
  else
  {
    slcan_send_error();
  }
}
 800071a:	e001      	b.n	8000720 <slcan_send_std_rtr_msg+0x40>
    slcan_send_error();
 800071c:	f7ff fe26 	bl	800036c <slcan_send_error>
}
 8000720:	bf00      	nop
 8000722:	3728      	adds	r7, #40	; 0x28
 8000724:	46bd      	mov	sp, r7
 8000726:	bd80      	pop	{r7, pc}
 8000728:	200001f4 	.word	0x200001f4
 800072c:	0800b29c 	.word	0x0800b29c

08000730 <slcan_send_ext_rtr_msg>:

void slcan_send_ext_rtr_msg(uint32_t id, uint8_t dlc)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b08a      	sub	sp, #40	; 0x28
 8000734:	af00      	add	r7, sp, #0
 8000736:	6078      	str	r0, [r7, #4]
 8000738:	460b      	mov	r3, r1
 800073a:	70fb      	strb	r3, [r7, #3]
  // Send extended RTR message to CAN
  CAN_TxHeaderTypeDef txHeader;
  uint32_t txMailbox;

  txHeader.ExtId = id;
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	617b      	str	r3, [r7, #20]
  txHeader.IDE = CAN_ID_EXT;
 8000740:	2304      	movs	r3, #4
 8000742:	61bb      	str	r3, [r7, #24]
  txHeader.RTR = CAN_RTR_REMOTE;
 8000744:	2302      	movs	r3, #2
 8000746:	61fb      	str	r3, [r7, #28]
  txHeader.DLC = dlc;
 8000748:	78fb      	ldrb	r3, [r7, #3]
 800074a:	623b      	str	r3, [r7, #32]

  if (HAL_CAN_AddTxMessage(&hcan, &txHeader, NULL, &txMailbox) == HAL_OK)
 800074c:	f107 030c 	add.w	r3, r7, #12
 8000750:	f107 0110 	add.w	r1, r7, #16
 8000754:	2200      	movs	r2, #0
 8000756:	4808      	ldr	r0, [pc, #32]	; (8000778 <slcan_send_ext_rtr_msg+0x48>)
 8000758:	f000 fff6 	bl	8001748 <HAL_CAN_AddTxMessage>
 800075c:	4603      	mov	r3, r0
 800075e:	2b00      	cmp	r3, #0
 8000760:	d104      	bne.n	800076c <slcan_send_ext_rtr_msg+0x3c>
  {
    CDC_Transmit_FS((uint8_t *)"Z\r", 2);
 8000762:	2102      	movs	r1, #2
 8000764:	4805      	ldr	r0, [pc, #20]	; (800077c <slcan_send_ext_rtr_msg+0x4c>)
 8000766:	f008 ff8f 	bl	8009688 <CDC_Transmit_FS>
  }
  else
  {
    slcan_send_error();
  }
}
 800076a:	e001      	b.n	8000770 <slcan_send_ext_rtr_msg+0x40>
    slcan_send_error();
 800076c:	f7ff fdfe 	bl	800036c <slcan_send_error>
}
 8000770:	bf00      	nop
 8000772:	3728      	adds	r7, #40	; 0x28
 8000774:	46bd      	mov	sp, r7
 8000776:	bd80      	pop	{r7, pc}
 8000778:	200001f4 	.word	0x200001f4
 800077c:	0800b2a0 	.word	0x0800b2a0

08000780 <slcan_process_command>:

void slcan_process_command(uint8_t *cmd, uint8_t len) {
 8000780:	b580      	push	{r7, lr}
 8000782:	b09a      	sub	sp, #104	; 0x68
 8000784:	af00      	add	r7, sp, #0
 8000786:	6078      	str	r0, [r7, #4]
 8000788:	460b      	mov	r3, r1
 800078a:	70fb      	strb	r3, [r7, #3]
  if (len < 1) return;
 800078c:	78fb      	ldrb	r3, [r7, #3]
 800078e:	2b00      	cmp	r3, #0
 8000790:	f000 821b 	beq.w	8000bca <slcan_process_command+0x44a>
  switch (cmd[0]) {
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	781b      	ldrb	r3, [r3, #0]
 8000798:	3b43      	subs	r3, #67	; 0x43
 800079a:	2b31      	cmp	r3, #49	; 0x31
 800079c:	f200 8212 	bhi.w	8000bc4 <slcan_process_command+0x444>
 80007a0:	a201      	add	r2, pc, #4	; (adr r2, 80007a8 <slcan_process_command+0x28>)
 80007a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007a6:	bf00      	nop
 80007a8:	08000913 	.word	0x08000913
 80007ac:	08000bc5 	.word	0x08000bc5
 80007b0:	08000bc5 	.word	0x08000bc5
 80007b4:	08000bbf 	.word	0x08000bbf
 80007b8:	08000bc5 	.word	0x08000bc5
 80007bc:	08000bc5 	.word	0x08000bc5
 80007c0:	08000bc5 	.word	0x08000bc5
 80007c4:	08000bc5 	.word	0x08000bc5
 80007c8:	08000bc5 	.word	0x08000bc5
 80007cc:	08000bc5 	.word	0x08000bc5
 80007d0:	08000bc5 	.word	0x08000bc5
 80007d4:	080008d7 	.word	0x080008d7
 80007d8:	080008dd 	.word	0x080008dd
 80007dc:	08000bc5 	.word	0x08000bc5
 80007e0:	08000bc5 	.word	0x08000bc5
 80007e4:	08000b51 	.word	0x08000b51
 80007e8:	08000871 	.word	0x08000871
 80007ec:	08000a75 	.word	0x08000a75
 80007f0:	08000bc5 	.word	0x08000bc5
 80007f4:	08000bb5 	.word	0x08000bb5
 80007f8:	08000bc5 	.word	0x08000bc5
 80007fc:	08000bc5 	.word	0x08000bc5
 8000800:	08000bc5 	.word	0x08000bc5
 8000804:	08000bc5 	.word	0x08000bc5
 8000808:	08000bc5 	.word	0x08000bc5
 800080c:	08000bc5 	.word	0x08000bc5
 8000810:	08000bc5 	.word	0x08000bc5
 8000814:	08000bc5 	.word	0x08000bc5
 8000818:	08000bc5 	.word	0x08000bc5
 800081c:	08000bc5 	.word	0x08000bc5
 8000820:	08000bc5 	.word	0x08000bc5
 8000824:	08000bc5 	.word	0x08000bc5
 8000828:	08000899 	.word	0x08000899
 800082c:	08000bc5 	.word	0x08000bc5
 8000830:	08000bc5 	.word	0x08000bc5
 8000834:	08000bc5 	.word	0x08000bc5
 8000838:	08000bc5 	.word	0x08000bc5
 800083c:	08000bc5 	.word	0x08000bc5
 8000840:	08000bc5 	.word	0x08000bc5
 8000844:	08000bc5 	.word	0x08000bc5
 8000848:	08000bc5 	.word	0x08000bc5
 800084c:	08000bc5 	.word	0x08000bc5
 8000850:	08000bc5 	.word	0x08000bc5
 8000854:	08000bc5 	.word	0x08000bc5
 8000858:	08000bc5 	.word	0x08000bc5
 800085c:	08000bc5 	.word	0x08000bc5
 8000860:	08000bc5 	.word	0x08000bc5
 8000864:	08000a1b 	.word	0x08000a1b
 8000868:	08000bc5 	.word	0x08000bc5
 800086c:	08000941 	.word	0x08000941
    case 'S': // Set bitrate
      if (can_open || len < 2)
 8000870:	4bb5      	ldr	r3, [pc, #724]	; (8000b48 <slcan_process_command+0x3c8>)
 8000872:	781b      	ldrb	r3, [r3, #0]
 8000874:	b2db      	uxtb	r3, r3
 8000876:	2b00      	cmp	r3, #0
 8000878:	d102      	bne.n	8000880 <slcan_process_command+0x100>
 800087a:	78fb      	ldrb	r3, [r7, #3]
 800087c:	2b01      	cmp	r3, #1
 800087e:	d802      	bhi.n	8000886 <slcan_process_command+0x106>
      {
        slcan_send_error();
 8000880:	f7ff fd74 	bl	800036c <slcan_send_error>
        break;
 8000884:	e1a2      	b.n	8000bcc <slcan_process_command+0x44c>
      }
      slcan_set_bitrate(cmd[1] - '0');
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	3301      	adds	r3, #1
 800088a:	781b      	ldrb	r3, [r3, #0]
 800088c:	3b30      	subs	r3, #48	; 0x30
 800088e:	b2db      	uxtb	r3, r3
 8000890:	4618      	mov	r0, r3
 8000892:	f7ff fdfd 	bl	8000490 <slcan_set_bitrate>
      break;
 8000896:	e199      	b.n	8000bcc <slcan_process_command+0x44c>
    case 'c': // Set CAN channel
      if (len < 2) {
 8000898:	78fb      	ldrb	r3, [r7, #3]
 800089a:	2b01      	cmp	r3, #1
 800089c:	d802      	bhi.n	80008a4 <slcan_process_command+0x124>
        slcan_send_error();
 800089e:	f7ff fd65 	bl	800036c <slcan_send_error>
        break;
 80008a2:	e193      	b.n	8000bcc <slcan_process_command+0x44c>
      }
      if(can_open){
 80008a4:	4ba8      	ldr	r3, [pc, #672]	; (8000b48 <slcan_process_command+0x3c8>)
 80008a6:	781b      	ldrb	r3, [r3, #0]
 80008a8:	b2db      	uxtb	r3, r3
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d008      	beq.n	80008c0 <slcan_process_command+0x140>
        if (HAL_CAN_Stop(&hcan) == HAL_OK)
 80008ae:	48a7      	ldr	r0, [pc, #668]	; (8000b4c <slcan_process_command+0x3cc>)
 80008b0:	f000 ff01 	bl	80016b6 <HAL_CAN_Stop>
 80008b4:	4603      	mov	r3, r0
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d102      	bne.n	80008c0 <slcan_process_command+0x140>
        {
          can_open = 0;
 80008ba:	4ba3      	ldr	r3, [pc, #652]	; (8000b48 <slcan_process_command+0x3c8>)
 80008bc:	2200      	movs	r2, #0
 80008be:	701a      	strb	r2, [r3, #0]
        }
      }
      slcan_set_channel(cmd[1] - '0');
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	3301      	adds	r3, #1
 80008c4:	781b      	ldrb	r3, [r3, #0]
 80008c6:	3b30      	subs	r3, #48	; 0x30
 80008c8:	b2db      	uxtb	r3, r3
 80008ca:	4618      	mov	r0, r3
 80008cc:	f7ff fd2a 	bl	8000324 <slcan_set_channel>
      slcan_send_ok();
 80008d0:	f7ff fd42 	bl	8000358 <slcan_send_ok>
      break;
 80008d4:	e17a      	b.n	8000bcc <slcan_process_command+0x44c>
    case 'N': // Get serial number
      slcan_send_serial_number();
 80008d6:	f7ff fd53 	bl	8000380 <slcan_send_serial_number>
      break;
 80008da:	e177      	b.n	8000bcc <slcan_process_command+0x44c>
    case 'O': // Open CAN channel
      if (!can_open)
 80008dc:	4b9a      	ldr	r3, [pc, #616]	; (8000b48 <slcan_process_command+0x3c8>)
 80008de:	781b      	ldrb	r3, [r3, #0]
 80008e0:	b2db      	uxtb	r3, r3
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d112      	bne.n	800090c <slcan_process_command+0x18c>
      {
        if (HAL_CAN_Start(&hcan) == HAL_OK)
 80008e6:	4899      	ldr	r0, [pc, #612]	; (8000b4c <slcan_process_command+0x3cc>)
 80008e8:	f000 fea1 	bl	800162e <HAL_CAN_Start>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d109      	bne.n	8000906 <slcan_process_command+0x186>
        {
          HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 80008f2:	2102      	movs	r1, #2
 80008f4:	4895      	ldr	r0, [pc, #596]	; (8000b4c <slcan_process_command+0x3cc>)
 80008f6:	f001 f976 	bl	8001be6 <HAL_CAN_ActivateNotification>
          can_open = 1;
 80008fa:	4b93      	ldr	r3, [pc, #588]	; (8000b48 <slcan_process_command+0x3c8>)
 80008fc:	2201      	movs	r2, #1
 80008fe:	701a      	strb	r2, [r3, #0]
          slcan_send_ok();
 8000900:	f7ff fd2a 	bl	8000358 <slcan_send_ok>
      }
      else
      {
        slcan_send_error();
      }
      break;
 8000904:	e162      	b.n	8000bcc <slcan_process_command+0x44c>
          slcan_send_error();
 8000906:	f7ff fd31 	bl	800036c <slcan_send_error>
      break;
 800090a:	e15f      	b.n	8000bcc <slcan_process_command+0x44c>
        slcan_send_error();
 800090c:	f7ff fd2e 	bl	800036c <slcan_send_error>
      break;
 8000910:	e15c      	b.n	8000bcc <slcan_process_command+0x44c>
    case 'C': // Close CAN channel
      if (can_open)
 8000912:	4b8d      	ldr	r3, [pc, #564]	; (8000b48 <slcan_process_command+0x3c8>)
 8000914:	781b      	ldrb	r3, [r3, #0]
 8000916:	b2db      	uxtb	r3, r3
 8000918:	2b00      	cmp	r3, #0
 800091a:	d00e      	beq.n	800093a <slcan_process_command+0x1ba>
      {
        if (HAL_CAN_Stop(&hcan) == HAL_OK)
 800091c:	488b      	ldr	r0, [pc, #556]	; (8000b4c <slcan_process_command+0x3cc>)
 800091e:	f000 feca 	bl	80016b6 <HAL_CAN_Stop>
 8000922:	4603      	mov	r3, r0
 8000924:	2b00      	cmp	r3, #0
 8000926:	d105      	bne.n	8000934 <slcan_process_command+0x1b4>
        {
          can_open = 0;
 8000928:	4b87      	ldr	r3, [pc, #540]	; (8000b48 <slcan_process_command+0x3c8>)
 800092a:	2200      	movs	r2, #0
 800092c:	701a      	strb	r2, [r3, #0]
          slcan_send_ok();
 800092e:	f7ff fd13 	bl	8000358 <slcan_send_ok>
      }
      else
      {
        slcan_send_error();
      }
      break;
 8000932:	e14b      	b.n	8000bcc <slcan_process_command+0x44c>
          slcan_send_error();
 8000934:	f7ff fd1a 	bl	800036c <slcan_send_error>
      break;
 8000938:	e148      	b.n	8000bcc <slcan_process_command+0x44c>
        slcan_send_error();
 800093a:	f7ff fd17 	bl	800036c <slcan_send_error>
      break;
 800093e:	e145      	b.n	8000bcc <slcan_process_command+0x44c>
    case 't': // Send standard CAN frame
      if (!can_open)
 8000940:	4b81      	ldr	r3, [pc, #516]	; (8000b48 <slcan_process_command+0x3c8>)
 8000942:	781b      	ldrb	r3, [r3, #0]
 8000944:	b2db      	uxtb	r3, r3
 8000946:	2b00      	cmp	r3, #0
 8000948:	d102      	bne.n	8000950 <slcan_process_command+0x1d0>
      {
        slcan_send_error();
 800094a:	f7ff fd0f 	bl	800036c <slcan_send_error>
        break;
 800094e:	e13d      	b.n	8000bcc <slcan_process_command+0x44c>
      }
      {
        // SLCAN: tiiiLddd... (iii=ID, L=DLC, d=DATA)
        uint8_t txData[8] = {0};
 8000950:	2300      	movs	r3, #0
 8000952:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000954:	2300      	movs	r3, #0
 8000956:	643b      	str	r3, [r7, #64]	; 0x40
        if (len < 5)
 8000958:	78fb      	ldrb	r3, [r7, #3]
 800095a:	2b04      	cmp	r3, #4
 800095c:	d802      	bhi.n	8000964 <slcan_process_command+0x1e4>
        {
          slcan_send_error();
 800095e:	f7ff fd05 	bl	800036c <slcan_send_error>
 8000962:	e133      	b.n	8000bcc <slcan_process_command+0x44c>
          break;
        }
        // Parse 11-bit ID
        char idStr[4] = {0};
 8000964:	2300      	movs	r3, #0
 8000966:	63bb      	str	r3, [r7, #56]	; 0x38
        memcpy(idStr, &cmd[1], 3);
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	1c59      	adds	r1, r3, #1
 800096c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000970:	2203      	movs	r2, #3
 8000972:	4618      	mov	r0, r3
 8000974:	f009 fcde 	bl	800a334 <memcpy>
        uint32_t ID = (uint32_t)strtol(idStr, NULL, 16);
 8000978:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800097c:	2210      	movs	r2, #16
 800097e:	2100      	movs	r1, #0
 8000980:	4618      	mov	r0, r3
 8000982:	f009 fb25 	bl	8009fd0 <strtol>
 8000986:	4603      	mov	r3, r0
 8000988:	663b      	str	r3, [r7, #96]	; 0x60
        uint32_t DLC = cmd[4] - '0';
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	3304      	adds	r3, #4
 800098e:	781b      	ldrb	r3, [r3, #0]
 8000990:	3b30      	subs	r3, #48	; 0x30
 8000992:	65fb      	str	r3, [r7, #92]	; 0x5c
        // Data bytes
        for (uint8_t i = 0; i < DLC && (5 + 2 * i + 1) <= len; i++)
 8000994:	2300      	movs	r3, #0
 8000996:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800099a:	e029      	b.n	80009f0 <slcan_process_command+0x270>
        {
          char byteStr[3] = {cmd[5 + 2 * i], cmd[5 + 2 * i + 1], 0};
 800099c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80009a0:	005b      	lsls	r3, r3, #1
 80009a2:	3305      	adds	r3, #5
 80009a4:	461a      	mov	r2, r3
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	4413      	add	r3, r2
 80009aa:	781b      	ldrb	r3, [r3, #0]
 80009ac:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 80009b0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80009b4:	005b      	lsls	r3, r3, #1
 80009b6:	3306      	adds	r3, #6
 80009b8:	687a      	ldr	r2, [r7, #4]
 80009ba:	4413      	add	r3, r2
 80009bc:	781b      	ldrb	r3, [r3, #0]
 80009be:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 80009c2:	2300      	movs	r3, #0
 80009c4:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
          txData[i] = (uint8_t)strtol(byteStr, NULL, 16);
 80009c8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80009cc:	2210      	movs	r2, #16
 80009ce:	2100      	movs	r1, #0
 80009d0:	4618      	mov	r0, r3
 80009d2:	f009 fafd 	bl	8009fd0 <strtol>
 80009d6:	4602      	mov	r2, r0
 80009d8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80009dc:	b2d2      	uxtb	r2, r2
 80009de:	3368      	adds	r3, #104	; 0x68
 80009e0:	443b      	add	r3, r7
 80009e2:	f803 2c2c 	strb.w	r2, [r3, #-44]
        for (uint8_t i = 0; i < DLC && (5 + 2 * i + 1) <= len; i++)
 80009e6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80009ea:	3301      	adds	r3, #1
 80009ec:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80009f0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80009f4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80009f6:	429a      	cmp	r2, r3
 80009f8:	d906      	bls.n	8000a08 <slcan_process_command+0x288>
 80009fa:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80009fe:	3303      	adds	r3, #3
 8000a00:	005a      	lsls	r2, r3, #1
 8000a02:	78fb      	ldrb	r3, [r7, #3]
 8000a04:	429a      	cmp	r2, r3
 8000a06:	ddc9      	ble.n	800099c <slcan_process_command+0x21c>
        }
        slcan_send_std_can_msg(ID, DLC, txData);
 8000a08:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000a0a:	b2db      	uxtb	r3, r3
 8000a0c:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8000a10:	4619      	mov	r1, r3
 8000a12:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8000a14:	f7ff fdf8 	bl	8000608 <slcan_send_std_can_msg>
      }
      break;
 8000a18:	e0d8      	b.n	8000bcc <slcan_process_command+0x44c>
    case 'r': // Send standard RTR
      if (!can_open)
 8000a1a:	4b4b      	ldr	r3, [pc, #300]	; (8000b48 <slcan_process_command+0x3c8>)
 8000a1c:	781b      	ldrb	r3, [r3, #0]
 8000a1e:	b2db      	uxtb	r3, r3
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d102      	bne.n	8000a2a <slcan_process_command+0x2aa>
      {
        slcan_send_error();
 8000a24:	f7ff fca2 	bl	800036c <slcan_send_error>
        break;
 8000a28:	e0d0      	b.n	8000bcc <slcan_process_command+0x44c>
      }
      {
        // SLCAN: riiiLddd... (iii=ID, L=DLC, d=DATA)
        if (len < 5)
 8000a2a:	78fb      	ldrb	r3, [r7, #3]
 8000a2c:	2b04      	cmp	r3, #4
 8000a2e:	d802      	bhi.n	8000a36 <slcan_process_command+0x2b6>
        {
          slcan_send_error();
 8000a30:	f7ff fc9c 	bl	800036c <slcan_send_error>
 8000a34:	e0ca      	b.n	8000bcc <slcan_process_command+0x44c>
          break;
        }
        // Parse 11-bit ID
        char idStr[4] = {0};
 8000a36:	2300      	movs	r3, #0
 8000a38:	633b      	str	r3, [r7, #48]	; 0x30
        memcpy(idStr, &cmd[1], 3);
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	1c59      	adds	r1, r3, #1
 8000a3e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000a42:	2203      	movs	r2, #3
 8000a44:	4618      	mov	r0, r3
 8000a46:	f009 fc75 	bl	800a334 <memcpy>
        uint32_t ID = (uint32_t)strtol(idStr, NULL, 16);
 8000a4a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000a4e:	2210      	movs	r2, #16
 8000a50:	2100      	movs	r1, #0
 8000a52:	4618      	mov	r0, r3
 8000a54:	f009 fabc 	bl	8009fd0 <strtol>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	65bb      	str	r3, [r7, #88]	; 0x58
        uint32_t DLC = cmd[4] - '0';
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	3304      	adds	r3, #4
 8000a60:	781b      	ldrb	r3, [r3, #0]
 8000a62:	3b30      	subs	r3, #48	; 0x30
 8000a64:	657b      	str	r3, [r7, #84]	; 0x54
        slcan_send_std_rtr_msg(ID, DLC);
 8000a66:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000a68:	b2db      	uxtb	r3, r3
 8000a6a:	4619      	mov	r1, r3
 8000a6c:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8000a6e:	f7ff fe37 	bl	80006e0 <slcan_send_std_rtr_msg>
      }
      break;
 8000a72:	e0ab      	b.n	8000bcc <slcan_process_command+0x44c>
    case 'T': // Send extended CAN frame
      if (!can_open)
 8000a74:	4b34      	ldr	r3, [pc, #208]	; (8000b48 <slcan_process_command+0x3c8>)
 8000a76:	781b      	ldrb	r3, [r3, #0]
 8000a78:	b2db      	uxtb	r3, r3
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d102      	bne.n	8000a84 <slcan_process_command+0x304>
      {
        slcan_send_error();
 8000a7e:	f7ff fc75 	bl	800036c <slcan_send_error>
        break;
 8000a82:	e0a3      	b.n	8000bcc <slcan_process_command+0x44c>
      }
      {
        // SLCAN: TiiiiiiiNd... (iiiiiiii=ID, N=DLC, d=DATA)
        char idStr[9] = {0};
 8000a84:	2300      	movs	r3, #0
 8000a86:	627b      	str	r3, [r7, #36]	; 0x24
 8000a88:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	601a      	str	r2, [r3, #0]
 8000a90:	711a      	strb	r2, [r3, #4]
        memcpy(idStr, &cmd[1], 8);
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	1c59      	adds	r1, r3, #1
 8000a96:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a9a:	2208      	movs	r2, #8
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	f009 fc49 	bl	800a334 <memcpy>
        uint32_t ID = (uint32_t)strtol(idStr, NULL, 16);
 8000aa2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000aa6:	2210      	movs	r2, #16
 8000aa8:	2100      	movs	r1, #0
 8000aaa:	4618      	mov	r0, r3
 8000aac:	f009 fa90 	bl	8009fd0 <strtol>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	653b      	str	r3, [r7, #80]	; 0x50
        uint32_t DLC = cmd[9] - '0';
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	3309      	adds	r3, #9
 8000ab8:	781b      	ldrb	r3, [r3, #0]
 8000aba:	3b30      	subs	r3, #48	; 0x30
 8000abc:	64fb      	str	r3, [r7, #76]	; 0x4c
        uint8_t txData[8] = {0};
 8000abe:	2300      	movs	r3, #0
 8000ac0:	61fb      	str	r3, [r7, #28]
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	623b      	str	r3, [r7, #32]
        for (uint8_t i = 0; i < DLC && (10 + 2 * i + 1) <= len; i++)
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 8000acc:	e026      	b.n	8000b1c <slcan_process_command+0x39c>
        {
          char byteStr[3] = {cmd[10 + 2 * i], cmd[10 + 2 * i + 1], 0};
 8000ace:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000ad2:	3305      	adds	r3, #5
 8000ad4:	005b      	lsls	r3, r3, #1
 8000ad6:	461a      	mov	r2, r3
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	4413      	add	r3, r2
 8000adc:	781b      	ldrb	r3, [r3, #0]
 8000ade:	763b      	strb	r3, [r7, #24]
 8000ae0:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000ae4:	005b      	lsls	r3, r3, #1
 8000ae6:	330b      	adds	r3, #11
 8000ae8:	687a      	ldr	r2, [r7, #4]
 8000aea:	4413      	add	r3, r2
 8000aec:	781b      	ldrb	r3, [r3, #0]
 8000aee:	767b      	strb	r3, [r7, #25]
 8000af0:	2300      	movs	r3, #0
 8000af2:	76bb      	strb	r3, [r7, #26]
          txData[i] = (uint8_t)strtol(byteStr, NULL, 16);
 8000af4:	f107 0318 	add.w	r3, r7, #24
 8000af8:	2210      	movs	r2, #16
 8000afa:	2100      	movs	r1, #0
 8000afc:	4618      	mov	r0, r3
 8000afe:	f009 fa67 	bl	8009fd0 <strtol>
 8000b02:	4602      	mov	r2, r0
 8000b04:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000b08:	b2d2      	uxtb	r2, r2
 8000b0a:	3368      	adds	r3, #104	; 0x68
 8000b0c:	443b      	add	r3, r7
 8000b0e:	f803 2c4c 	strb.w	r2, [r3, #-76]
        for (uint8_t i = 0; i < DLC && (10 + 2 * i + 1) <= len; i++)
 8000b12:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000b16:	3301      	adds	r3, #1
 8000b18:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 8000b1c:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000b20:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000b22:	429a      	cmp	r2, r3
 8000b24:	d906      	bls.n	8000b34 <slcan_process_command+0x3b4>
 8000b26:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000b2a:	3305      	adds	r3, #5
 8000b2c:	005a      	lsls	r2, r3, #1
 8000b2e:	78fb      	ldrb	r3, [r7, #3]
 8000b30:	429a      	cmp	r2, r3
 8000b32:	dbcc      	blt.n	8000ace <slcan_process_command+0x34e>
        }
        slcan_send_ext_can_msg(ID, DLC, txData);
 8000b34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000b36:	b2db      	uxtb	r3, r3
 8000b38:	f107 021c 	add.w	r2, r7, #28
 8000b3c:	4619      	mov	r1, r3
 8000b3e:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8000b40:	f7ff fd98 	bl	8000674 <slcan_send_ext_can_msg>
      }
      break;
 8000b44:	e042      	b.n	8000bcc <slcan_process_command+0x44c>
 8000b46:	bf00      	nop
 8000b48:	20000240 	.word	0x20000240
 8000b4c:	200001f4 	.word	0x200001f4
    case 'R': // Send extended RTR
      if (!can_open)
 8000b50:	4b20      	ldr	r3, [pc, #128]	; (8000bd4 <slcan_process_command+0x454>)
 8000b52:	781b      	ldrb	r3, [r3, #0]
 8000b54:	b2db      	uxtb	r3, r3
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d102      	bne.n	8000b60 <slcan_process_command+0x3e0>
      {
        slcan_send_error();
 8000b5a:	f7ff fc07 	bl	800036c <slcan_send_error>
        break;
 8000b5e:	e035      	b.n	8000bcc <slcan_process_command+0x44c>
      }
      {
        // SLCAN: TiiiiiiiNd... (iiiiiiii=ID, N=DLC, d=DATA)
        
        if (len < 10)
 8000b60:	78fb      	ldrb	r3, [r7, #3]
 8000b62:	2b09      	cmp	r3, #9
 8000b64:	d802      	bhi.n	8000b6c <slcan_process_command+0x3ec>
        {
          slcan_send_error();
 8000b66:	f7ff fc01 	bl	800036c <slcan_send_error>
 8000b6a:	e02f      	b.n	8000bcc <slcan_process_command+0x44c>
          break;
        }
        // Parse 29-bit ID
        char idStr[9] = {0};
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	60fb      	str	r3, [r7, #12]
 8000b70:	f107 0310 	add.w	r3, r7, #16
 8000b74:	2200      	movs	r2, #0
 8000b76:	601a      	str	r2, [r3, #0]
 8000b78:	711a      	strb	r2, [r3, #4]
        memcpy(idStr, &cmd[1], 8);
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	1c59      	adds	r1, r3, #1
 8000b7e:	f107 030c 	add.w	r3, r7, #12
 8000b82:	2208      	movs	r2, #8
 8000b84:	4618      	mov	r0, r3
 8000b86:	f009 fbd5 	bl	800a334 <memcpy>
        uint32_t ID = (uint32_t)strtol(idStr, NULL, 16);
 8000b8a:	f107 030c 	add.w	r3, r7, #12
 8000b8e:	2210      	movs	r2, #16
 8000b90:	2100      	movs	r1, #0
 8000b92:	4618      	mov	r0, r3
 8000b94:	f009 fa1c 	bl	8009fd0 <strtol>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	64bb      	str	r3, [r7, #72]	; 0x48
        uint32_t DLC = cmd[9] - '0';
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	3309      	adds	r3, #9
 8000ba0:	781b      	ldrb	r3, [r3, #0]
 8000ba2:	3b30      	subs	r3, #48	; 0x30
 8000ba4:	647b      	str	r3, [r7, #68]	; 0x44
        slcan_send_ext_rtr_msg(ID, DLC);
 8000ba6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000ba8:	b2db      	uxtb	r3, r3
 8000baa:	4619      	mov	r1, r3
 8000bac:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8000bae:	f7ff fdbf 	bl	8000730 <slcan_send_ext_rtr_msg>
      }
      break;
 8000bb2:	e00b      	b.n	8000bcc <slcan_process_command+0x44c>
    case 'V': // Get version
      CDC_Transmit_FS((uint8_t*)"V0101\r", 6);
 8000bb4:	2106      	movs	r1, #6
 8000bb6:	4808      	ldr	r0, [pc, #32]	; (8000bd8 <slcan_process_command+0x458>)
 8000bb8:	f008 fd66 	bl	8009688 <CDC_Transmit_FS>
      break;
 8000bbc:	e006      	b.n	8000bcc <slcan_process_command+0x44c>
    case 'F':
      slcan_return_status_flags();
 8000bbe:	f7ff fbe9 	bl	8000394 <slcan_return_status_flags>
      break;
 8000bc2:	e003      	b.n	8000bcc <slcan_process_command+0x44c>
    default : slcan_send_error();
 8000bc4:	f7ff fbd2 	bl	800036c <slcan_send_error>
      break;
 8000bc8:	e000      	b.n	8000bcc <slcan_process_command+0x44c>
  if (len < 1) return;
 8000bca:	bf00      	nop
  }
}
 8000bcc:	3768      	adds	r7, #104	; 0x68
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bd80      	pop	{r7, pc}
 8000bd2:	bf00      	nop
 8000bd4:	20000240 	.word	0x20000240
 8000bd8:	0800b28c 	.word	0x0800b28c

08000bdc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000be0:	f000 fafa 	bl	80011d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000be4:	f000 f807 	bl	8000bf6 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000be8:	f000 f8b2 	bl	8000d50 <MX_GPIO_Init>
  MX_CAN_Init();
 8000bec:	f000 f85e 	bl	8000cac <MX_CAN_Init>
  MX_USB_DEVICE_Init();
 8000bf0:	f008 fc86 	bl	8009500 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000bf4:	e7fe      	b.n	8000bf4 <main+0x18>

08000bf6 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bf6:	b580      	push	{r7, lr}
 8000bf8:	b09e      	sub	sp, #120	; 0x78
 8000bfa:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bfc:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000c00:	2228      	movs	r2, #40	; 0x28
 8000c02:	2100      	movs	r1, #0
 8000c04:	4618      	mov	r0, r3
 8000c06:	f009 fb1a 	bl	800a23e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c0a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000c0e:	2200      	movs	r2, #0
 8000c10:	601a      	str	r2, [r3, #0]
 8000c12:	605a      	str	r2, [r3, #4]
 8000c14:	609a      	str	r2, [r3, #8]
 8000c16:	60da      	str	r2, [r3, #12]
 8000c18:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c1a:	463b      	mov	r3, r7
 8000c1c:	223c      	movs	r2, #60	; 0x3c
 8000c1e:	2100      	movs	r1, #0
 8000c20:	4618      	mov	r0, r3
 8000c22:	f009 fb0c 	bl	800a23e <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c26:	2301      	movs	r3, #1
 8000c28:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c2a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c2e:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000c30:	2300      	movs	r3, #0
 8000c32:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c34:	2301      	movs	r3, #1
 8000c36:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c38:	2302      	movs	r3, #2
 8000c3a:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c3c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c40:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL3;
 8000c42:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8000c46:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c48:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	f003 f98d 	bl	8003f6c <HAL_RCC_OscConfig>
 8000c52:	4603      	mov	r3, r0
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d001      	beq.n	8000c5c <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000c58:	f000 f918 	bl	8000e8c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c5c:	230f      	movs	r3, #15
 8000c5e:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c60:	2302      	movs	r3, #2
 8000c62:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c64:	2300      	movs	r3, #0
 8000c66:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c68:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c6c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000c72:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000c76:	2102      	movs	r1, #2
 8000c78:	4618      	mov	r0, r3
 8000c7a:	f004 f9b5 	bl	8004fe8 <HAL_RCC_ClockConfig>
 8000c7e:	4603      	mov	r3, r0
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d001      	beq.n	8000c88 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000c84:	f000 f902 	bl	8000e8c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000c88:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000c8c:	603b      	str	r3, [r7, #0]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c92:	463b      	mov	r3, r7
 8000c94:	4618      	mov	r0, r3
 8000c96:	f004 fb79 	bl	800538c <HAL_RCCEx_PeriphCLKConfig>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d001      	beq.n	8000ca4 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000ca0:	f000 f8f4 	bl	8000e8c <Error_Handler>
  }
}
 8000ca4:	bf00      	nop
 8000ca6:	3778      	adds	r7, #120	; 0x78
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	bd80      	pop	{r7, pc}

08000cac <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b08a      	sub	sp, #40	; 0x28
 8000cb0:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 8000cb2:	4b25      	ldr	r3, [pc, #148]	; (8000d48 <MX_CAN_Init+0x9c>)
 8000cb4:	4a25      	ldr	r2, [pc, #148]	; (8000d4c <MX_CAN_Init+0xa0>)
 8000cb6:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 2;
 8000cb8:	4b23      	ldr	r3, [pc, #140]	; (8000d48 <MX_CAN_Init+0x9c>)
 8000cba:	2202      	movs	r2, #2
 8000cbc:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000cbe:	4b22      	ldr	r3, [pc, #136]	; (8000d48 <MX_CAN_Init+0x9c>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000cc4:	4b20      	ldr	r3, [pc, #128]	; (8000d48 <MX_CAN_Init+0x9c>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_12TQ;
 8000cca:	4b1f      	ldr	r3, [pc, #124]	; (8000d48 <MX_CAN_Init+0x9c>)
 8000ccc:	f44f 2230 	mov.w	r2, #720896	; 0xb0000
 8000cd0:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_5TQ;
 8000cd2:	4b1d      	ldr	r3, [pc, #116]	; (8000d48 <MX_CAN_Init+0x9c>)
 8000cd4:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000cd8:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000cda:	4b1b      	ldr	r3, [pc, #108]	; (8000d48 <MX_CAN_Init+0x9c>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8000ce0:	4b19      	ldr	r3, [pc, #100]	; (8000d48 <MX_CAN_Init+0x9c>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000ce6:	4b18      	ldr	r3, [pc, #96]	; (8000d48 <MX_CAN_Init+0x9c>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8000cec:	4b16      	ldr	r3, [pc, #88]	; (8000d48 <MX_CAN_Init+0x9c>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000cf2:	4b15      	ldr	r3, [pc, #84]	; (8000d48 <MX_CAN_Init+0x9c>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000cf8:	4b13      	ldr	r3, [pc, #76]	; (8000d48 <MX_CAN_Init+0x9c>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000cfe:	4812      	ldr	r0, [pc, #72]	; (8000d48 <MX_CAN_Init+0x9c>)
 8000d00:	f000 fad0 	bl	80012a4 <HAL_CAN_Init>
 8000d04:	4603      	mov	r3, r0
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d001      	beq.n	8000d0e <MX_CAN_Init+0x62>
  {
    Error_Handler();
 8000d0a:	f000 f8bf 	bl	8000e8c <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
  CAN_FilterTypeDef sFilterConfig;
  sFilterConfig.FilterBank = 0;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	617b      	str	r3, [r7, #20]
  sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000d12:	2300      	movs	r3, #0
 8000d14:	61bb      	str	r3, [r7, #24]
  sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000d16:	2301      	movs	r3, #1
 8000d18:	61fb      	str	r3, [r7, #28]
  sFilterConfig.FilterIdHigh = 0x0000;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	603b      	str	r3, [r7, #0]
  sFilterConfig.FilterIdLow = 0x0000;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	607b      	str	r3, [r7, #4]
  sFilterConfig.FilterMaskIdHigh = 0x0000;
 8000d22:	2300      	movs	r3, #0
 8000d24:	60bb      	str	r3, [r7, #8]
  sFilterConfig.FilterMaskIdLow = 0x0000;
 8000d26:	2300      	movs	r3, #0
 8000d28:	60fb      	str	r3, [r7, #12]
  sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	613b      	str	r3, [r7, #16]
  sFilterConfig.FilterActivation = ENABLE;
 8000d2e:	2301      	movs	r3, #1
 8000d30:	623b      	str	r3, [r7, #32]
  sFilterConfig.SlaveStartFilterBank = 14;
 8000d32:	230e      	movs	r3, #14
 8000d34:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_CAN_ConfigFilter(&hcan, &sFilterConfig);
 8000d36:	463b      	mov	r3, r7
 8000d38:	4619      	mov	r1, r3
 8000d3a:	4803      	ldr	r0, [pc, #12]	; (8000d48 <MX_CAN_Init+0x9c>)
 8000d3c:	f000 fbad 	bl	800149a <HAL_CAN_ConfigFilter>
  /* USER CODE END CAN_Init 2 */

}
 8000d40:	bf00      	nop
 8000d42:	3728      	adds	r7, #40	; 0x28
 8000d44:	46bd      	mov	sp, r7
 8000d46:	bd80      	pop	{r7, pc}
 8000d48:	200001f4 	.word	0x200001f4
 8000d4c:	40006400 	.word	0x40006400

08000d50 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b088      	sub	sp, #32
 8000d54:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d56:	f107 030c 	add.w	r3, r7, #12
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	601a      	str	r2, [r3, #0]
 8000d5e:	605a      	str	r2, [r3, #4]
 8000d60:	609a      	str	r2, [r3, #8]
 8000d62:	60da      	str	r2, [r3, #12]
 8000d64:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000d66:	4b1d      	ldr	r3, [pc, #116]	; (8000ddc <MX_GPIO_Init+0x8c>)
 8000d68:	695b      	ldr	r3, [r3, #20]
 8000d6a:	4a1c      	ldr	r2, [pc, #112]	; (8000ddc <MX_GPIO_Init+0x8c>)
 8000d6c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000d70:	6153      	str	r3, [r2, #20]
 8000d72:	4b1a      	ldr	r3, [pc, #104]	; (8000ddc <MX_GPIO_Init+0x8c>)
 8000d74:	695b      	ldr	r3, [r3, #20]
 8000d76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000d7a:	60bb      	str	r3, [r7, #8]
 8000d7c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d7e:	4b17      	ldr	r3, [pc, #92]	; (8000ddc <MX_GPIO_Init+0x8c>)
 8000d80:	695b      	ldr	r3, [r3, #20]
 8000d82:	4a16      	ldr	r2, [pc, #88]	; (8000ddc <MX_GPIO_Init+0x8c>)
 8000d84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d88:	6153      	str	r3, [r2, #20]
 8000d8a:	4b14      	ldr	r3, [pc, #80]	; (8000ddc <MX_GPIO_Init+0x8c>)
 8000d8c:	695b      	ldr	r3, [r3, #20]
 8000d8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d92:	607b      	str	r3, [r7, #4]
 8000d94:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d96:	4b11      	ldr	r3, [pc, #68]	; (8000ddc <MX_GPIO_Init+0x8c>)
 8000d98:	695b      	ldr	r3, [r3, #20]
 8000d9a:	4a10      	ldr	r2, [pc, #64]	; (8000ddc <MX_GPIO_Init+0x8c>)
 8000d9c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000da0:	6153      	str	r3, [r2, #20]
 8000da2:	4b0e      	ldr	r3, [pc, #56]	; (8000ddc <MX_GPIO_Init+0x8c>)
 8000da4:	695b      	ldr	r3, [r3, #20]
 8000da6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000daa:	603b      	str	r3, [r7, #0]
 8000dac:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CAN_SELECT_GPIO_Port, CAN_SELECT_Pin, GPIO_PIN_SET);
 8000dae:	2201      	movs	r2, #1
 8000db0:	2120      	movs	r1, #32
 8000db2:	480b      	ldr	r0, [pc, #44]	; (8000de0 <MX_GPIO_Init+0x90>)
 8000db4:	f001 fbf8 	bl	80025a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CAN_SELECT_Pin */
  GPIO_InitStruct.Pin = CAN_SELECT_Pin;
 8000db8:	2320      	movs	r3, #32
 8000dba:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dbc:	2301      	movs	r3, #1
 8000dbe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(CAN_SELECT_GPIO_Port, &GPIO_InitStruct);
 8000dc8:	f107 030c 	add.w	r3, r7, #12
 8000dcc:	4619      	mov	r1, r3
 8000dce:	4804      	ldr	r0, [pc, #16]	; (8000de0 <MX_GPIO_Init+0x90>)
 8000dd0:	f001 fa70 	bl	80022b4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000dd4:	bf00      	nop
 8000dd6:	3720      	adds	r7, #32
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bd80      	pop	{r7, pc}
 8000ddc:	40021000 	.word	0x40021000
 8000de0:	48000400 	.word	0x48000400

08000de4 <HAL_CAN_RxFifo0MsgPendingCallback>:

/* USER CODE BEGIN 4 */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b082      	sub	sp, #8
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
  if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData) == HAL_OK)
 8000dec:	4b08      	ldr	r3, [pc, #32]	; (8000e10 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>)
 8000dee:	4a09      	ldr	r2, [pc, #36]	; (8000e14 <HAL_CAN_RxFifo0MsgPendingCallback+0x30>)
 8000df0:	2100      	movs	r1, #0
 8000df2:	6878      	ldr	r0, [r7, #4]
 8000df4:	f000 fdad 	bl	8001952 <HAL_CAN_GetRxMessage>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d103      	bne.n	8000e06 <HAL_CAN_RxFifo0MsgPendingCallback+0x22>
  {
    CAN_to_SLCAN_and_send(&RxHeader, RxData);
 8000dfe:	4904      	ldr	r1, [pc, #16]	; (8000e10 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>)
 8000e00:	4804      	ldr	r0, [pc, #16]	; (8000e14 <HAL_CAN_RxFifo0MsgPendingCallback+0x30>)
 8000e02:	f7ff fa35 	bl	8000270 <CAN_to_SLCAN_and_send>
  }
}
 8000e06:	bf00      	nop
 8000e08:	3708      	adds	r7, #8
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bd80      	pop	{r7, pc}
 8000e0e:	bf00      	nop
 8000e10:	20000238 	.word	0x20000238
 8000e14:	2000021c 	.word	0x2000021c

08000e18 <slcan_usb_rx>:

// Funkcija za sprejem podatkov iz USB CDC (klice se iz usbd_cdc_if.c)
void slcan_usb_rx(uint8_t* Buf, uint32_t Len) {
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b084      	sub	sp, #16
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
 8000e20:	6039      	str	r1, [r7, #0]
  for (uint32_t i = 0; i < Len; i++) {
 8000e22:	2300      	movs	r3, #0
 8000e24:	60fb      	str	r3, [r7, #12]
 8000e26:	e023      	b.n	8000e70 <slcan_usb_rx+0x58>
    if (Buf[i] == '\r') {
 8000e28:	687a      	ldr	r2, [r7, #4]
 8000e2a:	68fb      	ldr	r3, [r7, #12]
 8000e2c:	4413      	add	r3, r2
 8000e2e:	781b      	ldrb	r3, [r3, #0]
 8000e30:	2b0d      	cmp	r3, #13
 8000e32:	d109      	bne.n	8000e48 <slcan_usb_rx+0x30>
      slcan_process_command(slcan_rx_buffer, slcan_rx_len);
 8000e34:	4b13      	ldr	r3, [pc, #76]	; (8000e84 <slcan_usb_rx+0x6c>)
 8000e36:	781b      	ldrb	r3, [r3, #0]
 8000e38:	4619      	mov	r1, r3
 8000e3a:	4813      	ldr	r0, [pc, #76]	; (8000e88 <slcan_usb_rx+0x70>)
 8000e3c:	f7ff fca0 	bl	8000780 <slcan_process_command>
      slcan_rx_len = 0;
 8000e40:	4b10      	ldr	r3, [pc, #64]	; (8000e84 <slcan_usb_rx+0x6c>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	701a      	strb	r2, [r3, #0]
 8000e46:	e010      	b.n	8000e6a <slcan_usb_rx+0x52>
    } else if (slcan_rx_len < sizeof(slcan_rx_buffer)-1) {
 8000e48:	4b0e      	ldr	r3, [pc, #56]	; (8000e84 <slcan_usb_rx+0x6c>)
 8000e4a:	781b      	ldrb	r3, [r3, #0]
 8000e4c:	2b1e      	cmp	r3, #30
 8000e4e:	d80c      	bhi.n	8000e6a <slcan_usb_rx+0x52>
      slcan_rx_buffer[slcan_rx_len++] = Buf[i];
 8000e50:	687a      	ldr	r2, [r7, #4]
 8000e52:	68fb      	ldr	r3, [r7, #12]
 8000e54:	441a      	add	r2, r3
 8000e56:	4b0b      	ldr	r3, [pc, #44]	; (8000e84 <slcan_usb_rx+0x6c>)
 8000e58:	781b      	ldrb	r3, [r3, #0]
 8000e5a:	1c59      	adds	r1, r3, #1
 8000e5c:	b2c8      	uxtb	r0, r1
 8000e5e:	4909      	ldr	r1, [pc, #36]	; (8000e84 <slcan_usb_rx+0x6c>)
 8000e60:	7008      	strb	r0, [r1, #0]
 8000e62:	4619      	mov	r1, r3
 8000e64:	7812      	ldrb	r2, [r2, #0]
 8000e66:	4b08      	ldr	r3, [pc, #32]	; (8000e88 <slcan_usb_rx+0x70>)
 8000e68:	545a      	strb	r2, [r3, r1]
  for (uint32_t i = 0; i < Len; i++) {
 8000e6a:	68fb      	ldr	r3, [r7, #12]
 8000e6c:	3301      	adds	r3, #1
 8000e6e:	60fb      	str	r3, [r7, #12]
 8000e70:	68fa      	ldr	r2, [r7, #12]
 8000e72:	683b      	ldr	r3, [r7, #0]
 8000e74:	429a      	cmp	r2, r3
 8000e76:	d3d7      	bcc.n	8000e28 <slcan_usb_rx+0x10>
    }
  }
}
 8000e78:	bf00      	nop
 8000e7a:	bf00      	nop
 8000e7c:	3710      	adds	r7, #16
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	bf00      	nop
 8000e84:	20000264 	.word	0x20000264
 8000e88:	20000244 	.word	0x20000244

08000e8c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e90:	b672      	cpsid	i
}
 8000e92:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e94:	e7fe      	b.n	8000e94 <Error_Handler+0x8>
	...

08000e98 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	b083      	sub	sp, #12
 8000e9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e9e:	4b0f      	ldr	r3, [pc, #60]	; (8000edc <HAL_MspInit+0x44>)
 8000ea0:	699b      	ldr	r3, [r3, #24]
 8000ea2:	4a0e      	ldr	r2, [pc, #56]	; (8000edc <HAL_MspInit+0x44>)
 8000ea4:	f043 0301 	orr.w	r3, r3, #1
 8000ea8:	6193      	str	r3, [r2, #24]
 8000eaa:	4b0c      	ldr	r3, [pc, #48]	; (8000edc <HAL_MspInit+0x44>)
 8000eac:	699b      	ldr	r3, [r3, #24]
 8000eae:	f003 0301 	and.w	r3, r3, #1
 8000eb2:	607b      	str	r3, [r7, #4]
 8000eb4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000eb6:	4b09      	ldr	r3, [pc, #36]	; (8000edc <HAL_MspInit+0x44>)
 8000eb8:	69db      	ldr	r3, [r3, #28]
 8000eba:	4a08      	ldr	r2, [pc, #32]	; (8000edc <HAL_MspInit+0x44>)
 8000ebc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ec0:	61d3      	str	r3, [r2, #28]
 8000ec2:	4b06      	ldr	r3, [pc, #24]	; (8000edc <HAL_MspInit+0x44>)
 8000ec4:	69db      	ldr	r3, [r3, #28]
 8000ec6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000eca:	603b      	str	r3, [r7, #0]
 8000ecc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ece:	bf00      	nop
 8000ed0:	370c      	adds	r7, #12
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed8:	4770      	bx	lr
 8000eda:	bf00      	nop
 8000edc:	40021000 	.word	0x40021000

08000ee0 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b08a      	sub	sp, #40	; 0x28
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ee8:	f107 0314 	add.w	r3, r7, #20
 8000eec:	2200      	movs	r2, #0
 8000eee:	601a      	str	r2, [r3, #0]
 8000ef0:	605a      	str	r2, [r3, #4]
 8000ef2:	609a      	str	r2, [r3, #8]
 8000ef4:	60da      	str	r2, [r3, #12]
 8000ef6:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN)
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	4a1f      	ldr	r2, [pc, #124]	; (8000f7c <HAL_CAN_MspInit+0x9c>)
 8000efe:	4293      	cmp	r3, r2
 8000f00:	d138      	bne.n	8000f74 <HAL_CAN_MspInit+0x94>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000f02:	4b1f      	ldr	r3, [pc, #124]	; (8000f80 <HAL_CAN_MspInit+0xa0>)
 8000f04:	69db      	ldr	r3, [r3, #28]
 8000f06:	4a1e      	ldr	r2, [pc, #120]	; (8000f80 <HAL_CAN_MspInit+0xa0>)
 8000f08:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000f0c:	61d3      	str	r3, [r2, #28]
 8000f0e:	4b1c      	ldr	r3, [pc, #112]	; (8000f80 <HAL_CAN_MspInit+0xa0>)
 8000f10:	69db      	ldr	r3, [r3, #28]
 8000f12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f16:	613b      	str	r3, [r7, #16]
 8000f18:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f1a:	4b19      	ldr	r3, [pc, #100]	; (8000f80 <HAL_CAN_MspInit+0xa0>)
 8000f1c:	695b      	ldr	r3, [r3, #20]
 8000f1e:	4a18      	ldr	r2, [pc, #96]	; (8000f80 <HAL_CAN_MspInit+0xa0>)
 8000f20:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f24:	6153      	str	r3, [r2, #20]
 8000f26:	4b16      	ldr	r3, [pc, #88]	; (8000f80 <HAL_CAN_MspInit+0xa0>)
 8000f28:	695b      	ldr	r3, [r3, #20]
 8000f2a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000f2e:	60fb      	str	r3, [r7, #12]
 8000f30:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000f32:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000f36:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f38:	2302      	movs	r3, #2
 8000f3a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f40:	2303      	movs	r3, #3
 8000f42:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 8000f44:	2309      	movs	r3, #9
 8000f46:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f48:	f107 0314 	add.w	r3, r7, #20
 8000f4c:	4619      	mov	r1, r3
 8000f4e:	480d      	ldr	r0, [pc, #52]	; (8000f84 <HAL_CAN_MspInit+0xa4>)
 8000f50:	f001 f9b0 	bl	80022b4 <HAL_GPIO_Init>

    /* CAN interrupt Init */
    HAL_NVIC_SetPriority(USB_HP_CAN_TX_IRQn, 0, 0);
 8000f54:	2200      	movs	r2, #0
 8000f56:	2100      	movs	r1, #0
 8000f58:	2013      	movs	r0, #19
 8000f5a:	f001 f974 	bl	8002246 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_CAN_TX_IRQn);
 8000f5e:	2013      	movs	r0, #19
 8000f60:	f001 f98d 	bl	800227e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_CAN_RX0_IRQn, 0, 0);
 8000f64:	2200      	movs	r2, #0
 8000f66:	2100      	movs	r1, #0
 8000f68:	2014      	movs	r0, #20
 8000f6a:	f001 f96c 	bl	8002246 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN_RX0_IRQn);
 8000f6e:	2014      	movs	r0, #20
 8000f70:	f001 f985 	bl	800227e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }

}
 8000f74:	bf00      	nop
 8000f76:	3728      	adds	r7, #40	; 0x28
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bd80      	pop	{r7, pc}
 8000f7c:	40006400 	.word	0x40006400
 8000f80:	40021000 	.word	0x40021000
 8000f84:	48000400 	.word	0x48000400

08000f88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f8c:	e7fe      	b.n	8000f8c <NMI_Handler+0x4>

08000f8e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f8e:	b480      	push	{r7}
 8000f90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f92:	e7fe      	b.n	8000f92 <HardFault_Handler+0x4>

08000f94 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f94:	b480      	push	{r7}
 8000f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f98:	e7fe      	b.n	8000f98 <MemManage_Handler+0x4>

08000f9a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f9a:	b480      	push	{r7}
 8000f9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f9e:	e7fe      	b.n	8000f9e <BusFault_Handler+0x4>

08000fa0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fa4:	e7fe      	b.n	8000fa4 <UsageFault_Handler+0x4>

08000fa6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fa6:	b480      	push	{r7}
 8000fa8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000faa:	bf00      	nop
 8000fac:	46bd      	mov	sp, r7
 8000fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb2:	4770      	bx	lr

08000fb4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fb8:	bf00      	nop
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc0:	4770      	bx	lr

08000fc2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fc2:	b480      	push	{r7}
 8000fc4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fc6:	bf00      	nop
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fce:	4770      	bx	lr

08000fd0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fd4:	f000 f946 	bl	8001264 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fd8:	bf00      	nop
 8000fda:	bd80      	pop	{r7, pc}

08000fdc <USB_HP_CAN_TX_IRQHandler>:

/**
  * @brief This function handles USB high priority or CAN_TX interrupts.
  */
void USB_HP_CAN_TX_IRQHandler(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HP_CAN_TX_IRQn 0 */

  /* USER CODE END USB_HP_CAN_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000fe0:	4802      	ldr	r0, [pc, #8]	; (8000fec <USB_HP_CAN_TX_IRQHandler+0x10>)
 8000fe2:	f000 fe26 	bl	8001c32 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_HP_CAN_TX_IRQn 1 */

  /* USER CODE END USB_HP_CAN_TX_IRQn 1 */
}
 8000fe6:	bf00      	nop
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	200001f4 	.word	0x200001f4

08000ff0 <USB_LP_CAN_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN_RX0 interrupts.
  */
void USB_LP_CAN_RX0_IRQHandler(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000ff4:	4802      	ldr	r0, [pc, #8]	; (8001000 <USB_LP_CAN_RX0_IRQHandler+0x10>)
 8000ff6:	f000 fe1c 	bl	8001c32 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 1 */
}
 8000ffa:	bf00      	nop
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	bf00      	nop
 8001000:	200001f4 	.word	0x200001f4

08001004 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001008:	4802      	ldr	r0, [pc, #8]	; (8001014 <USB_LP_IRQHandler+0x10>)
 800100a:	f001 fbd2 	bl	80027b2 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 800100e:	bf00      	nop
 8001010:	bd80      	pop	{r7, pc}
 8001012:	bf00      	nop
 8001014:	20000f38 	.word	0x20000f38

08001018 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b086      	sub	sp, #24
 800101c:	af00      	add	r7, sp, #0
 800101e:	60f8      	str	r0, [r7, #12]
 8001020:	60b9      	str	r1, [r7, #8]
 8001022:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001024:	2300      	movs	r3, #0
 8001026:	617b      	str	r3, [r7, #20]
 8001028:	e00a      	b.n	8001040 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800102a:	f3af 8000 	nop.w
 800102e:	4601      	mov	r1, r0
 8001030:	68bb      	ldr	r3, [r7, #8]
 8001032:	1c5a      	adds	r2, r3, #1
 8001034:	60ba      	str	r2, [r7, #8]
 8001036:	b2ca      	uxtb	r2, r1
 8001038:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800103a:	697b      	ldr	r3, [r7, #20]
 800103c:	3301      	adds	r3, #1
 800103e:	617b      	str	r3, [r7, #20]
 8001040:	697a      	ldr	r2, [r7, #20]
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	429a      	cmp	r2, r3
 8001046:	dbf0      	blt.n	800102a <_read+0x12>
  }

  return len;
 8001048:	687b      	ldr	r3, [r7, #4]
}
 800104a:	4618      	mov	r0, r3
 800104c:	3718      	adds	r7, #24
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}

08001052 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001052:	b580      	push	{r7, lr}
 8001054:	b086      	sub	sp, #24
 8001056:	af00      	add	r7, sp, #0
 8001058:	60f8      	str	r0, [r7, #12]
 800105a:	60b9      	str	r1, [r7, #8]
 800105c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800105e:	2300      	movs	r3, #0
 8001060:	617b      	str	r3, [r7, #20]
 8001062:	e009      	b.n	8001078 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001064:	68bb      	ldr	r3, [r7, #8]
 8001066:	1c5a      	adds	r2, r3, #1
 8001068:	60ba      	str	r2, [r7, #8]
 800106a:	781b      	ldrb	r3, [r3, #0]
 800106c:	4618      	mov	r0, r3
 800106e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001072:	697b      	ldr	r3, [r7, #20]
 8001074:	3301      	adds	r3, #1
 8001076:	617b      	str	r3, [r7, #20]
 8001078:	697a      	ldr	r2, [r7, #20]
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	429a      	cmp	r2, r3
 800107e:	dbf1      	blt.n	8001064 <_write+0x12>
  }
  return len;
 8001080:	687b      	ldr	r3, [r7, #4]
}
 8001082:	4618      	mov	r0, r3
 8001084:	3718      	adds	r7, #24
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}

0800108a <_close>:

int _close(int file)
{
 800108a:	b480      	push	{r7}
 800108c:	b083      	sub	sp, #12
 800108e:	af00      	add	r7, sp, #0
 8001090:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001092:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001096:	4618      	mov	r0, r3
 8001098:	370c      	adds	r7, #12
 800109a:	46bd      	mov	sp, r7
 800109c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a0:	4770      	bx	lr

080010a2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80010a2:	b480      	push	{r7}
 80010a4:	b083      	sub	sp, #12
 80010a6:	af00      	add	r7, sp, #0
 80010a8:	6078      	str	r0, [r7, #4]
 80010aa:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80010b2:	605a      	str	r2, [r3, #4]
  return 0;
 80010b4:	2300      	movs	r3, #0
}
 80010b6:	4618      	mov	r0, r3
 80010b8:	370c      	adds	r7, #12
 80010ba:	46bd      	mov	sp, r7
 80010bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c0:	4770      	bx	lr

080010c2 <_isatty>:

int _isatty(int file)
{
 80010c2:	b480      	push	{r7}
 80010c4:	b083      	sub	sp, #12
 80010c6:	af00      	add	r7, sp, #0
 80010c8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80010ca:	2301      	movs	r3, #1
}
 80010cc:	4618      	mov	r0, r3
 80010ce:	370c      	adds	r7, #12
 80010d0:	46bd      	mov	sp, r7
 80010d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d6:	4770      	bx	lr

080010d8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80010d8:	b480      	push	{r7}
 80010da:	b085      	sub	sp, #20
 80010dc:	af00      	add	r7, sp, #0
 80010de:	60f8      	str	r0, [r7, #12]
 80010e0:	60b9      	str	r1, [r7, #8]
 80010e2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80010e4:	2300      	movs	r3, #0
}
 80010e6:	4618      	mov	r0, r3
 80010e8:	3714      	adds	r7, #20
 80010ea:	46bd      	mov	sp, r7
 80010ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f0:	4770      	bx	lr
	...

080010f4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b086      	sub	sp, #24
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010fc:	4a14      	ldr	r2, [pc, #80]	; (8001150 <_sbrk+0x5c>)
 80010fe:	4b15      	ldr	r3, [pc, #84]	; (8001154 <_sbrk+0x60>)
 8001100:	1ad3      	subs	r3, r2, r3
 8001102:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001104:	697b      	ldr	r3, [r7, #20]
 8001106:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001108:	4b13      	ldr	r3, [pc, #76]	; (8001158 <_sbrk+0x64>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	2b00      	cmp	r3, #0
 800110e:	d102      	bne.n	8001116 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001110:	4b11      	ldr	r3, [pc, #68]	; (8001158 <_sbrk+0x64>)
 8001112:	4a12      	ldr	r2, [pc, #72]	; (800115c <_sbrk+0x68>)
 8001114:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001116:	4b10      	ldr	r3, [pc, #64]	; (8001158 <_sbrk+0x64>)
 8001118:	681a      	ldr	r2, [r3, #0]
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	4413      	add	r3, r2
 800111e:	693a      	ldr	r2, [r7, #16]
 8001120:	429a      	cmp	r2, r3
 8001122:	d207      	bcs.n	8001134 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001124:	f009 f8da 	bl	800a2dc <__errno>
 8001128:	4603      	mov	r3, r0
 800112a:	220c      	movs	r2, #12
 800112c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800112e:	f04f 33ff 	mov.w	r3, #4294967295
 8001132:	e009      	b.n	8001148 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001134:	4b08      	ldr	r3, [pc, #32]	; (8001158 <_sbrk+0x64>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800113a:	4b07      	ldr	r3, [pc, #28]	; (8001158 <_sbrk+0x64>)
 800113c:	681a      	ldr	r2, [r3, #0]
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	4413      	add	r3, r2
 8001142:	4a05      	ldr	r2, [pc, #20]	; (8001158 <_sbrk+0x64>)
 8001144:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001146:	68fb      	ldr	r3, [r7, #12]
}
 8001148:	4618      	mov	r0, r3
 800114a:	3718      	adds	r7, #24
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}
 8001150:	2000a000 	.word	0x2000a000
 8001154:	00000400 	.word	0x00000400
 8001158:	20000268 	.word	0x20000268
 800115c:	20001578 	.word	0x20001578

08001160 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001160:	b480      	push	{r7}
 8001162:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001164:	4b06      	ldr	r3, [pc, #24]	; (8001180 <SystemInit+0x20>)
 8001166:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800116a:	4a05      	ldr	r2, [pc, #20]	; (8001180 <SystemInit+0x20>)
 800116c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001170:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001174:	bf00      	nop
 8001176:	46bd      	mov	sp, r7
 8001178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117c:	4770      	bx	lr
 800117e:	bf00      	nop
 8001180:	e000ed00 	.word	0xe000ed00

08001184 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001184:	f8df d034 	ldr.w	sp, [pc, #52]	; 80011bc <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001188:	f7ff ffea 	bl	8001160 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800118c:	480c      	ldr	r0, [pc, #48]	; (80011c0 <LoopForever+0x6>)
  ldr r1, =_edata
 800118e:	490d      	ldr	r1, [pc, #52]	; (80011c4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001190:	4a0d      	ldr	r2, [pc, #52]	; (80011c8 <LoopForever+0xe>)
  movs r3, #0
 8001192:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001194:	e002      	b.n	800119c <LoopCopyDataInit>

08001196 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001196:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001198:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800119a:	3304      	adds	r3, #4

0800119c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800119c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800119e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011a0:	d3f9      	bcc.n	8001196 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011a2:	4a0a      	ldr	r2, [pc, #40]	; (80011cc <LoopForever+0x12>)
  ldr r4, =_ebss
 80011a4:	4c0a      	ldr	r4, [pc, #40]	; (80011d0 <LoopForever+0x16>)
  movs r3, #0
 80011a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011a8:	e001      	b.n	80011ae <LoopFillZerobss>

080011aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011ac:	3204      	adds	r2, #4

080011ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011b0:	d3fb      	bcc.n	80011aa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80011b2:	f009 f899 	bl	800a2e8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80011b6:	f7ff fd11 	bl	8000bdc <main>

080011ba <LoopForever>:

LoopForever:
    b LoopForever
 80011ba:	e7fe      	b.n	80011ba <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80011bc:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 80011c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011c4:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 80011c8:	0800b480 	.word	0x0800b480
  ldr r2, =_sbss
 80011cc:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 80011d0:	20001578 	.word	0x20001578

080011d4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80011d4:	e7fe      	b.n	80011d4 <ADC1_2_IRQHandler>
	...

080011d8 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011dc:	4b08      	ldr	r3, [pc, #32]	; (8001200 <HAL_Init+0x28>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	4a07      	ldr	r2, [pc, #28]	; (8001200 <HAL_Init+0x28>)
 80011e2:	f043 0310 	orr.w	r3, r3, #16
 80011e6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011e8:	2003      	movs	r0, #3
 80011ea:	f001 f821 	bl	8002230 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011ee:	200f      	movs	r0, #15
 80011f0:	f000 f808 	bl	8001204 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011f4:	f7ff fe50 	bl	8000e98 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011f8:	2300      	movs	r3, #0
}
 80011fa:	4618      	mov	r0, r3
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	40022000 	.word	0x40022000

08001204 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b082      	sub	sp, #8
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800120c:	4b12      	ldr	r3, [pc, #72]	; (8001258 <HAL_InitTick+0x54>)
 800120e:	681a      	ldr	r2, [r3, #0]
 8001210:	4b12      	ldr	r3, [pc, #72]	; (800125c <HAL_InitTick+0x58>)
 8001212:	781b      	ldrb	r3, [r3, #0]
 8001214:	4619      	mov	r1, r3
 8001216:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800121a:	fbb3 f3f1 	udiv	r3, r3, r1
 800121e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001222:	4618      	mov	r0, r3
 8001224:	f001 f839 	bl	800229a <HAL_SYSTICK_Config>
 8001228:	4603      	mov	r3, r0
 800122a:	2b00      	cmp	r3, #0
 800122c:	d001      	beq.n	8001232 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800122e:	2301      	movs	r3, #1
 8001230:	e00e      	b.n	8001250 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	2b0f      	cmp	r3, #15
 8001236:	d80a      	bhi.n	800124e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001238:	2200      	movs	r2, #0
 800123a:	6879      	ldr	r1, [r7, #4]
 800123c:	f04f 30ff 	mov.w	r0, #4294967295
 8001240:	f001 f801 	bl	8002246 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001244:	4a06      	ldr	r2, [pc, #24]	; (8001260 <HAL_InitTick+0x5c>)
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800124a:	2300      	movs	r3, #0
 800124c:	e000      	b.n	8001250 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800124e:	2301      	movs	r3, #1
}
 8001250:	4618      	mov	r0, r3
 8001252:	3708      	adds	r7, #8
 8001254:	46bd      	mov	sp, r7
 8001256:	bd80      	pop	{r7, pc}
 8001258:	20000000 	.word	0x20000000
 800125c:	20000008 	.word	0x20000008
 8001260:	20000004 	.word	0x20000004

08001264 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001264:	b480      	push	{r7}
 8001266:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001268:	4b06      	ldr	r3, [pc, #24]	; (8001284 <HAL_IncTick+0x20>)
 800126a:	781b      	ldrb	r3, [r3, #0]
 800126c:	461a      	mov	r2, r3
 800126e:	4b06      	ldr	r3, [pc, #24]	; (8001288 <HAL_IncTick+0x24>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	4413      	add	r3, r2
 8001274:	4a04      	ldr	r2, [pc, #16]	; (8001288 <HAL_IncTick+0x24>)
 8001276:	6013      	str	r3, [r2, #0]
}
 8001278:	bf00      	nop
 800127a:	46bd      	mov	sp, r7
 800127c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001280:	4770      	bx	lr
 8001282:	bf00      	nop
 8001284:	20000008 	.word	0x20000008
 8001288:	2000026c 	.word	0x2000026c

0800128c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800128c:	b480      	push	{r7}
 800128e:	af00      	add	r7, sp, #0
  return uwTick;  
 8001290:	4b03      	ldr	r3, [pc, #12]	; (80012a0 <HAL_GetTick+0x14>)
 8001292:	681b      	ldr	r3, [r3, #0]
}
 8001294:	4618      	mov	r0, r3
 8001296:	46bd      	mov	sp, r7
 8001298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129c:	4770      	bx	lr
 800129e:	bf00      	nop
 80012a0:	2000026c 	.word	0x2000026c

080012a4 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b084      	sub	sp, #16
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d101      	bne.n	80012b6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80012b2:	2301      	movs	r3, #1
 80012b4:	e0ed      	b.n	8001492 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80012bc:	b2db      	uxtb	r3, r3
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d102      	bne.n	80012c8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80012c2:	6878      	ldr	r0, [r7, #4]
 80012c4:	f7ff fe0c 	bl	8000ee0 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	681a      	ldr	r2, [r3, #0]
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	f042 0201 	orr.w	r2, r2, #1
 80012d6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80012d8:	f7ff ffd8 	bl	800128c <HAL_GetTick>
 80012dc:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80012de:	e012      	b.n	8001306 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80012e0:	f7ff ffd4 	bl	800128c <HAL_GetTick>
 80012e4:	4602      	mov	r2, r0
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	1ad3      	subs	r3, r2, r3
 80012ea:	2b0a      	cmp	r3, #10
 80012ec:	d90b      	bls.n	8001306 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012f2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	2205      	movs	r2, #5
 80012fe:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001302:	2301      	movs	r3, #1
 8001304:	e0c5      	b.n	8001492 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	685b      	ldr	r3, [r3, #4]
 800130c:	f003 0301 	and.w	r3, r3, #1
 8001310:	2b00      	cmp	r3, #0
 8001312:	d0e5      	beq.n	80012e0 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	681a      	ldr	r2, [r3, #0]
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f022 0202 	bic.w	r2, r2, #2
 8001322:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001324:	f7ff ffb2 	bl	800128c <HAL_GetTick>
 8001328:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800132a:	e012      	b.n	8001352 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800132c:	f7ff ffae 	bl	800128c <HAL_GetTick>
 8001330:	4602      	mov	r2, r0
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	1ad3      	subs	r3, r2, r3
 8001336:	2b0a      	cmp	r3, #10
 8001338:	d90b      	bls.n	8001352 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800133e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	2205      	movs	r2, #5
 800134a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800134e:	2301      	movs	r3, #1
 8001350:	e09f      	b.n	8001492 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	685b      	ldr	r3, [r3, #4]
 8001358:	f003 0302 	and.w	r3, r3, #2
 800135c:	2b00      	cmp	r3, #0
 800135e:	d1e5      	bne.n	800132c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	7e1b      	ldrb	r3, [r3, #24]
 8001364:	2b01      	cmp	r3, #1
 8001366:	d108      	bne.n	800137a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	681a      	ldr	r2, [r3, #0]
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001376:	601a      	str	r2, [r3, #0]
 8001378:	e007      	b.n	800138a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	681a      	ldr	r2, [r3, #0]
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001388:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	7e5b      	ldrb	r3, [r3, #25]
 800138e:	2b01      	cmp	r3, #1
 8001390:	d108      	bne.n	80013a4 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	681a      	ldr	r2, [r3, #0]
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80013a0:	601a      	str	r2, [r3, #0]
 80013a2:	e007      	b.n	80013b4 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	681a      	ldr	r2, [r3, #0]
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80013b2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	7e9b      	ldrb	r3, [r3, #26]
 80013b8:	2b01      	cmp	r3, #1
 80013ba:	d108      	bne.n	80013ce <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	681a      	ldr	r2, [r3, #0]
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f042 0220 	orr.w	r2, r2, #32
 80013ca:	601a      	str	r2, [r3, #0]
 80013cc:	e007      	b.n	80013de <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	681a      	ldr	r2, [r3, #0]
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	f022 0220 	bic.w	r2, r2, #32
 80013dc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	7edb      	ldrb	r3, [r3, #27]
 80013e2:	2b01      	cmp	r3, #1
 80013e4:	d108      	bne.n	80013f8 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	681a      	ldr	r2, [r3, #0]
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	f022 0210 	bic.w	r2, r2, #16
 80013f4:	601a      	str	r2, [r3, #0]
 80013f6:	e007      	b.n	8001408 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	681a      	ldr	r2, [r3, #0]
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f042 0210 	orr.w	r2, r2, #16
 8001406:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	7f1b      	ldrb	r3, [r3, #28]
 800140c:	2b01      	cmp	r3, #1
 800140e:	d108      	bne.n	8001422 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	681a      	ldr	r2, [r3, #0]
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f042 0208 	orr.w	r2, r2, #8
 800141e:	601a      	str	r2, [r3, #0]
 8001420:	e007      	b.n	8001432 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	681a      	ldr	r2, [r3, #0]
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	f022 0208 	bic.w	r2, r2, #8
 8001430:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	7f5b      	ldrb	r3, [r3, #29]
 8001436:	2b01      	cmp	r3, #1
 8001438:	d108      	bne.n	800144c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	681a      	ldr	r2, [r3, #0]
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	f042 0204 	orr.w	r2, r2, #4
 8001448:	601a      	str	r2, [r3, #0]
 800144a:	e007      	b.n	800145c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	681a      	ldr	r2, [r3, #0]
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f022 0204 	bic.w	r2, r2, #4
 800145a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	689a      	ldr	r2, [r3, #8]
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	68db      	ldr	r3, [r3, #12]
 8001464:	431a      	orrs	r2, r3
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	691b      	ldr	r3, [r3, #16]
 800146a:	431a      	orrs	r2, r3
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	695b      	ldr	r3, [r3, #20]
 8001470:	ea42 0103 	orr.w	r1, r2, r3
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	685b      	ldr	r3, [r3, #4]
 8001478:	1e5a      	subs	r2, r3, #1
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	430a      	orrs	r2, r1
 8001480:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	2200      	movs	r2, #0
 8001486:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	2201      	movs	r2, #1
 800148c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001490:	2300      	movs	r3, #0
}
 8001492:	4618      	mov	r0, r3
 8001494:	3710      	adds	r7, #16
 8001496:	46bd      	mov	sp, r7
 8001498:	bd80      	pop	{r7, pc}

0800149a <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 800149a:	b480      	push	{r7}
 800149c:	b087      	sub	sp, #28
 800149e:	af00      	add	r7, sp, #0
 80014a0:	6078      	str	r0, [r7, #4]
 80014a2:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	f893 3020 	ldrb.w	r3, [r3, #32]
 80014b0:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80014b2:	7cfb      	ldrb	r3, [r7, #19]
 80014b4:	2b01      	cmp	r3, #1
 80014b6:	d003      	beq.n	80014c0 <HAL_CAN_ConfigFilter+0x26>
 80014b8:	7cfb      	ldrb	r3, [r7, #19]
 80014ba:	2b02      	cmp	r3, #2
 80014bc:	f040 80aa 	bne.w	8001614 <HAL_CAN_ConfigFilter+0x17a>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80014c0:	697b      	ldr	r3, [r7, #20]
 80014c2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80014c6:	f043 0201 	orr.w	r2, r3, #1
 80014ca:	697b      	ldr	r3, [r7, #20]
 80014cc:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	695b      	ldr	r3, [r3, #20]
 80014d4:	f003 031f 	and.w	r3, r3, #31
 80014d8:	2201      	movs	r2, #1
 80014da:	fa02 f303 	lsl.w	r3, r2, r3
 80014de:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80014e0:	697b      	ldr	r3, [r7, #20]
 80014e2:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	43db      	mvns	r3, r3
 80014ea:	401a      	ands	r2, r3
 80014ec:	697b      	ldr	r3, [r7, #20]
 80014ee:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	69db      	ldr	r3, [r3, #28]
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d123      	bne.n	8001542 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80014fa:	697b      	ldr	r3, [r7, #20]
 80014fc:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	43db      	mvns	r3, r3
 8001504:	401a      	ands	r2, r3
 8001506:	697b      	ldr	r3, [r7, #20]
 8001508:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	68db      	ldr	r3, [r3, #12]
 8001510:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001512:	683b      	ldr	r3, [r7, #0]
 8001514:	685b      	ldr	r3, [r3, #4]
 8001516:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001518:	683a      	ldr	r2, [r7, #0]
 800151a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800151c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800151e:	697b      	ldr	r3, [r7, #20]
 8001520:	3248      	adds	r2, #72	; 0x48
 8001522:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	689b      	ldr	r3, [r3, #8]
 800152a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001532:	683b      	ldr	r3, [r7, #0]
 8001534:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001536:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001538:	6979      	ldr	r1, [r7, #20]
 800153a:	3348      	adds	r3, #72	; 0x48
 800153c:	00db      	lsls	r3, r3, #3
 800153e:	440b      	add	r3, r1
 8001540:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	69db      	ldr	r3, [r3, #28]
 8001546:	2b01      	cmp	r3, #1
 8001548:	d122      	bne.n	8001590 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800154a:	697b      	ldr	r3, [r7, #20]
 800154c:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	431a      	orrs	r2, r3
 8001554:	697b      	ldr	r3, [r7, #20]
 8001556:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800155a:	683b      	ldr	r3, [r7, #0]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	685b      	ldr	r3, [r3, #4]
 8001564:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001566:	683a      	ldr	r2, [r7, #0]
 8001568:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800156a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800156c:	697b      	ldr	r3, [r7, #20]
 800156e:	3248      	adds	r2, #72	; 0x48
 8001570:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	689b      	ldr	r3, [r3, #8]
 8001578:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800157a:	683b      	ldr	r3, [r7, #0]
 800157c:	68db      	ldr	r3, [r3, #12]
 800157e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001584:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001586:	6979      	ldr	r1, [r7, #20]
 8001588:	3348      	adds	r3, #72	; 0x48
 800158a:	00db      	lsls	r3, r3, #3
 800158c:	440b      	add	r3, r1
 800158e:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	699b      	ldr	r3, [r3, #24]
 8001594:	2b00      	cmp	r3, #0
 8001596:	d109      	bne.n	80015ac <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001598:	697b      	ldr	r3, [r7, #20]
 800159a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	43db      	mvns	r3, r3
 80015a2:	401a      	ands	r2, r3
 80015a4:	697b      	ldr	r3, [r7, #20]
 80015a6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80015aa:	e007      	b.n	80015bc <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80015ac:	697b      	ldr	r3, [r7, #20]
 80015ae:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	431a      	orrs	r2, r3
 80015b6:	697b      	ldr	r3, [r7, #20]
 80015b8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	691b      	ldr	r3, [r3, #16]
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d109      	bne.n	80015d8 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80015c4:	697b      	ldr	r3, [r7, #20]
 80015c6:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	43db      	mvns	r3, r3
 80015ce:	401a      	ands	r2, r3
 80015d0:	697b      	ldr	r3, [r7, #20]
 80015d2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80015d6:	e007      	b.n	80015e8 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80015d8:	697b      	ldr	r3, [r7, #20]
 80015da:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	431a      	orrs	r2, r3
 80015e2:	697b      	ldr	r3, [r7, #20]
 80015e4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	6a1b      	ldr	r3, [r3, #32]
 80015ec:	2b01      	cmp	r3, #1
 80015ee:	d107      	bne.n	8001600 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80015f0:	697b      	ldr	r3, [r7, #20]
 80015f2:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	431a      	orrs	r2, r3
 80015fa:	697b      	ldr	r3, [r7, #20]
 80015fc:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001600:	697b      	ldr	r3, [r7, #20]
 8001602:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001606:	f023 0201 	bic.w	r2, r3, #1
 800160a:	697b      	ldr	r3, [r7, #20]
 800160c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8001610:	2300      	movs	r3, #0
 8001612:	e006      	b.n	8001622 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001618:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001620:	2301      	movs	r3, #1
  }
}
 8001622:	4618      	mov	r0, r3
 8001624:	371c      	adds	r7, #28
 8001626:	46bd      	mov	sp, r7
 8001628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162c:	4770      	bx	lr

0800162e <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800162e:	b580      	push	{r7, lr}
 8001630:	b084      	sub	sp, #16
 8001632:	af00      	add	r7, sp, #0
 8001634:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	f893 3020 	ldrb.w	r3, [r3, #32]
 800163c:	b2db      	uxtb	r3, r3
 800163e:	2b01      	cmp	r3, #1
 8001640:	d12e      	bne.n	80016a0 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	2202      	movs	r2, #2
 8001646:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	681a      	ldr	r2, [r3, #0]
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f022 0201 	bic.w	r2, r2, #1
 8001658:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800165a:	f7ff fe17 	bl	800128c <HAL_GetTick>
 800165e:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001660:	e012      	b.n	8001688 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001662:	f7ff fe13 	bl	800128c <HAL_GetTick>
 8001666:	4602      	mov	r2, r0
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	1ad3      	subs	r3, r2, r3
 800166c:	2b0a      	cmp	r3, #10
 800166e:	d90b      	bls.n	8001688 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001674:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	2205      	movs	r2, #5
 8001680:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001684:	2301      	movs	r3, #1
 8001686:	e012      	b.n	80016ae <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	685b      	ldr	r3, [r3, #4]
 800168e:	f003 0301 	and.w	r3, r3, #1
 8001692:	2b00      	cmp	r3, #0
 8001694:	d1e5      	bne.n	8001662 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	2200      	movs	r2, #0
 800169a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 800169c:	2300      	movs	r3, #0
 800169e:	e006      	b.n	80016ae <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016a4:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80016ac:	2301      	movs	r3, #1
  }
}
 80016ae:	4618      	mov	r0, r3
 80016b0:	3710      	adds	r7, #16
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}

080016b6 <HAL_CAN_Stop>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Stop(CAN_HandleTypeDef *hcan)
{
 80016b6:	b580      	push	{r7, lr}
 80016b8:	b084      	sub	sp, #16
 80016ba:	af00      	add	r7, sp, #0
 80016bc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_LISTENING)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80016c4:	b2db      	uxtb	r3, r3
 80016c6:	2b02      	cmp	r3, #2
 80016c8:	d133      	bne.n	8001732 <HAL_CAN_Stop+0x7c>
  {
    /* Request initialisation */
    SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	681a      	ldr	r2, [r3, #0]
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f042 0201 	orr.w	r2, r2, #1
 80016d8:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80016da:	f7ff fdd7 	bl	800128c <HAL_GetTick>
 80016de:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80016e0:	e012      	b.n	8001708 <HAL_CAN_Stop+0x52>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80016e2:	f7ff fdd3 	bl	800128c <HAL_GetTick>
 80016e6:	4602      	mov	r2, r0
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	1ad3      	subs	r3, r2, r3
 80016ec:	2b0a      	cmp	r3, #10
 80016ee:	d90b      	bls.n	8001708 <HAL_CAN_Stop+0x52>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016f4:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	2205      	movs	r2, #5
 8001700:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001704:	2301      	movs	r3, #1
 8001706:	e01b      	b.n	8001740 <HAL_CAN_Stop+0x8a>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	685b      	ldr	r3, [r3, #4]
 800170e:	f003 0301 	and.w	r3, r3, #1
 8001712:	2b00      	cmp	r3, #0
 8001714:	d0e5      	beq.n	80016e2 <HAL_CAN_Stop+0x2c>
      }
    }

    /* Exit from sleep mode */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	681a      	ldr	r2, [r3, #0]
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f022 0202 	bic.w	r2, r2, #2
 8001724:	601a      	str	r2, [r3, #0]

    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_READY;
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	2201      	movs	r2, #1
 800172a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Return function status */
    return HAL_OK;
 800172e:	2300      	movs	r3, #0
 8001730:	e006      	b.n	8001740 <HAL_CAN_Stop+0x8a>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_STARTED;
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001736:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800173e:	2301      	movs	r3, #1
  }
}
 8001740:	4618      	mov	r0, r3
 8001742:	3710      	adds	r7, #16
 8001744:	46bd      	mov	sp, r7
 8001746:	bd80      	pop	{r7, pc}

08001748 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8001748:	b480      	push	{r7}
 800174a:	b089      	sub	sp, #36	; 0x24
 800174c:	af00      	add	r7, sp, #0
 800174e:	60f8      	str	r0, [r7, #12]
 8001750:	60b9      	str	r1, [r7, #8]
 8001752:	607a      	str	r2, [r7, #4]
 8001754:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	f893 3020 	ldrb.w	r3, [r3, #32]
 800175c:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	689b      	ldr	r3, [r3, #8]
 8001764:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001766:	7ffb      	ldrb	r3, [r7, #31]
 8001768:	2b01      	cmp	r3, #1
 800176a:	d003      	beq.n	8001774 <HAL_CAN_AddTxMessage+0x2c>
 800176c:	7ffb      	ldrb	r3, [r7, #31]
 800176e:	2b02      	cmp	r3, #2
 8001770:	f040 80ad 	bne.w	80018ce <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001774:	69bb      	ldr	r3, [r7, #24]
 8001776:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800177a:	2b00      	cmp	r3, #0
 800177c:	d10a      	bne.n	8001794 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800177e:	69bb      	ldr	r3, [r7, #24]
 8001780:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001784:	2b00      	cmp	r3, #0
 8001786:	d105      	bne.n	8001794 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001788:	69bb      	ldr	r3, [r7, #24]
 800178a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800178e:	2b00      	cmp	r3, #0
 8001790:	f000 8095 	beq.w	80018be <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001794:	69bb      	ldr	r3, [r7, #24]
 8001796:	0e1b      	lsrs	r3, r3, #24
 8001798:	f003 0303 	and.w	r3, r3, #3
 800179c:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800179e:	2201      	movs	r2, #1
 80017a0:	697b      	ldr	r3, [r7, #20]
 80017a2:	409a      	lsls	r2, r3
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80017a8:	68bb      	ldr	r3, [r7, #8]
 80017aa:	689b      	ldr	r3, [r3, #8]
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d10d      	bne.n	80017cc <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80017b0:	68bb      	ldr	r3, [r7, #8]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80017b6:	68bb      	ldr	r3, [r7, #8]
 80017b8:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80017ba:	68f9      	ldr	r1, [r7, #12]
 80017bc:	6809      	ldr	r1, [r1, #0]
 80017be:	431a      	orrs	r2, r3
 80017c0:	697b      	ldr	r3, [r7, #20]
 80017c2:	3318      	adds	r3, #24
 80017c4:	011b      	lsls	r3, r3, #4
 80017c6:	440b      	add	r3, r1
 80017c8:	601a      	str	r2, [r3, #0]
 80017ca:	e00f      	b.n	80017ec <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80017cc:	68bb      	ldr	r3, [r7, #8]
 80017ce:	685b      	ldr	r3, [r3, #4]
 80017d0:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80017d2:	68bb      	ldr	r3, [r7, #8]
 80017d4:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80017d6:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80017d8:	68bb      	ldr	r3, [r7, #8]
 80017da:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80017dc:	68f9      	ldr	r1, [r7, #12]
 80017de:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80017e0:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80017e2:	697b      	ldr	r3, [r7, #20]
 80017e4:	3318      	adds	r3, #24
 80017e6:	011b      	lsls	r3, r3, #4
 80017e8:	440b      	add	r3, r1
 80017ea:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	6819      	ldr	r1, [r3, #0]
 80017f0:	68bb      	ldr	r3, [r7, #8]
 80017f2:	691a      	ldr	r2, [r3, #16]
 80017f4:	697b      	ldr	r3, [r7, #20]
 80017f6:	3318      	adds	r3, #24
 80017f8:	011b      	lsls	r3, r3, #4
 80017fa:	440b      	add	r3, r1
 80017fc:	3304      	adds	r3, #4
 80017fe:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001800:	68bb      	ldr	r3, [r7, #8]
 8001802:	7d1b      	ldrb	r3, [r3, #20]
 8001804:	2b01      	cmp	r3, #1
 8001806:	d111      	bne.n	800182c <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	681a      	ldr	r2, [r3, #0]
 800180c:	697b      	ldr	r3, [r7, #20]
 800180e:	3318      	adds	r3, #24
 8001810:	011b      	lsls	r3, r3, #4
 8001812:	4413      	add	r3, r2
 8001814:	3304      	adds	r3, #4
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	68fa      	ldr	r2, [r7, #12]
 800181a:	6811      	ldr	r1, [r2, #0]
 800181c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001820:	697b      	ldr	r3, [r7, #20]
 8001822:	3318      	adds	r3, #24
 8001824:	011b      	lsls	r3, r3, #4
 8001826:	440b      	add	r3, r1
 8001828:	3304      	adds	r3, #4
 800182a:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	3307      	adds	r3, #7
 8001830:	781b      	ldrb	r3, [r3, #0]
 8001832:	061a      	lsls	r2, r3, #24
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	3306      	adds	r3, #6
 8001838:	781b      	ldrb	r3, [r3, #0]
 800183a:	041b      	lsls	r3, r3, #16
 800183c:	431a      	orrs	r2, r3
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	3305      	adds	r3, #5
 8001842:	781b      	ldrb	r3, [r3, #0]
 8001844:	021b      	lsls	r3, r3, #8
 8001846:	4313      	orrs	r3, r2
 8001848:	687a      	ldr	r2, [r7, #4]
 800184a:	3204      	adds	r2, #4
 800184c:	7812      	ldrb	r2, [r2, #0]
 800184e:	4610      	mov	r0, r2
 8001850:	68fa      	ldr	r2, [r7, #12]
 8001852:	6811      	ldr	r1, [r2, #0]
 8001854:	ea43 0200 	orr.w	r2, r3, r0
 8001858:	697b      	ldr	r3, [r7, #20]
 800185a:	011b      	lsls	r3, r3, #4
 800185c:	440b      	add	r3, r1
 800185e:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8001862:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	3303      	adds	r3, #3
 8001868:	781b      	ldrb	r3, [r3, #0]
 800186a:	061a      	lsls	r2, r3, #24
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	3302      	adds	r3, #2
 8001870:	781b      	ldrb	r3, [r3, #0]
 8001872:	041b      	lsls	r3, r3, #16
 8001874:	431a      	orrs	r2, r3
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	3301      	adds	r3, #1
 800187a:	781b      	ldrb	r3, [r3, #0]
 800187c:	021b      	lsls	r3, r3, #8
 800187e:	4313      	orrs	r3, r2
 8001880:	687a      	ldr	r2, [r7, #4]
 8001882:	7812      	ldrb	r2, [r2, #0]
 8001884:	4610      	mov	r0, r2
 8001886:	68fa      	ldr	r2, [r7, #12]
 8001888:	6811      	ldr	r1, [r2, #0]
 800188a:	ea43 0200 	orr.w	r2, r3, r0
 800188e:	697b      	ldr	r3, [r7, #20]
 8001890:	011b      	lsls	r3, r3, #4
 8001892:	440b      	add	r3, r1
 8001894:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8001898:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	681a      	ldr	r2, [r3, #0]
 800189e:	697b      	ldr	r3, [r7, #20]
 80018a0:	3318      	adds	r3, #24
 80018a2:	011b      	lsls	r3, r3, #4
 80018a4:	4413      	add	r3, r2
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	68fa      	ldr	r2, [r7, #12]
 80018aa:	6811      	ldr	r1, [r2, #0]
 80018ac:	f043 0201 	orr.w	r2, r3, #1
 80018b0:	697b      	ldr	r3, [r7, #20]
 80018b2:	3318      	adds	r3, #24
 80018b4:	011b      	lsls	r3, r3, #4
 80018b6:	440b      	add	r3, r1
 80018b8:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80018ba:	2300      	movs	r3, #0
 80018bc:	e00e      	b.n	80018dc <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018c2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80018ca:	2301      	movs	r3, #1
 80018cc:	e006      	b.n	80018dc <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018d2:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80018da:	2301      	movs	r3, #1
  }
}
 80018dc:	4618      	mov	r0, r3
 80018de:	3724      	adds	r7, #36	; 0x24
 80018e0:	46bd      	mov	sp, r7
 80018e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e6:	4770      	bx	lr

080018e8 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(const CAN_HandleTypeDef *hcan)
{
 80018e8:	b480      	push	{r7}
 80018ea:	b085      	sub	sp, #20
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 80018f0:	2300      	movs	r3, #0
 80018f2:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80018fa:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 80018fc:	7afb      	ldrb	r3, [r7, #11]
 80018fe:	2b01      	cmp	r3, #1
 8001900:	d002      	beq.n	8001908 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8001902:	7afb      	ldrb	r3, [r7, #11]
 8001904:	2b02      	cmp	r3, #2
 8001906:	d11d      	bne.n	8001944 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	689b      	ldr	r3, [r3, #8]
 800190e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001912:	2b00      	cmp	r3, #0
 8001914:	d002      	beq.n	800191c <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	3301      	adds	r3, #1
 800191a:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	689b      	ldr	r3, [r3, #8]
 8001922:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001926:	2b00      	cmp	r3, #0
 8001928:	d002      	beq.n	8001930 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	3301      	adds	r3, #1
 800192e:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	689b      	ldr	r3, [r3, #8]
 8001936:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800193a:	2b00      	cmp	r3, #0
 800193c:	d002      	beq.n	8001944 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	3301      	adds	r3, #1
 8001942:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8001944:	68fb      	ldr	r3, [r7, #12]
}
 8001946:	4618      	mov	r0, r3
 8001948:	3714      	adds	r7, #20
 800194a:	46bd      	mov	sp, r7
 800194c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001950:	4770      	bx	lr

08001952 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001952:	b480      	push	{r7}
 8001954:	b087      	sub	sp, #28
 8001956:	af00      	add	r7, sp, #0
 8001958:	60f8      	str	r0, [r7, #12]
 800195a:	60b9      	str	r1, [r7, #8]
 800195c:	607a      	str	r2, [r7, #4]
 800195e:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001966:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001968:	7dfb      	ldrb	r3, [r7, #23]
 800196a:	2b01      	cmp	r3, #1
 800196c:	d003      	beq.n	8001976 <HAL_CAN_GetRxMessage+0x24>
 800196e:	7dfb      	ldrb	r3, [r7, #23]
 8001970:	2b02      	cmp	r3, #2
 8001972:	f040 8103 	bne.w	8001b7c <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001976:	68bb      	ldr	r3, [r7, #8]
 8001978:	2b00      	cmp	r3, #0
 800197a:	d10e      	bne.n	800199a <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	68db      	ldr	r3, [r3, #12]
 8001982:	f003 0303 	and.w	r3, r3, #3
 8001986:	2b00      	cmp	r3, #0
 8001988:	d116      	bne.n	80019b8 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800198e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001996:	2301      	movs	r3, #1
 8001998:	e0f7      	b.n	8001b8a <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	691b      	ldr	r3, [r3, #16]
 80019a0:	f003 0303 	and.w	r3, r3, #3
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d107      	bne.n	80019b8 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019ac:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80019b4:	2301      	movs	r3, #1
 80019b6:	e0e8      	b.n	8001b8a <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	681a      	ldr	r2, [r3, #0]
 80019bc:	68bb      	ldr	r3, [r7, #8]
 80019be:	331b      	adds	r3, #27
 80019c0:	011b      	lsls	r3, r3, #4
 80019c2:	4413      	add	r3, r2
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f003 0204 	and.w	r2, r3, #4
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	689b      	ldr	r3, [r3, #8]
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d10c      	bne.n	80019f0 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	681a      	ldr	r2, [r3, #0]
 80019da:	68bb      	ldr	r3, [r7, #8]
 80019dc:	331b      	adds	r3, #27
 80019de:	011b      	lsls	r3, r3, #4
 80019e0:	4413      	add	r3, r2
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	0d5b      	lsrs	r3, r3, #21
 80019e6:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	601a      	str	r2, [r3, #0]
 80019ee:	e00b      	b.n	8001a08 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	681a      	ldr	r2, [r3, #0]
 80019f4:	68bb      	ldr	r3, [r7, #8]
 80019f6:	331b      	adds	r3, #27
 80019f8:	011b      	lsls	r3, r3, #4
 80019fa:	4413      	add	r3, r2
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	08db      	lsrs	r3, r3, #3
 8001a00:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	681a      	ldr	r2, [r3, #0]
 8001a0c:	68bb      	ldr	r3, [r7, #8]
 8001a0e:	331b      	adds	r3, #27
 8001a10:	011b      	lsls	r3, r3, #4
 8001a12:	4413      	add	r3, r2
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f003 0202 	and.w	r2, r3, #2
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	681a      	ldr	r2, [r3, #0]
 8001a22:	68bb      	ldr	r3, [r7, #8]
 8001a24:	331b      	adds	r3, #27
 8001a26:	011b      	lsls	r3, r3, #4
 8001a28:	4413      	add	r3, r2
 8001a2a:	3304      	adds	r3, #4
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f003 0308 	and.w	r3, r3, #8
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d003      	beq.n	8001a3e <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	2208      	movs	r2, #8
 8001a3a:	611a      	str	r2, [r3, #16]
 8001a3c:	e00b      	b.n	8001a56 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	681a      	ldr	r2, [r3, #0]
 8001a42:	68bb      	ldr	r3, [r7, #8]
 8001a44:	331b      	adds	r3, #27
 8001a46:	011b      	lsls	r3, r3, #4
 8001a48:	4413      	add	r3, r2
 8001a4a:	3304      	adds	r3, #4
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f003 020f 	and.w	r2, r3, #15
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	681a      	ldr	r2, [r3, #0]
 8001a5a:	68bb      	ldr	r3, [r7, #8]
 8001a5c:	331b      	adds	r3, #27
 8001a5e:	011b      	lsls	r3, r3, #4
 8001a60:	4413      	add	r3, r2
 8001a62:	3304      	adds	r3, #4
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	0a1b      	lsrs	r3, r3, #8
 8001a68:	b2da      	uxtb	r2, r3
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	681a      	ldr	r2, [r3, #0]
 8001a72:	68bb      	ldr	r3, [r7, #8]
 8001a74:	331b      	adds	r3, #27
 8001a76:	011b      	lsls	r3, r3, #4
 8001a78:	4413      	add	r3, r2
 8001a7a:	3304      	adds	r3, #4
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	0c1b      	lsrs	r3, r3, #16
 8001a80:	b29a      	uxth	r2, r3
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	681a      	ldr	r2, [r3, #0]
 8001a8a:	68bb      	ldr	r3, [r7, #8]
 8001a8c:	011b      	lsls	r3, r3, #4
 8001a8e:	4413      	add	r3, r2
 8001a90:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	b2da      	uxtb	r2, r3
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	681a      	ldr	r2, [r3, #0]
 8001aa0:	68bb      	ldr	r3, [r7, #8]
 8001aa2:	011b      	lsls	r3, r3, #4
 8001aa4:	4413      	add	r3, r2
 8001aa6:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	0a1a      	lsrs	r2, r3, #8
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	3301      	adds	r3, #1
 8001ab2:	b2d2      	uxtb	r2, r2
 8001ab4:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	681a      	ldr	r2, [r3, #0]
 8001aba:	68bb      	ldr	r3, [r7, #8]
 8001abc:	011b      	lsls	r3, r3, #4
 8001abe:	4413      	add	r3, r2
 8001ac0:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	0c1a      	lsrs	r2, r3, #16
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	3302      	adds	r3, #2
 8001acc:	b2d2      	uxtb	r2, r2
 8001ace:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	681a      	ldr	r2, [r3, #0]
 8001ad4:	68bb      	ldr	r3, [r7, #8]
 8001ad6:	011b      	lsls	r3, r3, #4
 8001ad8:	4413      	add	r3, r2
 8001ada:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	0e1a      	lsrs	r2, r3, #24
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	3303      	adds	r3, #3
 8001ae6:	b2d2      	uxtb	r2, r2
 8001ae8:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	681a      	ldr	r2, [r3, #0]
 8001aee:	68bb      	ldr	r3, [r7, #8]
 8001af0:	011b      	lsls	r3, r3, #4
 8001af2:	4413      	add	r3, r2
 8001af4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001af8:	681a      	ldr	r2, [r3, #0]
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	3304      	adds	r3, #4
 8001afe:	b2d2      	uxtb	r2, r2
 8001b00:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	681a      	ldr	r2, [r3, #0]
 8001b06:	68bb      	ldr	r3, [r7, #8]
 8001b08:	011b      	lsls	r3, r3, #4
 8001b0a:	4413      	add	r3, r2
 8001b0c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	0a1a      	lsrs	r2, r3, #8
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	3305      	adds	r3, #5
 8001b18:	b2d2      	uxtb	r2, r2
 8001b1a:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	681a      	ldr	r2, [r3, #0]
 8001b20:	68bb      	ldr	r3, [r7, #8]
 8001b22:	011b      	lsls	r3, r3, #4
 8001b24:	4413      	add	r3, r2
 8001b26:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	0c1a      	lsrs	r2, r3, #16
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	3306      	adds	r3, #6
 8001b32:	b2d2      	uxtb	r2, r2
 8001b34:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	681a      	ldr	r2, [r3, #0]
 8001b3a:	68bb      	ldr	r3, [r7, #8]
 8001b3c:	011b      	lsls	r3, r3, #4
 8001b3e:	4413      	add	r3, r2
 8001b40:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	0e1a      	lsrs	r2, r3, #24
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	3307      	adds	r3, #7
 8001b4c:	b2d2      	uxtb	r2, r2
 8001b4e:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001b50:	68bb      	ldr	r3, [r7, #8]
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d108      	bne.n	8001b68 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	68da      	ldr	r2, [r3, #12]
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f042 0220 	orr.w	r2, r2, #32
 8001b64:	60da      	str	r2, [r3, #12]
 8001b66:	e007      	b.n	8001b78 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	691a      	ldr	r2, [r3, #16]
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f042 0220 	orr.w	r2, r2, #32
 8001b76:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	e006      	b.n	8001b8a <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b80:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001b88:	2301      	movs	r3, #1
  }
}
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	371c      	adds	r7, #28
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b94:	4770      	bx	lr

08001b96 <HAL_CAN_GetRxFifoFillLevel>:
  * @param  RxFifo Rx FIFO.
  *         This parameter can be a value of @arg CAN_receive_FIFO_number.
  * @retval Number of messages available in Rx FIFO.
  */
uint32_t HAL_CAN_GetRxFifoFillLevel(const CAN_HandleTypeDef *hcan, uint32_t RxFifo)
{
 8001b96:	b480      	push	{r7}
 8001b98:	b085      	sub	sp, #20
 8001b9a:	af00      	add	r7, sp, #0
 8001b9c:	6078      	str	r0, [r7, #4]
 8001b9e:	6039      	str	r1, [r7, #0]
  uint32_t filllevel = 0U;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001baa:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001bac:	7afb      	ldrb	r3, [r7, #11]
 8001bae:	2b01      	cmp	r3, #1
 8001bb0:	d002      	beq.n	8001bb8 <HAL_CAN_GetRxFifoFillLevel+0x22>
 8001bb2:	7afb      	ldrb	r3, [r7, #11]
 8001bb4:	2b02      	cmp	r3, #2
 8001bb6:	d10f      	bne.n	8001bd8 <HAL_CAN_GetRxFifoFillLevel+0x42>
      (state == HAL_CAN_STATE_LISTENING))
  {
    if (RxFifo == CAN_RX_FIFO0)
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d106      	bne.n	8001bcc <HAL_CAN_GetRxFifoFillLevel+0x36>
    {
      filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	68db      	ldr	r3, [r3, #12]
 8001bc4:	f003 0303 	and.w	r3, r3, #3
 8001bc8:	60fb      	str	r3, [r7, #12]
 8001bca:	e005      	b.n	8001bd8 <HAL_CAN_GetRxFifoFillLevel+0x42>
    }
    else /* RxFifo == CAN_RX_FIFO1 */
    {
      filllevel = hcan->Instance->RF1R & CAN_RF1R_FMP1;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	691b      	ldr	r3, [r3, #16]
 8001bd2:	f003 0303 	and.w	r3, r3, #3
 8001bd6:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Rx FIFO fill level */
  return filllevel;
 8001bd8:	68fb      	ldr	r3, [r7, #12]
}
 8001bda:	4618      	mov	r0, r3
 8001bdc:	3714      	adds	r7, #20
 8001bde:	46bd      	mov	sp, r7
 8001be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be4:	4770      	bx	lr

08001be6 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001be6:	b480      	push	{r7}
 8001be8:	b085      	sub	sp, #20
 8001bea:	af00      	add	r7, sp, #0
 8001bec:	6078      	str	r0, [r7, #4]
 8001bee:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001bf6:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001bf8:	7bfb      	ldrb	r3, [r7, #15]
 8001bfa:	2b01      	cmp	r3, #1
 8001bfc:	d002      	beq.n	8001c04 <HAL_CAN_ActivateNotification+0x1e>
 8001bfe:	7bfb      	ldrb	r3, [r7, #15]
 8001c00:	2b02      	cmp	r3, #2
 8001c02:	d109      	bne.n	8001c18 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	6959      	ldr	r1, [r3, #20]
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	683a      	ldr	r2, [r7, #0]
 8001c10:	430a      	orrs	r2, r1
 8001c12:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001c14:	2300      	movs	r3, #0
 8001c16:	e006      	b.n	8001c26 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c1c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001c24:	2301      	movs	r3, #1
  }
}
 8001c26:	4618      	mov	r0, r3
 8001c28:	3714      	adds	r7, #20
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c30:	4770      	bx	lr

08001c32 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001c32:	b580      	push	{r7, lr}
 8001c34:	b08a      	sub	sp, #40	; 0x28
 8001c36:	af00      	add	r7, sp, #0
 8001c38:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	695b      	ldr	r3, [r3, #20]
 8001c44:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	685b      	ldr	r3, [r3, #4]
 8001c4c:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	689b      	ldr	r3, [r3, #8]
 8001c54:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	68db      	ldr	r3, [r3, #12]
 8001c5c:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	691b      	ldr	r3, [r3, #16]
 8001c64:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	699b      	ldr	r3, [r3, #24]
 8001c6c:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001c6e:	6a3b      	ldr	r3, [r7, #32]
 8001c70:	f003 0301 	and.w	r3, r3, #1
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d07c      	beq.n	8001d72 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001c78:	69bb      	ldr	r3, [r7, #24]
 8001c7a:	f003 0301 	and.w	r3, r3, #1
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d023      	beq.n	8001cca <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	2201      	movs	r2, #1
 8001c88:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001c8a:	69bb      	ldr	r3, [r7, #24]
 8001c8c:	f003 0302 	and.w	r3, r3, #2
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d003      	beq.n	8001c9c <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001c94:	6878      	ldr	r0, [r7, #4]
 8001c96:	f000 f983 	bl	8001fa0 <HAL_CAN_TxMailbox0CompleteCallback>
 8001c9a:	e016      	b.n	8001cca <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001c9c:	69bb      	ldr	r3, [r7, #24]
 8001c9e:	f003 0304 	and.w	r3, r3, #4
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d004      	beq.n	8001cb0 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ca8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001cac:	627b      	str	r3, [r7, #36]	; 0x24
 8001cae:	e00c      	b.n	8001cca <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001cb0:	69bb      	ldr	r3, [r7, #24]
 8001cb2:	f003 0308 	and.w	r3, r3, #8
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d004      	beq.n	8001cc4 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cbc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001cc0:	627b      	str	r3, [r7, #36]	; 0x24
 8001cc2:	e002      	b.n	8001cca <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001cc4:	6878      	ldr	r0, [r7, #4]
 8001cc6:	f000 f989 	bl	8001fdc <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001cca:	69bb      	ldr	r3, [r7, #24]
 8001ccc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d024      	beq.n	8001d1e <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001cdc:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001cde:	69bb      	ldr	r3, [r7, #24]
 8001ce0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d003      	beq.n	8001cf0 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001ce8:	6878      	ldr	r0, [r7, #4]
 8001cea:	f000 f963 	bl	8001fb4 <HAL_CAN_TxMailbox1CompleteCallback>
 8001cee:	e016      	b.n	8001d1e <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001cf0:	69bb      	ldr	r3, [r7, #24]
 8001cf2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d004      	beq.n	8001d04 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cfc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001d00:	627b      	str	r3, [r7, #36]	; 0x24
 8001d02:	e00c      	b.n	8001d1e <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001d04:	69bb      	ldr	r3, [r7, #24]
 8001d06:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d004      	beq.n	8001d18 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d10:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d14:	627b      	str	r3, [r7, #36]	; 0x24
 8001d16:	e002      	b.n	8001d1e <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001d18:	6878      	ldr	r0, [r7, #4]
 8001d1a:	f000 f969 	bl	8001ff0 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001d1e:	69bb      	ldr	r3, [r7, #24]
 8001d20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d024      	beq.n	8001d72 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001d30:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001d32:	69bb      	ldr	r3, [r7, #24]
 8001d34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d003      	beq.n	8001d44 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001d3c:	6878      	ldr	r0, [r7, #4]
 8001d3e:	f000 f943 	bl	8001fc8 <HAL_CAN_TxMailbox2CompleteCallback>
 8001d42:	e016      	b.n	8001d72 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001d44:	69bb      	ldr	r3, [r7, #24]
 8001d46:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d004      	beq.n	8001d58 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d50:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d54:	627b      	str	r3, [r7, #36]	; 0x24
 8001d56:	e00c      	b.n	8001d72 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001d58:	69bb      	ldr	r3, [r7, #24]
 8001d5a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d004      	beq.n	8001d6c <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d68:	627b      	str	r3, [r7, #36]	; 0x24
 8001d6a:	e002      	b.n	8001d72 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001d6c:	6878      	ldr	r0, [r7, #4]
 8001d6e:	f000 f949 	bl	8002004 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001d72:	6a3b      	ldr	r3, [r7, #32]
 8001d74:	f003 0308 	and.w	r3, r3, #8
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d00c      	beq.n	8001d96 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001d7c:	697b      	ldr	r3, [r7, #20]
 8001d7e:	f003 0310 	and.w	r3, r3, #16
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d007      	beq.n	8001d96 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d88:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d8c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	2210      	movs	r2, #16
 8001d94:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001d96:	6a3b      	ldr	r3, [r7, #32]
 8001d98:	f003 0304 	and.w	r3, r3, #4
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d00b      	beq.n	8001db8 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001da0:	697b      	ldr	r3, [r7, #20]
 8001da2:	f003 0308 	and.w	r3, r3, #8
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d006      	beq.n	8001db8 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	2208      	movs	r2, #8
 8001db0:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001db2:	6878      	ldr	r0, [r7, #4]
 8001db4:	f000 f930 	bl	8002018 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001db8:	6a3b      	ldr	r3, [r7, #32]
 8001dba:	f003 0302 	and.w	r3, r3, #2
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d009      	beq.n	8001dd6 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	68db      	ldr	r3, [r3, #12]
 8001dc8:	f003 0303 	and.w	r3, r3, #3
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d002      	beq.n	8001dd6 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001dd0:	6878      	ldr	r0, [r7, #4]
 8001dd2:	f7ff f807 	bl	8000de4 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001dd6:	6a3b      	ldr	r3, [r7, #32]
 8001dd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d00c      	beq.n	8001dfa <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001de0:	693b      	ldr	r3, [r7, #16]
 8001de2:	f003 0310 	and.w	r3, r3, #16
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d007      	beq.n	8001dfa <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dec:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001df0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	2210      	movs	r2, #16
 8001df8:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001dfa:	6a3b      	ldr	r3, [r7, #32]
 8001dfc:	f003 0320 	and.w	r3, r3, #32
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d00b      	beq.n	8001e1c <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001e04:	693b      	ldr	r3, [r7, #16]
 8001e06:	f003 0308 	and.w	r3, r3, #8
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d006      	beq.n	8001e1c <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	2208      	movs	r2, #8
 8001e14:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001e16:	6878      	ldr	r0, [r7, #4]
 8001e18:	f000 f912 	bl	8002040 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001e1c:	6a3b      	ldr	r3, [r7, #32]
 8001e1e:	f003 0310 	and.w	r3, r3, #16
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d009      	beq.n	8001e3a <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	691b      	ldr	r3, [r3, #16]
 8001e2c:	f003 0303 	and.w	r3, r3, #3
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d002      	beq.n	8001e3a <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001e34:	6878      	ldr	r0, [r7, #4]
 8001e36:	f000 f8f9 	bl	800202c <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001e3a:	6a3b      	ldr	r3, [r7, #32]
 8001e3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d00b      	beq.n	8001e5c <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001e44:	69fb      	ldr	r3, [r7, #28]
 8001e46:	f003 0310 	and.w	r3, r3, #16
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d006      	beq.n	8001e5c <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	2210      	movs	r2, #16
 8001e54:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001e56:	6878      	ldr	r0, [r7, #4]
 8001e58:	f000 f8fc 	bl	8002054 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001e5c:	6a3b      	ldr	r3, [r7, #32]
 8001e5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d00b      	beq.n	8001e7e <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001e66:	69fb      	ldr	r3, [r7, #28]
 8001e68:	f003 0308 	and.w	r3, r3, #8
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d006      	beq.n	8001e7e <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	2208      	movs	r2, #8
 8001e76:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001e78:	6878      	ldr	r0, [r7, #4]
 8001e7a:	f000 f8f5 	bl	8002068 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001e7e:	6a3b      	ldr	r3, [r7, #32]
 8001e80:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d07b      	beq.n	8001f80 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001e88:	69fb      	ldr	r3, [r7, #28]
 8001e8a:	f003 0304 	and.w	r3, r3, #4
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d072      	beq.n	8001f78 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001e92:	6a3b      	ldr	r3, [r7, #32]
 8001e94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d008      	beq.n	8001eae <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d003      	beq.n	8001eae <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ea8:	f043 0301 	orr.w	r3, r3, #1
 8001eac:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001eae:	6a3b      	ldr	r3, [r7, #32]
 8001eb0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d008      	beq.n	8001eca <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d003      	beq.n	8001eca <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ec4:	f043 0302 	orr.w	r3, r3, #2
 8001ec8:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001eca:	6a3b      	ldr	r3, [r7, #32]
 8001ecc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d008      	beq.n	8001ee6 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d003      	beq.n	8001ee6 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ee0:	f043 0304 	orr.w	r3, r3, #4
 8001ee4:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001ee6:	6a3b      	ldr	r3, [r7, #32]
 8001ee8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d043      	beq.n	8001f78 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d03e      	beq.n	8001f78 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001f00:	2b60      	cmp	r3, #96	; 0x60
 8001f02:	d02b      	beq.n	8001f5c <HAL_CAN_IRQHandler+0x32a>
 8001f04:	2b60      	cmp	r3, #96	; 0x60
 8001f06:	d82e      	bhi.n	8001f66 <HAL_CAN_IRQHandler+0x334>
 8001f08:	2b50      	cmp	r3, #80	; 0x50
 8001f0a:	d022      	beq.n	8001f52 <HAL_CAN_IRQHandler+0x320>
 8001f0c:	2b50      	cmp	r3, #80	; 0x50
 8001f0e:	d82a      	bhi.n	8001f66 <HAL_CAN_IRQHandler+0x334>
 8001f10:	2b40      	cmp	r3, #64	; 0x40
 8001f12:	d019      	beq.n	8001f48 <HAL_CAN_IRQHandler+0x316>
 8001f14:	2b40      	cmp	r3, #64	; 0x40
 8001f16:	d826      	bhi.n	8001f66 <HAL_CAN_IRQHandler+0x334>
 8001f18:	2b30      	cmp	r3, #48	; 0x30
 8001f1a:	d010      	beq.n	8001f3e <HAL_CAN_IRQHandler+0x30c>
 8001f1c:	2b30      	cmp	r3, #48	; 0x30
 8001f1e:	d822      	bhi.n	8001f66 <HAL_CAN_IRQHandler+0x334>
 8001f20:	2b10      	cmp	r3, #16
 8001f22:	d002      	beq.n	8001f2a <HAL_CAN_IRQHandler+0x2f8>
 8001f24:	2b20      	cmp	r3, #32
 8001f26:	d005      	beq.n	8001f34 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001f28:	e01d      	b.n	8001f66 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f2c:	f043 0308 	orr.w	r3, r3, #8
 8001f30:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001f32:	e019      	b.n	8001f68 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f36:	f043 0310 	orr.w	r3, r3, #16
 8001f3a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001f3c:	e014      	b.n	8001f68 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f40:	f043 0320 	orr.w	r3, r3, #32
 8001f44:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001f46:	e00f      	b.n	8001f68 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f4a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001f4e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001f50:	e00a      	b.n	8001f68 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f58:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001f5a:	e005      	b.n	8001f68 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f62:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001f64:	e000      	b.n	8001f68 <HAL_CAN_IRQHandler+0x336>
            break;
 8001f66:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	699a      	ldr	r2, [r3, #24]
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001f76:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	2204      	movs	r2, #4
 8001f7e:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d008      	beq.n	8001f98 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f8c:	431a      	orrs	r2, r3
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001f92:	6878      	ldr	r0, [r7, #4]
 8001f94:	f000 f872 	bl	800207c <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001f98:	bf00      	nop
 8001f9a:	3728      	adds	r7, #40	; 0x28
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	bd80      	pop	{r7, pc}

08001fa0 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	b083      	sub	sp, #12
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001fa8:	bf00      	nop
 8001faa:	370c      	adds	r7, #12
 8001fac:	46bd      	mov	sp, r7
 8001fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb2:	4770      	bx	lr

08001fb4 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	b083      	sub	sp, #12
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001fbc:	bf00      	nop
 8001fbe:	370c      	adds	r7, #12
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc6:	4770      	bx	lr

08001fc8 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	b083      	sub	sp, #12
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001fd0:	bf00      	nop
 8001fd2:	370c      	adds	r7, #12
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fda:	4770      	bx	lr

08001fdc <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	b083      	sub	sp, #12
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001fe4:	bf00      	nop
 8001fe6:	370c      	adds	r7, #12
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fee:	4770      	bx	lr

08001ff0 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	b083      	sub	sp, #12
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001ff8:	bf00      	nop
 8001ffa:	370c      	adds	r7, #12
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002002:	4770      	bx	lr

08002004 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002004:	b480      	push	{r7}
 8002006:	b083      	sub	sp, #12
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800200c:	bf00      	nop
 800200e:	370c      	adds	r7, #12
 8002010:	46bd      	mov	sp, r7
 8002012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002016:	4770      	bx	lr

08002018 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002018:	b480      	push	{r7}
 800201a:	b083      	sub	sp, #12
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002020:	bf00      	nop
 8002022:	370c      	adds	r7, #12
 8002024:	46bd      	mov	sp, r7
 8002026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202a:	4770      	bx	lr

0800202c <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800202c:	b480      	push	{r7}
 800202e:	b083      	sub	sp, #12
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002034:	bf00      	nop
 8002036:	370c      	adds	r7, #12
 8002038:	46bd      	mov	sp, r7
 800203a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203e:	4770      	bx	lr

08002040 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002040:	b480      	push	{r7}
 8002042:	b083      	sub	sp, #12
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002048:	bf00      	nop
 800204a:	370c      	adds	r7, #12
 800204c:	46bd      	mov	sp, r7
 800204e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002052:	4770      	bx	lr

08002054 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002054:	b480      	push	{r7}
 8002056:	b083      	sub	sp, #12
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800205c:	bf00      	nop
 800205e:	370c      	adds	r7, #12
 8002060:	46bd      	mov	sp, r7
 8002062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002066:	4770      	bx	lr

08002068 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002068:	b480      	push	{r7}
 800206a:	b083      	sub	sp, #12
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002070:	bf00      	nop
 8002072:	370c      	adds	r7, #12
 8002074:	46bd      	mov	sp, r7
 8002076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207a:	4770      	bx	lr

0800207c <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800207c:	b480      	push	{r7}
 800207e:	b083      	sub	sp, #12
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002084:	bf00      	nop
 8002086:	370c      	adds	r7, #12
 8002088:	46bd      	mov	sp, r7
 800208a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208e:	4770      	bx	lr

08002090 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002090:	b480      	push	{r7}
 8002092:	b085      	sub	sp, #20
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	f003 0307 	and.w	r3, r3, #7
 800209e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80020a0:	4b0c      	ldr	r3, [pc, #48]	; (80020d4 <__NVIC_SetPriorityGrouping+0x44>)
 80020a2:	68db      	ldr	r3, [r3, #12]
 80020a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80020a6:	68ba      	ldr	r2, [r7, #8]
 80020a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80020ac:	4013      	ands	r3, r2
 80020ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80020b4:	68bb      	ldr	r3, [r7, #8]
 80020b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80020b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80020bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80020c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80020c2:	4a04      	ldr	r2, [pc, #16]	; (80020d4 <__NVIC_SetPriorityGrouping+0x44>)
 80020c4:	68bb      	ldr	r3, [r7, #8]
 80020c6:	60d3      	str	r3, [r2, #12]
}
 80020c8:	bf00      	nop
 80020ca:	3714      	adds	r7, #20
 80020cc:	46bd      	mov	sp, r7
 80020ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d2:	4770      	bx	lr
 80020d4:	e000ed00 	.word	0xe000ed00

080020d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80020d8:	b480      	push	{r7}
 80020da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80020dc:	4b04      	ldr	r3, [pc, #16]	; (80020f0 <__NVIC_GetPriorityGrouping+0x18>)
 80020de:	68db      	ldr	r3, [r3, #12]
 80020e0:	0a1b      	lsrs	r3, r3, #8
 80020e2:	f003 0307 	and.w	r3, r3, #7
}
 80020e6:	4618      	mov	r0, r3
 80020e8:	46bd      	mov	sp, r7
 80020ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ee:	4770      	bx	lr
 80020f0:	e000ed00 	.word	0xe000ed00

080020f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020f4:	b480      	push	{r7}
 80020f6:	b083      	sub	sp, #12
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	4603      	mov	r3, r0
 80020fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002102:	2b00      	cmp	r3, #0
 8002104:	db0b      	blt.n	800211e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002106:	79fb      	ldrb	r3, [r7, #7]
 8002108:	f003 021f 	and.w	r2, r3, #31
 800210c:	4907      	ldr	r1, [pc, #28]	; (800212c <__NVIC_EnableIRQ+0x38>)
 800210e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002112:	095b      	lsrs	r3, r3, #5
 8002114:	2001      	movs	r0, #1
 8002116:	fa00 f202 	lsl.w	r2, r0, r2
 800211a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800211e:	bf00      	nop
 8002120:	370c      	adds	r7, #12
 8002122:	46bd      	mov	sp, r7
 8002124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002128:	4770      	bx	lr
 800212a:	bf00      	nop
 800212c:	e000e100 	.word	0xe000e100

08002130 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002130:	b480      	push	{r7}
 8002132:	b083      	sub	sp, #12
 8002134:	af00      	add	r7, sp, #0
 8002136:	4603      	mov	r3, r0
 8002138:	6039      	str	r1, [r7, #0]
 800213a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800213c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002140:	2b00      	cmp	r3, #0
 8002142:	db0a      	blt.n	800215a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	b2da      	uxtb	r2, r3
 8002148:	490c      	ldr	r1, [pc, #48]	; (800217c <__NVIC_SetPriority+0x4c>)
 800214a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800214e:	0112      	lsls	r2, r2, #4
 8002150:	b2d2      	uxtb	r2, r2
 8002152:	440b      	add	r3, r1
 8002154:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002158:	e00a      	b.n	8002170 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	b2da      	uxtb	r2, r3
 800215e:	4908      	ldr	r1, [pc, #32]	; (8002180 <__NVIC_SetPriority+0x50>)
 8002160:	79fb      	ldrb	r3, [r7, #7]
 8002162:	f003 030f 	and.w	r3, r3, #15
 8002166:	3b04      	subs	r3, #4
 8002168:	0112      	lsls	r2, r2, #4
 800216a:	b2d2      	uxtb	r2, r2
 800216c:	440b      	add	r3, r1
 800216e:	761a      	strb	r2, [r3, #24]
}
 8002170:	bf00      	nop
 8002172:	370c      	adds	r7, #12
 8002174:	46bd      	mov	sp, r7
 8002176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217a:	4770      	bx	lr
 800217c:	e000e100 	.word	0xe000e100
 8002180:	e000ed00 	.word	0xe000ed00

08002184 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002184:	b480      	push	{r7}
 8002186:	b089      	sub	sp, #36	; 0x24
 8002188:	af00      	add	r7, sp, #0
 800218a:	60f8      	str	r0, [r7, #12]
 800218c:	60b9      	str	r1, [r7, #8]
 800218e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	f003 0307 	and.w	r3, r3, #7
 8002196:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002198:	69fb      	ldr	r3, [r7, #28]
 800219a:	f1c3 0307 	rsb	r3, r3, #7
 800219e:	2b04      	cmp	r3, #4
 80021a0:	bf28      	it	cs
 80021a2:	2304      	movcs	r3, #4
 80021a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021a6:	69fb      	ldr	r3, [r7, #28]
 80021a8:	3304      	adds	r3, #4
 80021aa:	2b06      	cmp	r3, #6
 80021ac:	d902      	bls.n	80021b4 <NVIC_EncodePriority+0x30>
 80021ae:	69fb      	ldr	r3, [r7, #28]
 80021b0:	3b03      	subs	r3, #3
 80021b2:	e000      	b.n	80021b6 <NVIC_EncodePriority+0x32>
 80021b4:	2300      	movs	r3, #0
 80021b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021b8:	f04f 32ff 	mov.w	r2, #4294967295
 80021bc:	69bb      	ldr	r3, [r7, #24]
 80021be:	fa02 f303 	lsl.w	r3, r2, r3
 80021c2:	43da      	mvns	r2, r3
 80021c4:	68bb      	ldr	r3, [r7, #8]
 80021c6:	401a      	ands	r2, r3
 80021c8:	697b      	ldr	r3, [r7, #20]
 80021ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021cc:	f04f 31ff 	mov.w	r1, #4294967295
 80021d0:	697b      	ldr	r3, [r7, #20]
 80021d2:	fa01 f303 	lsl.w	r3, r1, r3
 80021d6:	43d9      	mvns	r1, r3
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021dc:	4313      	orrs	r3, r2
         );
}
 80021de:	4618      	mov	r0, r3
 80021e0:	3724      	adds	r7, #36	; 0x24
 80021e2:	46bd      	mov	sp, r7
 80021e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e8:	4770      	bx	lr
	...

080021ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b082      	sub	sp, #8
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	3b01      	subs	r3, #1
 80021f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80021fc:	d301      	bcc.n	8002202 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80021fe:	2301      	movs	r3, #1
 8002200:	e00f      	b.n	8002222 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002202:	4a0a      	ldr	r2, [pc, #40]	; (800222c <SysTick_Config+0x40>)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	3b01      	subs	r3, #1
 8002208:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800220a:	210f      	movs	r1, #15
 800220c:	f04f 30ff 	mov.w	r0, #4294967295
 8002210:	f7ff ff8e 	bl	8002130 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002214:	4b05      	ldr	r3, [pc, #20]	; (800222c <SysTick_Config+0x40>)
 8002216:	2200      	movs	r2, #0
 8002218:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800221a:	4b04      	ldr	r3, [pc, #16]	; (800222c <SysTick_Config+0x40>)
 800221c:	2207      	movs	r2, #7
 800221e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002220:	2300      	movs	r3, #0
}
 8002222:	4618      	mov	r0, r3
 8002224:	3708      	adds	r7, #8
 8002226:	46bd      	mov	sp, r7
 8002228:	bd80      	pop	{r7, pc}
 800222a:	bf00      	nop
 800222c:	e000e010 	.word	0xe000e010

08002230 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b082      	sub	sp, #8
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002238:	6878      	ldr	r0, [r7, #4]
 800223a:	f7ff ff29 	bl	8002090 <__NVIC_SetPriorityGrouping>
}
 800223e:	bf00      	nop
 8002240:	3708      	adds	r7, #8
 8002242:	46bd      	mov	sp, r7
 8002244:	bd80      	pop	{r7, pc}

08002246 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002246:	b580      	push	{r7, lr}
 8002248:	b086      	sub	sp, #24
 800224a:	af00      	add	r7, sp, #0
 800224c:	4603      	mov	r3, r0
 800224e:	60b9      	str	r1, [r7, #8]
 8002250:	607a      	str	r2, [r7, #4]
 8002252:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002254:	2300      	movs	r3, #0
 8002256:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002258:	f7ff ff3e 	bl	80020d8 <__NVIC_GetPriorityGrouping>
 800225c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800225e:	687a      	ldr	r2, [r7, #4]
 8002260:	68b9      	ldr	r1, [r7, #8]
 8002262:	6978      	ldr	r0, [r7, #20]
 8002264:	f7ff ff8e 	bl	8002184 <NVIC_EncodePriority>
 8002268:	4602      	mov	r2, r0
 800226a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800226e:	4611      	mov	r1, r2
 8002270:	4618      	mov	r0, r3
 8002272:	f7ff ff5d 	bl	8002130 <__NVIC_SetPriority>
}
 8002276:	bf00      	nop
 8002278:	3718      	adds	r7, #24
 800227a:	46bd      	mov	sp, r7
 800227c:	bd80      	pop	{r7, pc}

0800227e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800227e:	b580      	push	{r7, lr}
 8002280:	b082      	sub	sp, #8
 8002282:	af00      	add	r7, sp, #0
 8002284:	4603      	mov	r3, r0
 8002286:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002288:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800228c:	4618      	mov	r0, r3
 800228e:	f7ff ff31 	bl	80020f4 <__NVIC_EnableIRQ>
}
 8002292:	bf00      	nop
 8002294:	3708      	adds	r7, #8
 8002296:	46bd      	mov	sp, r7
 8002298:	bd80      	pop	{r7, pc}

0800229a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800229a:	b580      	push	{r7, lr}
 800229c:	b082      	sub	sp, #8
 800229e:	af00      	add	r7, sp, #0
 80022a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80022a2:	6878      	ldr	r0, [r7, #4]
 80022a4:	f7ff ffa2 	bl	80021ec <SysTick_Config>
 80022a8:	4603      	mov	r3, r0
}
 80022aa:	4618      	mov	r0, r3
 80022ac:	3708      	adds	r7, #8
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bd80      	pop	{r7, pc}
	...

080022b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022b4:	b480      	push	{r7}
 80022b6:	b087      	sub	sp, #28
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
 80022bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80022be:	2300      	movs	r3, #0
 80022c0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80022c2:	e154      	b.n	800256e <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	681a      	ldr	r2, [r3, #0]
 80022c8:	2101      	movs	r1, #1
 80022ca:	697b      	ldr	r3, [r7, #20]
 80022cc:	fa01 f303 	lsl.w	r3, r1, r3
 80022d0:	4013      	ands	r3, r2
 80022d2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	f000 8146 	beq.w	8002568 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	685b      	ldr	r3, [r3, #4]
 80022e0:	f003 0303 	and.w	r3, r3, #3
 80022e4:	2b01      	cmp	r3, #1
 80022e6:	d005      	beq.n	80022f4 <HAL_GPIO_Init+0x40>
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	f003 0303 	and.w	r3, r3, #3
 80022f0:	2b02      	cmp	r3, #2
 80022f2:	d130      	bne.n	8002356 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	689b      	ldr	r3, [r3, #8]
 80022f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80022fa:	697b      	ldr	r3, [r7, #20]
 80022fc:	005b      	lsls	r3, r3, #1
 80022fe:	2203      	movs	r2, #3
 8002300:	fa02 f303 	lsl.w	r3, r2, r3
 8002304:	43db      	mvns	r3, r3
 8002306:	693a      	ldr	r2, [r7, #16]
 8002308:	4013      	ands	r3, r2
 800230a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	68da      	ldr	r2, [r3, #12]
 8002310:	697b      	ldr	r3, [r7, #20]
 8002312:	005b      	lsls	r3, r3, #1
 8002314:	fa02 f303 	lsl.w	r3, r2, r3
 8002318:	693a      	ldr	r2, [r7, #16]
 800231a:	4313      	orrs	r3, r2
 800231c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	693a      	ldr	r2, [r7, #16]
 8002322:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	685b      	ldr	r3, [r3, #4]
 8002328:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800232a:	2201      	movs	r2, #1
 800232c:	697b      	ldr	r3, [r7, #20]
 800232e:	fa02 f303 	lsl.w	r3, r2, r3
 8002332:	43db      	mvns	r3, r3
 8002334:	693a      	ldr	r2, [r7, #16]
 8002336:	4013      	ands	r3, r2
 8002338:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	685b      	ldr	r3, [r3, #4]
 800233e:	091b      	lsrs	r3, r3, #4
 8002340:	f003 0201 	and.w	r2, r3, #1
 8002344:	697b      	ldr	r3, [r7, #20]
 8002346:	fa02 f303 	lsl.w	r3, r2, r3
 800234a:	693a      	ldr	r2, [r7, #16]
 800234c:	4313      	orrs	r3, r2
 800234e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	693a      	ldr	r2, [r7, #16]
 8002354:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	685b      	ldr	r3, [r3, #4]
 800235a:	f003 0303 	and.w	r3, r3, #3
 800235e:	2b03      	cmp	r3, #3
 8002360:	d017      	beq.n	8002392 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	68db      	ldr	r3, [r3, #12]
 8002366:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002368:	697b      	ldr	r3, [r7, #20]
 800236a:	005b      	lsls	r3, r3, #1
 800236c:	2203      	movs	r2, #3
 800236e:	fa02 f303 	lsl.w	r3, r2, r3
 8002372:	43db      	mvns	r3, r3
 8002374:	693a      	ldr	r2, [r7, #16]
 8002376:	4013      	ands	r3, r2
 8002378:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	689a      	ldr	r2, [r3, #8]
 800237e:	697b      	ldr	r3, [r7, #20]
 8002380:	005b      	lsls	r3, r3, #1
 8002382:	fa02 f303 	lsl.w	r3, r2, r3
 8002386:	693a      	ldr	r2, [r7, #16]
 8002388:	4313      	orrs	r3, r2
 800238a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	693a      	ldr	r2, [r7, #16]
 8002390:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	685b      	ldr	r3, [r3, #4]
 8002396:	f003 0303 	and.w	r3, r3, #3
 800239a:	2b02      	cmp	r3, #2
 800239c:	d123      	bne.n	80023e6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800239e:	697b      	ldr	r3, [r7, #20]
 80023a0:	08da      	lsrs	r2, r3, #3
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	3208      	adds	r2, #8
 80023a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023aa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80023ac:	697b      	ldr	r3, [r7, #20]
 80023ae:	f003 0307 	and.w	r3, r3, #7
 80023b2:	009b      	lsls	r3, r3, #2
 80023b4:	220f      	movs	r2, #15
 80023b6:	fa02 f303 	lsl.w	r3, r2, r3
 80023ba:	43db      	mvns	r3, r3
 80023bc:	693a      	ldr	r2, [r7, #16]
 80023be:	4013      	ands	r3, r2
 80023c0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	691a      	ldr	r2, [r3, #16]
 80023c6:	697b      	ldr	r3, [r7, #20]
 80023c8:	f003 0307 	and.w	r3, r3, #7
 80023cc:	009b      	lsls	r3, r3, #2
 80023ce:	fa02 f303 	lsl.w	r3, r2, r3
 80023d2:	693a      	ldr	r2, [r7, #16]
 80023d4:	4313      	orrs	r3, r2
 80023d6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80023d8:	697b      	ldr	r3, [r7, #20]
 80023da:	08da      	lsrs	r2, r3, #3
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	3208      	adds	r2, #8
 80023e0:	6939      	ldr	r1, [r7, #16]
 80023e2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80023ec:	697b      	ldr	r3, [r7, #20]
 80023ee:	005b      	lsls	r3, r3, #1
 80023f0:	2203      	movs	r2, #3
 80023f2:	fa02 f303 	lsl.w	r3, r2, r3
 80023f6:	43db      	mvns	r3, r3
 80023f8:	693a      	ldr	r2, [r7, #16]
 80023fa:	4013      	ands	r3, r2
 80023fc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	685b      	ldr	r3, [r3, #4]
 8002402:	f003 0203 	and.w	r2, r3, #3
 8002406:	697b      	ldr	r3, [r7, #20]
 8002408:	005b      	lsls	r3, r3, #1
 800240a:	fa02 f303 	lsl.w	r3, r2, r3
 800240e:	693a      	ldr	r2, [r7, #16]
 8002410:	4313      	orrs	r3, r2
 8002412:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	693a      	ldr	r2, [r7, #16]
 8002418:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	685b      	ldr	r3, [r3, #4]
 800241e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002422:	2b00      	cmp	r3, #0
 8002424:	f000 80a0 	beq.w	8002568 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002428:	4b58      	ldr	r3, [pc, #352]	; (800258c <HAL_GPIO_Init+0x2d8>)
 800242a:	699b      	ldr	r3, [r3, #24]
 800242c:	4a57      	ldr	r2, [pc, #348]	; (800258c <HAL_GPIO_Init+0x2d8>)
 800242e:	f043 0301 	orr.w	r3, r3, #1
 8002432:	6193      	str	r3, [r2, #24]
 8002434:	4b55      	ldr	r3, [pc, #340]	; (800258c <HAL_GPIO_Init+0x2d8>)
 8002436:	699b      	ldr	r3, [r3, #24]
 8002438:	f003 0301 	and.w	r3, r3, #1
 800243c:	60bb      	str	r3, [r7, #8]
 800243e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002440:	4a53      	ldr	r2, [pc, #332]	; (8002590 <HAL_GPIO_Init+0x2dc>)
 8002442:	697b      	ldr	r3, [r7, #20]
 8002444:	089b      	lsrs	r3, r3, #2
 8002446:	3302      	adds	r3, #2
 8002448:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800244c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800244e:	697b      	ldr	r3, [r7, #20]
 8002450:	f003 0303 	and.w	r3, r3, #3
 8002454:	009b      	lsls	r3, r3, #2
 8002456:	220f      	movs	r2, #15
 8002458:	fa02 f303 	lsl.w	r3, r2, r3
 800245c:	43db      	mvns	r3, r3
 800245e:	693a      	ldr	r2, [r7, #16]
 8002460:	4013      	ands	r3, r2
 8002462:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800246a:	d019      	beq.n	80024a0 <HAL_GPIO_Init+0x1ec>
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	4a49      	ldr	r2, [pc, #292]	; (8002594 <HAL_GPIO_Init+0x2e0>)
 8002470:	4293      	cmp	r3, r2
 8002472:	d013      	beq.n	800249c <HAL_GPIO_Init+0x1e8>
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	4a48      	ldr	r2, [pc, #288]	; (8002598 <HAL_GPIO_Init+0x2e4>)
 8002478:	4293      	cmp	r3, r2
 800247a:	d00d      	beq.n	8002498 <HAL_GPIO_Init+0x1e4>
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	4a47      	ldr	r2, [pc, #284]	; (800259c <HAL_GPIO_Init+0x2e8>)
 8002480:	4293      	cmp	r3, r2
 8002482:	d007      	beq.n	8002494 <HAL_GPIO_Init+0x1e0>
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	4a46      	ldr	r2, [pc, #280]	; (80025a0 <HAL_GPIO_Init+0x2ec>)
 8002488:	4293      	cmp	r3, r2
 800248a:	d101      	bne.n	8002490 <HAL_GPIO_Init+0x1dc>
 800248c:	2304      	movs	r3, #4
 800248e:	e008      	b.n	80024a2 <HAL_GPIO_Init+0x1ee>
 8002490:	2305      	movs	r3, #5
 8002492:	e006      	b.n	80024a2 <HAL_GPIO_Init+0x1ee>
 8002494:	2303      	movs	r3, #3
 8002496:	e004      	b.n	80024a2 <HAL_GPIO_Init+0x1ee>
 8002498:	2302      	movs	r3, #2
 800249a:	e002      	b.n	80024a2 <HAL_GPIO_Init+0x1ee>
 800249c:	2301      	movs	r3, #1
 800249e:	e000      	b.n	80024a2 <HAL_GPIO_Init+0x1ee>
 80024a0:	2300      	movs	r3, #0
 80024a2:	697a      	ldr	r2, [r7, #20]
 80024a4:	f002 0203 	and.w	r2, r2, #3
 80024a8:	0092      	lsls	r2, r2, #2
 80024aa:	4093      	lsls	r3, r2
 80024ac:	693a      	ldr	r2, [r7, #16]
 80024ae:	4313      	orrs	r3, r2
 80024b0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80024b2:	4937      	ldr	r1, [pc, #220]	; (8002590 <HAL_GPIO_Init+0x2dc>)
 80024b4:	697b      	ldr	r3, [r7, #20]
 80024b6:	089b      	lsrs	r3, r3, #2
 80024b8:	3302      	adds	r3, #2
 80024ba:	693a      	ldr	r2, [r7, #16]
 80024bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80024c0:	4b38      	ldr	r3, [pc, #224]	; (80025a4 <HAL_GPIO_Init+0x2f0>)
 80024c2:	689b      	ldr	r3, [r3, #8]
 80024c4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	43db      	mvns	r3, r3
 80024ca:	693a      	ldr	r2, [r7, #16]
 80024cc:	4013      	ands	r3, r2
 80024ce:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d003      	beq.n	80024e4 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80024dc:	693a      	ldr	r2, [r7, #16]
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	4313      	orrs	r3, r2
 80024e2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80024e4:	4a2f      	ldr	r2, [pc, #188]	; (80025a4 <HAL_GPIO_Init+0x2f0>)
 80024e6:	693b      	ldr	r3, [r7, #16]
 80024e8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80024ea:	4b2e      	ldr	r3, [pc, #184]	; (80025a4 <HAL_GPIO_Init+0x2f0>)
 80024ec:	68db      	ldr	r3, [r3, #12]
 80024ee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	43db      	mvns	r3, r3
 80024f4:	693a      	ldr	r2, [r7, #16]
 80024f6:	4013      	ands	r3, r2
 80024f8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	685b      	ldr	r3, [r3, #4]
 80024fe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002502:	2b00      	cmp	r3, #0
 8002504:	d003      	beq.n	800250e <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8002506:	693a      	ldr	r2, [r7, #16]
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	4313      	orrs	r3, r2
 800250c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800250e:	4a25      	ldr	r2, [pc, #148]	; (80025a4 <HAL_GPIO_Init+0x2f0>)
 8002510:	693b      	ldr	r3, [r7, #16]
 8002512:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002514:	4b23      	ldr	r3, [pc, #140]	; (80025a4 <HAL_GPIO_Init+0x2f0>)
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	43db      	mvns	r3, r3
 800251e:	693a      	ldr	r2, [r7, #16]
 8002520:	4013      	ands	r3, r2
 8002522:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800252c:	2b00      	cmp	r3, #0
 800252e:	d003      	beq.n	8002538 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8002530:	693a      	ldr	r2, [r7, #16]
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	4313      	orrs	r3, r2
 8002536:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002538:	4a1a      	ldr	r2, [pc, #104]	; (80025a4 <HAL_GPIO_Init+0x2f0>)
 800253a:	693b      	ldr	r3, [r7, #16]
 800253c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800253e:	4b19      	ldr	r3, [pc, #100]	; (80025a4 <HAL_GPIO_Init+0x2f0>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	43db      	mvns	r3, r3
 8002548:	693a      	ldr	r2, [r7, #16]
 800254a:	4013      	ands	r3, r2
 800254c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	685b      	ldr	r3, [r3, #4]
 8002552:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002556:	2b00      	cmp	r3, #0
 8002558:	d003      	beq.n	8002562 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800255a:	693a      	ldr	r2, [r7, #16]
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	4313      	orrs	r3, r2
 8002560:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002562:	4a10      	ldr	r2, [pc, #64]	; (80025a4 <HAL_GPIO_Init+0x2f0>)
 8002564:	693b      	ldr	r3, [r7, #16]
 8002566:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002568:	697b      	ldr	r3, [r7, #20]
 800256a:	3301      	adds	r3, #1
 800256c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	681a      	ldr	r2, [r3, #0]
 8002572:	697b      	ldr	r3, [r7, #20]
 8002574:	fa22 f303 	lsr.w	r3, r2, r3
 8002578:	2b00      	cmp	r3, #0
 800257a:	f47f aea3 	bne.w	80022c4 <HAL_GPIO_Init+0x10>
  }
}
 800257e:	bf00      	nop
 8002580:	bf00      	nop
 8002582:	371c      	adds	r7, #28
 8002584:	46bd      	mov	sp, r7
 8002586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258a:	4770      	bx	lr
 800258c:	40021000 	.word	0x40021000
 8002590:	40010000 	.word	0x40010000
 8002594:	48000400 	.word	0x48000400
 8002598:	48000800 	.word	0x48000800
 800259c:	48000c00 	.word	0x48000c00
 80025a0:	48001000 	.word	0x48001000
 80025a4:	40010400 	.word	0x40010400

080025a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80025a8:	b480      	push	{r7}
 80025aa:	b083      	sub	sp, #12
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
 80025b0:	460b      	mov	r3, r1
 80025b2:	807b      	strh	r3, [r7, #2]
 80025b4:	4613      	mov	r3, r2
 80025b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80025b8:	787b      	ldrb	r3, [r7, #1]
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d003      	beq.n	80025c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80025be:	887a      	ldrh	r2, [r7, #2]
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80025c4:	e002      	b.n	80025cc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80025c6:	887a      	ldrh	r2, [r7, #2]
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	629a      	str	r2, [r3, #40]	; 0x28
}
 80025cc:	bf00      	nop
 80025ce:	370c      	adds	r7, #12
 80025d0:	46bd      	mov	sp, r7
 80025d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d6:	4770      	bx	lr

080025d8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b084      	sub	sp, #16
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d101      	bne.n	80025ea <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80025e6:	2301      	movs	r3, #1
 80025e8:	e0b9      	b.n	800275e <HAL_PCD_Init+0x186>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	f893 3291 	ldrb.w	r3, [r3, #657]	; 0x291
 80025f0:	b2db      	uxtb	r3, r3
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d106      	bne.n	8002604 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	2200      	movs	r2, #0
 80025fa:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80025fe:	6878      	ldr	r0, [r7, #4]
 8002600:	f007 f988 	bl	8009914 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2203      	movs	r2, #3
 8002608:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	4618      	mov	r0, r3
 8002612:	f003 f882 	bl	800571a <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002616:	2300      	movs	r3, #0
 8002618:	73fb      	strb	r3, [r7, #15]
 800261a:	e03e      	b.n	800269a <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800261c:	7bfa      	ldrb	r2, [r7, #15]
 800261e:	6879      	ldr	r1, [r7, #4]
 8002620:	4613      	mov	r3, r2
 8002622:	009b      	lsls	r3, r3, #2
 8002624:	4413      	add	r3, r2
 8002626:	00db      	lsls	r3, r3, #3
 8002628:	440b      	add	r3, r1
 800262a:	3311      	adds	r3, #17
 800262c:	2201      	movs	r2, #1
 800262e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002630:	7bfa      	ldrb	r2, [r7, #15]
 8002632:	6879      	ldr	r1, [r7, #4]
 8002634:	4613      	mov	r3, r2
 8002636:	009b      	lsls	r3, r3, #2
 8002638:	4413      	add	r3, r2
 800263a:	00db      	lsls	r3, r3, #3
 800263c:	440b      	add	r3, r1
 800263e:	3310      	adds	r3, #16
 8002640:	7bfa      	ldrb	r2, [r7, #15]
 8002642:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002644:	7bfa      	ldrb	r2, [r7, #15]
 8002646:	6879      	ldr	r1, [r7, #4]
 8002648:	4613      	mov	r3, r2
 800264a:	009b      	lsls	r3, r3, #2
 800264c:	4413      	add	r3, r2
 800264e:	00db      	lsls	r3, r3, #3
 8002650:	440b      	add	r3, r1
 8002652:	3313      	adds	r3, #19
 8002654:	2200      	movs	r2, #0
 8002656:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002658:	7bfa      	ldrb	r2, [r7, #15]
 800265a:	6879      	ldr	r1, [r7, #4]
 800265c:	4613      	mov	r3, r2
 800265e:	009b      	lsls	r3, r3, #2
 8002660:	4413      	add	r3, r2
 8002662:	00db      	lsls	r3, r3, #3
 8002664:	440b      	add	r3, r1
 8002666:	3320      	adds	r3, #32
 8002668:	2200      	movs	r2, #0
 800266a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800266c:	7bfa      	ldrb	r2, [r7, #15]
 800266e:	6879      	ldr	r1, [r7, #4]
 8002670:	4613      	mov	r3, r2
 8002672:	009b      	lsls	r3, r3, #2
 8002674:	4413      	add	r3, r2
 8002676:	00db      	lsls	r3, r3, #3
 8002678:	440b      	add	r3, r1
 800267a:	3324      	adds	r3, #36	; 0x24
 800267c:	2200      	movs	r2, #0
 800267e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002680:	7bfb      	ldrb	r3, [r7, #15]
 8002682:	6879      	ldr	r1, [r7, #4]
 8002684:	1c5a      	adds	r2, r3, #1
 8002686:	4613      	mov	r3, r2
 8002688:	009b      	lsls	r3, r3, #2
 800268a:	4413      	add	r3, r2
 800268c:	00db      	lsls	r3, r3, #3
 800268e:	440b      	add	r3, r1
 8002690:	2200      	movs	r2, #0
 8002692:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002694:	7bfb      	ldrb	r3, [r7, #15]
 8002696:	3301      	adds	r3, #1
 8002698:	73fb      	strb	r3, [r7, #15]
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	791b      	ldrb	r3, [r3, #4]
 800269e:	7bfa      	ldrb	r2, [r7, #15]
 80026a0:	429a      	cmp	r2, r3
 80026a2:	d3bb      	bcc.n	800261c <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80026a4:	2300      	movs	r3, #0
 80026a6:	73fb      	strb	r3, [r7, #15]
 80026a8:	e044      	b.n	8002734 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80026aa:	7bfa      	ldrb	r2, [r7, #15]
 80026ac:	6879      	ldr	r1, [r7, #4]
 80026ae:	4613      	mov	r3, r2
 80026b0:	009b      	lsls	r3, r3, #2
 80026b2:	4413      	add	r3, r2
 80026b4:	00db      	lsls	r3, r3, #3
 80026b6:	440b      	add	r3, r1
 80026b8:	f203 1351 	addw	r3, r3, #337	; 0x151
 80026bc:	2200      	movs	r2, #0
 80026be:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80026c0:	7bfa      	ldrb	r2, [r7, #15]
 80026c2:	6879      	ldr	r1, [r7, #4]
 80026c4:	4613      	mov	r3, r2
 80026c6:	009b      	lsls	r3, r3, #2
 80026c8:	4413      	add	r3, r2
 80026ca:	00db      	lsls	r3, r3, #3
 80026cc:	440b      	add	r3, r1
 80026ce:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80026d2:	7bfa      	ldrb	r2, [r7, #15]
 80026d4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80026d6:	7bfa      	ldrb	r2, [r7, #15]
 80026d8:	6879      	ldr	r1, [r7, #4]
 80026da:	4613      	mov	r3, r2
 80026dc:	009b      	lsls	r3, r3, #2
 80026de:	4413      	add	r3, r2
 80026e0:	00db      	lsls	r3, r3, #3
 80026e2:	440b      	add	r3, r1
 80026e4:	f203 1353 	addw	r3, r3, #339	; 0x153
 80026e8:	2200      	movs	r2, #0
 80026ea:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80026ec:	7bfa      	ldrb	r2, [r7, #15]
 80026ee:	6879      	ldr	r1, [r7, #4]
 80026f0:	4613      	mov	r3, r2
 80026f2:	009b      	lsls	r3, r3, #2
 80026f4:	4413      	add	r3, r2
 80026f6:	00db      	lsls	r3, r3, #3
 80026f8:	440b      	add	r3, r1
 80026fa:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 80026fe:	2200      	movs	r2, #0
 8002700:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002702:	7bfa      	ldrb	r2, [r7, #15]
 8002704:	6879      	ldr	r1, [r7, #4]
 8002706:	4613      	mov	r3, r2
 8002708:	009b      	lsls	r3, r3, #2
 800270a:	4413      	add	r3, r2
 800270c:	00db      	lsls	r3, r3, #3
 800270e:	440b      	add	r3, r1
 8002710:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8002714:	2200      	movs	r2, #0
 8002716:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002718:	7bfa      	ldrb	r2, [r7, #15]
 800271a:	6879      	ldr	r1, [r7, #4]
 800271c:	4613      	mov	r3, r2
 800271e:	009b      	lsls	r3, r3, #2
 8002720:	4413      	add	r3, r2
 8002722:	00db      	lsls	r3, r3, #3
 8002724:	440b      	add	r3, r1
 8002726:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800272a:	2200      	movs	r2, #0
 800272c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800272e:	7bfb      	ldrb	r3, [r7, #15]
 8002730:	3301      	adds	r3, #1
 8002732:	73fb      	strb	r3, [r7, #15]
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	791b      	ldrb	r3, [r3, #4]
 8002738:	7bfa      	ldrb	r2, [r7, #15]
 800273a:	429a      	cmp	r2, r3
 800273c:	d3b5      	bcc.n	80026aa <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6818      	ldr	r0, [r3, #0]
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	3304      	adds	r3, #4
 8002746:	e893 0006 	ldmia.w	r3, {r1, r2}
 800274a:	f003 f801 	bl	8005750 <USB_DevInit>

  hpcd->USB_Address = 0U;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	2200      	movs	r2, #0
 8002752:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2201      	movs	r2, #1
 8002758:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291
  return HAL_OK;
 800275c:	2300      	movs	r3, #0
}
 800275e:	4618      	mov	r0, r3
 8002760:	3710      	adds	r7, #16
 8002762:	46bd      	mov	sp, r7
 8002764:	bd80      	pop	{r7, pc}

08002766 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002766:	b580      	push	{r7, lr}
 8002768:	b082      	sub	sp, #8
 800276a:	af00      	add	r7, sp, #0
 800276c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8002774:	2b01      	cmp	r3, #1
 8002776:	d101      	bne.n	800277c <HAL_PCD_Start+0x16>
 8002778:	2302      	movs	r3, #2
 800277a:	e016      	b.n	80027aa <HAL_PCD_Start+0x44>
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2201      	movs	r2, #1
 8002780:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  __HAL_PCD_ENABLE(hpcd);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4618      	mov	r0, r3
 800278a:	f002 ffaf 	bl	80056ec <USB_EnableGlobalInt>

  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 800278e:	2101      	movs	r1, #1
 8002790:	6878      	ldr	r0, [r7, #4]
 8002792:	f007 fb63 	bl	8009e5c <HAL_PCDEx_SetConnectionState>

  (void)USB_DevConnect(hpcd->Instance);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	4618      	mov	r0, r3
 800279c:	f005 fa6c 	bl	8007c78 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2200      	movs	r2, #0
 80027a4:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 80027a8:	2300      	movs	r3, #0
}
 80027aa:	4618      	mov	r0, r3
 80027ac:	3708      	adds	r7, #8
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bd80      	pop	{r7, pc}

080027b2 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80027b2:	b580      	push	{r7, lr}
 80027b4:	b084      	sub	sp, #16
 80027b6:	af00      	add	r7, sp, #0
 80027b8:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	4618      	mov	r0, r3
 80027c0:	f005 fa65 	bl	8007c8e <USB_ReadInterrupts>
 80027c4:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d003      	beq.n	80027d8 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80027d0:	6878      	ldr	r0, [r7, #4]
 80027d2:	f000 fab1 	bl	8002d38 <PCD_EP_ISR_Handler>

    return;
 80027d6:	e0bd      	b.n	8002954 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d013      	beq.n	800280a <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80027ea:	b29a      	uxth	r2, r3
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80027f4:	b292      	uxth	r2, r2
 80027f6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80027fa:	6878      	ldr	r0, [r7, #4]
 80027fc:	f007 f933 	bl	8009a66 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8002800:	2100      	movs	r1, #0
 8002802:	6878      	ldr	r0, [r7, #4]
 8002804:	f000 f8a9 	bl	800295a <HAL_PCD_SetAddress>

    return;
 8002808:	e0a4      	b.n	8002954 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002810:	2b00      	cmp	r3, #0
 8002812:	d00c      	beq.n	800282e <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800281c:	b29a      	uxth	r2, r3
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002826:	b292      	uxth	r2, r2
 8002828:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800282c:	e092      	b.n	8002954 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002834:	2b00      	cmp	r3, #0
 8002836:	d00c      	beq.n	8002852 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002840:	b29a      	uxth	r2, r3
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800284a:	b292      	uxth	r2, r2
 800284c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8002850:	e080      	b.n	8002954 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002858:	2b00      	cmp	r3, #0
 800285a:	d027      	beq.n	80028ac <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002864:	b29a      	uxth	r2, r3
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f022 0204 	bic.w	r2, r2, #4
 800286e:	b292      	uxth	r2, r2
 8002870:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800287c:	b29a      	uxth	r2, r3
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f022 0208 	bic.w	r2, r2, #8
 8002886:	b292      	uxth	r2, r2
 8002888:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800288c:	6878      	ldr	r0, [r7, #4]
 800288e:	f007 f923 	bl	8009ad8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800289a:	b29a      	uxth	r2, r3
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80028a4:	b292      	uxth	r2, r2
 80028a6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80028aa:	e053      	b.n	8002954 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d027      	beq.n	8002906 <HAL_PCD_IRQHandler+0x154>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80028be:	b29a      	uxth	r2, r3
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f042 0208 	orr.w	r2, r2, #8
 80028c8:	b292      	uxth	r2, r2
 80028ca:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80028d6:	b29a      	uxth	r2, r3
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80028e0:	b292      	uxth	r2, r2
 80028e2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80028ee:	b29a      	uxth	r2, r3
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f042 0204 	orr.w	r2, r2, #4
 80028f8:	b292      	uxth	r2, r2
 80028fa:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80028fe:	6878      	ldr	r0, [r7, #4]
 8002900:	f007 f8d0 	bl	8009aa4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8002904:	e026      	b.n	8002954 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800290c:	2b00      	cmp	r3, #0
 800290e:	d00f      	beq.n	8002930 <HAL_PCD_IRQHandler+0x17e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002918:	b29a      	uxth	r2, r3
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002922:	b292      	uxth	r2, r2
 8002924:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8002928:	6878      	ldr	r0, [r7, #4]
 800292a:	f007 f88e 	bl	8009a4a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800292e:	e011      	b.n	8002954 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002936:	2b00      	cmp	r3, #0
 8002938:	d00c      	beq.n	8002954 <HAL_PCD_IRQHandler+0x1a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002942:	b29a      	uxth	r2, r3
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800294c:	b292      	uxth	r2, r2
 800294e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8002952:	bf00      	nop
  }
}
 8002954:	3710      	adds	r7, #16
 8002956:	46bd      	mov	sp, r7
 8002958:	bd80      	pop	{r7, pc}

0800295a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800295a:	b580      	push	{r7, lr}
 800295c:	b082      	sub	sp, #8
 800295e:	af00      	add	r7, sp, #0
 8002960:	6078      	str	r0, [r7, #4]
 8002962:	460b      	mov	r3, r1
 8002964:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 800296c:	2b01      	cmp	r3, #1
 800296e:	d101      	bne.n	8002974 <HAL_PCD_SetAddress+0x1a>
 8002970:	2302      	movs	r3, #2
 8002972:	e012      	b.n	800299a <HAL_PCD_SetAddress+0x40>
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2201      	movs	r2, #1
 8002978:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  hpcd->USB_Address = address;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	78fa      	ldrb	r2, [r7, #3]
 8002980:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	78fa      	ldrb	r2, [r7, #3]
 8002988:	4611      	mov	r1, r2
 800298a:	4618      	mov	r0, r3
 800298c:	f005 f960 	bl	8007c50 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2200      	movs	r2, #0
 8002994:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 8002998:	2300      	movs	r3, #0
}
 800299a:	4618      	mov	r0, r3
 800299c:	3708      	adds	r7, #8
 800299e:	46bd      	mov	sp, r7
 80029a0:	bd80      	pop	{r7, pc}

080029a2 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80029a2:	b580      	push	{r7, lr}
 80029a4:	b084      	sub	sp, #16
 80029a6:	af00      	add	r7, sp, #0
 80029a8:	6078      	str	r0, [r7, #4]
 80029aa:	4608      	mov	r0, r1
 80029ac:	4611      	mov	r1, r2
 80029ae:	461a      	mov	r2, r3
 80029b0:	4603      	mov	r3, r0
 80029b2:	70fb      	strb	r3, [r7, #3]
 80029b4:	460b      	mov	r3, r1
 80029b6:	803b      	strh	r3, [r7, #0]
 80029b8:	4613      	mov	r3, r2
 80029ba:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80029bc:	2300      	movs	r3, #0
 80029be:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80029c0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	da0e      	bge.n	80029e6 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80029c8:	78fb      	ldrb	r3, [r7, #3]
 80029ca:	f003 0207 	and.w	r2, r3, #7
 80029ce:	4613      	mov	r3, r2
 80029d0:	009b      	lsls	r3, r3, #2
 80029d2:	4413      	add	r3, r2
 80029d4:	00db      	lsls	r3, r3, #3
 80029d6:	3310      	adds	r3, #16
 80029d8:	687a      	ldr	r2, [r7, #4]
 80029da:	4413      	add	r3, r2
 80029dc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	2201      	movs	r2, #1
 80029e2:	705a      	strb	r2, [r3, #1]
 80029e4:	e00e      	b.n	8002a04 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80029e6:	78fb      	ldrb	r3, [r7, #3]
 80029e8:	f003 0207 	and.w	r2, r3, #7
 80029ec:	4613      	mov	r3, r2
 80029ee:	009b      	lsls	r3, r3, #2
 80029f0:	4413      	add	r3, r2
 80029f2:	00db      	lsls	r3, r3, #3
 80029f4:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80029f8:	687a      	ldr	r2, [r7, #4]
 80029fa:	4413      	add	r3, r2
 80029fc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	2200      	movs	r2, #0
 8002a02:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002a04:	78fb      	ldrb	r3, [r7, #3]
 8002a06:	f003 0307 	and.w	r3, r3, #7
 8002a0a:	b2da      	uxtb	r2, r3
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002a10:	883a      	ldrh	r2, [r7, #0]
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	78ba      	ldrb	r2, [r7, #2]
 8002a1a:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002a1c:	78bb      	ldrb	r3, [r7, #2]
 8002a1e:	2b02      	cmp	r3, #2
 8002a20:	d102      	bne.n	8002a28 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	2200      	movs	r2, #0
 8002a26:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8002a2e:	2b01      	cmp	r3, #1
 8002a30:	d101      	bne.n	8002a36 <HAL_PCD_EP_Open+0x94>
 8002a32:	2302      	movs	r3, #2
 8002a34:	e00e      	b.n	8002a54 <HAL_PCD_EP_Open+0xb2>
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	2201      	movs	r2, #1
 8002a3a:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	68f9      	ldr	r1, [r7, #12]
 8002a44:	4618      	mov	r0, r3
 8002a46:	f002 fea1 	bl	800578c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return ret;
 8002a52:	7afb      	ldrb	r3, [r7, #11]
}
 8002a54:	4618      	mov	r0, r3
 8002a56:	3710      	adds	r7, #16
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	bd80      	pop	{r7, pc}

08002a5c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b084      	sub	sp, #16
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
 8002a64:	460b      	mov	r3, r1
 8002a66:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002a68:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	da0e      	bge.n	8002a8e <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002a70:	78fb      	ldrb	r3, [r7, #3]
 8002a72:	f003 0207 	and.w	r2, r3, #7
 8002a76:	4613      	mov	r3, r2
 8002a78:	009b      	lsls	r3, r3, #2
 8002a7a:	4413      	add	r3, r2
 8002a7c:	00db      	lsls	r3, r3, #3
 8002a7e:	3310      	adds	r3, #16
 8002a80:	687a      	ldr	r2, [r7, #4]
 8002a82:	4413      	add	r3, r2
 8002a84:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	2201      	movs	r2, #1
 8002a8a:	705a      	strb	r2, [r3, #1]
 8002a8c:	e00e      	b.n	8002aac <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002a8e:	78fb      	ldrb	r3, [r7, #3]
 8002a90:	f003 0207 	and.w	r2, r3, #7
 8002a94:	4613      	mov	r3, r2
 8002a96:	009b      	lsls	r3, r3, #2
 8002a98:	4413      	add	r3, r2
 8002a9a:	00db      	lsls	r3, r3, #3
 8002a9c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8002aa0:	687a      	ldr	r2, [r7, #4]
 8002aa2:	4413      	add	r3, r2
 8002aa4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8002aac:	78fb      	ldrb	r3, [r7, #3]
 8002aae:	f003 0307 	and.w	r3, r3, #7
 8002ab2:	b2da      	uxtb	r2, r3
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8002abe:	2b01      	cmp	r3, #1
 8002ac0:	d101      	bne.n	8002ac6 <HAL_PCD_EP_Close+0x6a>
 8002ac2:	2302      	movs	r3, #2
 8002ac4:	e00e      	b.n	8002ae4 <HAL_PCD_EP_Close+0x88>
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	2201      	movs	r2, #1
 8002aca:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	68f9      	ldr	r1, [r7, #12]
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	f003 fa1d 	bl	8005f14 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	2200      	movs	r2, #0
 8002ade:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  return HAL_OK;
 8002ae2:	2300      	movs	r3, #0
}
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	3710      	adds	r7, #16
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	bd80      	pop	{r7, pc}

08002aec <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b086      	sub	sp, #24
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	60f8      	str	r0, [r7, #12]
 8002af4:	607a      	str	r2, [r7, #4]
 8002af6:	603b      	str	r3, [r7, #0]
 8002af8:	460b      	mov	r3, r1
 8002afa:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002afc:	7afb      	ldrb	r3, [r7, #11]
 8002afe:	f003 0207 	and.w	r2, r3, #7
 8002b02:	4613      	mov	r3, r2
 8002b04:	009b      	lsls	r3, r3, #2
 8002b06:	4413      	add	r3, r2
 8002b08:	00db      	lsls	r3, r3, #3
 8002b0a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8002b0e:	68fa      	ldr	r2, [r7, #12]
 8002b10:	4413      	add	r3, r2
 8002b12:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002b14:	697b      	ldr	r3, [r7, #20]
 8002b16:	687a      	ldr	r2, [r7, #4]
 8002b18:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002b1a:	697b      	ldr	r3, [r7, #20]
 8002b1c:	683a      	ldr	r2, [r7, #0]
 8002b1e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002b20:	697b      	ldr	r3, [r7, #20]
 8002b22:	2200      	movs	r2, #0
 8002b24:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8002b26:	697b      	ldr	r3, [r7, #20]
 8002b28:	2200      	movs	r2, #0
 8002b2a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002b2c:	7afb      	ldrb	r3, [r7, #11]
 8002b2e:	f003 0307 	and.w	r3, r3, #7
 8002b32:	b2da      	uxtb	r2, r3
 8002b34:	697b      	ldr	r3, [r7, #20]
 8002b36:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	6979      	ldr	r1, [r7, #20]
 8002b3e:	4618      	mov	r0, r3
 8002b40:	f003 fbd5 	bl	80062ee <USB_EPStartXfer>

  return HAL_OK;
 8002b44:	2300      	movs	r3, #0
}
 8002b46:	4618      	mov	r0, r3
 8002b48:	3718      	adds	r7, #24
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bd80      	pop	{r7, pc}

08002b4e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8002b4e:	b480      	push	{r7}
 8002b50:	b083      	sub	sp, #12
 8002b52:	af00      	add	r7, sp, #0
 8002b54:	6078      	str	r0, [r7, #4]
 8002b56:	460b      	mov	r3, r1
 8002b58:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002b5a:	78fb      	ldrb	r3, [r7, #3]
 8002b5c:	f003 0207 	and.w	r2, r3, #7
 8002b60:	6879      	ldr	r1, [r7, #4]
 8002b62:	4613      	mov	r3, r2
 8002b64:	009b      	lsls	r3, r3, #2
 8002b66:	4413      	add	r3, r2
 8002b68:	00db      	lsls	r3, r3, #3
 8002b6a:	440b      	add	r3, r1
 8002b6c:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 8002b70:	681b      	ldr	r3, [r3, #0]
}
 8002b72:	4618      	mov	r0, r3
 8002b74:	370c      	adds	r7, #12
 8002b76:	46bd      	mov	sp, r7
 8002b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7c:	4770      	bx	lr

08002b7e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002b7e:	b580      	push	{r7, lr}
 8002b80:	b086      	sub	sp, #24
 8002b82:	af00      	add	r7, sp, #0
 8002b84:	60f8      	str	r0, [r7, #12]
 8002b86:	607a      	str	r2, [r7, #4]
 8002b88:	603b      	str	r3, [r7, #0]
 8002b8a:	460b      	mov	r3, r1
 8002b8c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002b8e:	7afb      	ldrb	r3, [r7, #11]
 8002b90:	f003 0207 	and.w	r2, r3, #7
 8002b94:	4613      	mov	r3, r2
 8002b96:	009b      	lsls	r3, r3, #2
 8002b98:	4413      	add	r3, r2
 8002b9a:	00db      	lsls	r3, r3, #3
 8002b9c:	3310      	adds	r3, #16
 8002b9e:	68fa      	ldr	r2, [r7, #12]
 8002ba0:	4413      	add	r3, r2
 8002ba2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002ba4:	697b      	ldr	r3, [r7, #20]
 8002ba6:	687a      	ldr	r2, [r7, #4]
 8002ba8:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002baa:	697b      	ldr	r3, [r7, #20]
 8002bac:	683a      	ldr	r2, [r7, #0]
 8002bae:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8002bb0:	697b      	ldr	r3, [r7, #20]
 8002bb2:	2201      	movs	r2, #1
 8002bb4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8002bb8:	697b      	ldr	r3, [r7, #20]
 8002bba:	683a      	ldr	r2, [r7, #0]
 8002bbc:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8002bbe:	697b      	ldr	r3, [r7, #20]
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8002bc4:	697b      	ldr	r3, [r7, #20]
 8002bc6:	2201      	movs	r2, #1
 8002bc8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002bca:	7afb      	ldrb	r3, [r7, #11]
 8002bcc:	f003 0307 	and.w	r3, r3, #7
 8002bd0:	b2da      	uxtb	r2, r3
 8002bd2:	697b      	ldr	r3, [r7, #20]
 8002bd4:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	6979      	ldr	r1, [r7, #20]
 8002bdc:	4618      	mov	r0, r3
 8002bde:	f003 fb86 	bl	80062ee <USB_EPStartXfer>

  return HAL_OK;
 8002be2:	2300      	movs	r3, #0
}
 8002be4:	4618      	mov	r0, r3
 8002be6:	3718      	adds	r7, #24
 8002be8:	46bd      	mov	sp, r7
 8002bea:	bd80      	pop	{r7, pc}

08002bec <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b084      	sub	sp, #16
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
 8002bf4:	460b      	mov	r3, r1
 8002bf6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002bf8:	78fb      	ldrb	r3, [r7, #3]
 8002bfa:	f003 0307 	and.w	r3, r3, #7
 8002bfe:	687a      	ldr	r2, [r7, #4]
 8002c00:	7912      	ldrb	r2, [r2, #4]
 8002c02:	4293      	cmp	r3, r2
 8002c04:	d901      	bls.n	8002c0a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002c06:	2301      	movs	r3, #1
 8002c08:	e03e      	b.n	8002c88 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002c0a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	da0e      	bge.n	8002c30 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002c12:	78fb      	ldrb	r3, [r7, #3]
 8002c14:	f003 0207 	and.w	r2, r3, #7
 8002c18:	4613      	mov	r3, r2
 8002c1a:	009b      	lsls	r3, r3, #2
 8002c1c:	4413      	add	r3, r2
 8002c1e:	00db      	lsls	r3, r3, #3
 8002c20:	3310      	adds	r3, #16
 8002c22:	687a      	ldr	r2, [r7, #4]
 8002c24:	4413      	add	r3, r2
 8002c26:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	2201      	movs	r2, #1
 8002c2c:	705a      	strb	r2, [r3, #1]
 8002c2e:	e00c      	b.n	8002c4a <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002c30:	78fa      	ldrb	r2, [r7, #3]
 8002c32:	4613      	mov	r3, r2
 8002c34:	009b      	lsls	r3, r3, #2
 8002c36:	4413      	add	r3, r2
 8002c38:	00db      	lsls	r3, r3, #3
 8002c3a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8002c3e:	687a      	ldr	r2, [r7, #4]
 8002c40:	4413      	add	r3, r2
 8002c42:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	2200      	movs	r2, #0
 8002c48:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	2201      	movs	r2, #1
 8002c4e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002c50:	78fb      	ldrb	r3, [r7, #3]
 8002c52:	f003 0307 	and.w	r3, r3, #7
 8002c56:	b2da      	uxtb	r2, r3
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8002c62:	2b01      	cmp	r3, #1
 8002c64:	d101      	bne.n	8002c6a <HAL_PCD_EP_SetStall+0x7e>
 8002c66:	2302      	movs	r3, #2
 8002c68:	e00e      	b.n	8002c88 <HAL_PCD_EP_SetStall+0x9c>
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	2201      	movs	r2, #1
 8002c6e:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	68f9      	ldr	r1, [r7, #12]
 8002c78:	4618      	mov	r0, r3
 8002c7a:	f004 feea 	bl	8007a52 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	2200      	movs	r2, #0
 8002c82:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 8002c86:	2300      	movs	r3, #0
}
 8002c88:	4618      	mov	r0, r3
 8002c8a:	3710      	adds	r7, #16
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	bd80      	pop	{r7, pc}

08002c90 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b084      	sub	sp, #16
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
 8002c98:	460b      	mov	r3, r1
 8002c9a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002c9c:	78fb      	ldrb	r3, [r7, #3]
 8002c9e:	f003 030f 	and.w	r3, r3, #15
 8002ca2:	687a      	ldr	r2, [r7, #4]
 8002ca4:	7912      	ldrb	r2, [r2, #4]
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d901      	bls.n	8002cae <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002caa:	2301      	movs	r3, #1
 8002cac:	e040      	b.n	8002d30 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002cae:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	da0e      	bge.n	8002cd4 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002cb6:	78fb      	ldrb	r3, [r7, #3]
 8002cb8:	f003 0207 	and.w	r2, r3, #7
 8002cbc:	4613      	mov	r3, r2
 8002cbe:	009b      	lsls	r3, r3, #2
 8002cc0:	4413      	add	r3, r2
 8002cc2:	00db      	lsls	r3, r3, #3
 8002cc4:	3310      	adds	r3, #16
 8002cc6:	687a      	ldr	r2, [r7, #4]
 8002cc8:	4413      	add	r3, r2
 8002cca:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	2201      	movs	r2, #1
 8002cd0:	705a      	strb	r2, [r3, #1]
 8002cd2:	e00e      	b.n	8002cf2 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002cd4:	78fb      	ldrb	r3, [r7, #3]
 8002cd6:	f003 0207 	and.w	r2, r3, #7
 8002cda:	4613      	mov	r3, r2
 8002cdc:	009b      	lsls	r3, r3, #2
 8002cde:	4413      	add	r3, r2
 8002ce0:	00db      	lsls	r3, r3, #3
 8002ce2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8002ce6:	687a      	ldr	r2, [r7, #4]
 8002ce8:	4413      	add	r3, r2
 8002cea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	2200      	movs	r2, #0
 8002cf0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002cf8:	78fb      	ldrb	r3, [r7, #3]
 8002cfa:	f003 0307 	and.w	r3, r3, #7
 8002cfe:	b2da      	uxtb	r2, r3
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8002d0a:	2b01      	cmp	r3, #1
 8002d0c:	d101      	bne.n	8002d12 <HAL_PCD_EP_ClrStall+0x82>
 8002d0e:	2302      	movs	r3, #2
 8002d10:	e00e      	b.n	8002d30 <HAL_PCD_EP_ClrStall+0xa0>
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	2201      	movs	r2, #1
 8002d16:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	68f9      	ldr	r1, [r7, #12]
 8002d20:	4618      	mov	r0, r3
 8002d22:	f004 fee7 	bl	8007af4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	2200      	movs	r2, #0
 8002d2a:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 8002d2e:	2300      	movs	r3, #0
}
 8002d30:	4618      	mov	r0, r3
 8002d32:	3710      	adds	r7, #16
 8002d34:	46bd      	mov	sp, r7
 8002d36:	bd80      	pop	{r7, pc}

08002d38 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b096      	sub	sp, #88	; 0x58
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002d40:	e3bc      	b.n	80034bc <PCD_EP_ISR_Handler+0x784>
  {
    wIstr = hpcd->Instance->ISTR;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002d4a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8002d4e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002d52:	b2db      	uxtb	r3, r3
 8002d54:	f003 030f 	and.w	r3, r3, #15
 8002d58:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

    if (epindex == 0U)
 8002d5c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	f040 8176 	bne.w	8003052 <PCD_EP_ISR_Handler+0x31a>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8002d66:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002d6a:	f003 0310 	and.w	r3, r3, #16
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d14f      	bne.n	8002e12 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	881b      	ldrh	r3, [r3, #0]
 8002d78:	b29b      	uxth	r3, r3
 8002d7a:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002d7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d82:	81fb      	strh	r3, [r7, #14]
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681a      	ldr	r2, [r3, #0]
 8002d88:	89fb      	ldrh	r3, [r7, #14]
 8002d8a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002d8e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002d92:	b29b      	uxth	r3, r3
 8002d94:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	3310      	adds	r3, #16
 8002d9a:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002da4:	b29b      	uxth	r3, r3
 8002da6:	461a      	mov	r2, r3
 8002da8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002daa:	781b      	ldrb	r3, [r3, #0]
 8002dac:	00db      	lsls	r3, r3, #3
 8002dae:	4413      	add	r3, r2
 8002db0:	3302      	adds	r3, #2
 8002db2:	005b      	lsls	r3, r3, #1
 8002db4:	687a      	ldr	r2, [r7, #4]
 8002db6:	6812      	ldr	r2, [r2, #0]
 8002db8:	4413      	add	r3, r2
 8002dba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002dbe:	881b      	ldrh	r3, [r3, #0]
 8002dc0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002dc4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002dc6:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8002dc8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002dca:	695a      	ldr	r2, [r3, #20]
 8002dcc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002dce:	69db      	ldr	r3, [r3, #28]
 8002dd0:	441a      	add	r2, r3
 8002dd2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002dd4:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8002dd6:	2100      	movs	r1, #0
 8002dd8:	6878      	ldr	r0, [r7, #4]
 8002dda:	f006 fe1c 	bl	8009a16 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	7b1b      	ldrb	r3, [r3, #12]
 8002de2:	b2db      	uxtb	r3, r3
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	f000 8369 	beq.w	80034bc <PCD_EP_ISR_Handler+0x784>
 8002dea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002dec:	699b      	ldr	r3, [r3, #24]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	f040 8364 	bne.w	80034bc <PCD_EP_ISR_Handler+0x784>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	7b1b      	ldrb	r3, [r3, #12]
 8002df8:	b2db      	uxtb	r3, r3
 8002dfa:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002dfe:	b2da      	uxtb	r2, r3
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	b292      	uxth	r2, r2
 8002e06:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	731a      	strb	r2, [r3, #12]
 8002e10:	e354      	b.n	80034bc <PCD_EP_ISR_Handler+0x784>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8002e18:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	881b      	ldrh	r3, [r3, #0]
 8002e20:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8002e24:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002e28:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d034      	beq.n	8002e9a <PCD_EP_ISR_Handler+0x162>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e38:	b29b      	uxth	r3, r3
 8002e3a:	461a      	mov	r2, r3
 8002e3c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002e3e:	781b      	ldrb	r3, [r3, #0]
 8002e40:	00db      	lsls	r3, r3, #3
 8002e42:	4413      	add	r3, r2
 8002e44:	3306      	adds	r3, #6
 8002e46:	005b      	lsls	r3, r3, #1
 8002e48:	687a      	ldr	r2, [r7, #4]
 8002e4a:	6812      	ldr	r2, [r2, #0]
 8002e4c:	4413      	add	r3, r2
 8002e4e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002e52:	881b      	ldrh	r3, [r3, #0]
 8002e54:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002e58:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002e5a:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6818      	ldr	r0, [r3, #0]
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	f503 7126 	add.w	r1, r3, #664	; 0x298
 8002e66:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002e68:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8002e6a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002e6c:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002e6e:	b29b      	uxth	r3, r3
 8002e70:	f004 ff63 	bl	8007d3a <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	881b      	ldrh	r3, [r3, #0]
 8002e7a:	b29a      	uxth	r2, r3
 8002e7c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002e80:	4013      	ands	r3, r2
 8002e82:	823b      	strh	r3, [r7, #16]
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	8a3a      	ldrh	r2, [r7, #16]
 8002e8a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002e8e:	b292      	uxth	r2, r2
 8002e90:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8002e92:	6878      	ldr	r0, [r7, #4]
 8002e94:	f006 fd92 	bl	80099bc <HAL_PCD_SetupStageCallback>
 8002e98:	e310      	b.n	80034bc <PCD_EP_ISR_Handler+0x784>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002e9a:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	f280 830c 	bge.w	80034bc <PCD_EP_ISR_Handler+0x784>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	881b      	ldrh	r3, [r3, #0]
 8002eaa:	b29a      	uxth	r2, r3
 8002eac:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002eb0:	4013      	ands	r3, r2
 8002eb2:	83fb      	strh	r3, [r7, #30]
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	8bfa      	ldrh	r2, [r7, #30]
 8002eba:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002ebe:	b292      	uxth	r2, r2
 8002ec0:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002eca:	b29b      	uxth	r3, r3
 8002ecc:	461a      	mov	r2, r3
 8002ece:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ed0:	781b      	ldrb	r3, [r3, #0]
 8002ed2:	00db      	lsls	r3, r3, #3
 8002ed4:	4413      	add	r3, r2
 8002ed6:	3306      	adds	r3, #6
 8002ed8:	005b      	lsls	r3, r3, #1
 8002eda:	687a      	ldr	r2, [r7, #4]
 8002edc:	6812      	ldr	r2, [r2, #0]
 8002ede:	4413      	add	r3, r2
 8002ee0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002ee4:	881b      	ldrh	r3, [r3, #0]
 8002ee6:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002eea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002eec:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8002eee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ef0:	69db      	ldr	r3, [r3, #28]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d019      	beq.n	8002f2a <PCD_EP_ISR_Handler+0x1f2>
 8002ef6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ef8:	695b      	ldr	r3, [r3, #20]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d015      	beq.n	8002f2a <PCD_EP_ISR_Handler+0x1f2>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6818      	ldr	r0, [r3, #0]
 8002f02:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002f04:	6959      	ldr	r1, [r3, #20]
 8002f06:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002f08:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8002f0a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002f0c:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002f0e:	b29b      	uxth	r3, r3
 8002f10:	f004 ff13 	bl	8007d3a <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8002f14:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002f16:	695a      	ldr	r2, [r3, #20]
 8002f18:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002f1a:	69db      	ldr	r3, [r3, #28]
 8002f1c:	441a      	add	r2, r3
 8002f1e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002f20:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002f22:	2100      	movs	r1, #0
 8002f24:	6878      	ldr	r0, [r7, #4]
 8002f26:	f006 fd5b 	bl	80099e0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	881b      	ldrh	r3, [r3, #0]
 8002f30:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8002f34:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002f38:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	f040 82bd 	bne.w	80034bc <PCD_EP_ISR_Handler+0x784>
 8002f42:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002f46:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8002f4a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002f4e:	f000 82b5 	beq.w	80034bc <PCD_EP_ISR_Handler+0x784>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	61bb      	str	r3, [r7, #24]
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f60:	b29b      	uxth	r3, r3
 8002f62:	461a      	mov	r2, r3
 8002f64:	69bb      	ldr	r3, [r7, #24]
 8002f66:	4413      	add	r3, r2
 8002f68:	61bb      	str	r3, [r7, #24]
 8002f6a:	69bb      	ldr	r3, [r7, #24]
 8002f6c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002f70:	617b      	str	r3, [r7, #20]
 8002f72:	697b      	ldr	r3, [r7, #20]
 8002f74:	881b      	ldrh	r3, [r3, #0]
 8002f76:	b29b      	uxth	r3, r3
 8002f78:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002f7c:	b29a      	uxth	r2, r3
 8002f7e:	697b      	ldr	r3, [r7, #20]
 8002f80:	801a      	strh	r2, [r3, #0]
 8002f82:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002f84:	691b      	ldr	r3, [r3, #16]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d10a      	bne.n	8002fa0 <PCD_EP_ISR_Handler+0x268>
 8002f8a:	697b      	ldr	r3, [r7, #20]
 8002f8c:	881b      	ldrh	r3, [r3, #0]
 8002f8e:	b29b      	uxth	r3, r3
 8002f90:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002f94:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002f98:	b29a      	uxth	r2, r3
 8002f9a:	697b      	ldr	r3, [r7, #20]
 8002f9c:	801a      	strh	r2, [r3, #0]
 8002f9e:	e039      	b.n	8003014 <PCD_EP_ISR_Handler+0x2dc>
 8002fa0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002fa2:	691b      	ldr	r3, [r3, #16]
 8002fa4:	2b3e      	cmp	r3, #62	; 0x3e
 8002fa6:	d818      	bhi.n	8002fda <PCD_EP_ISR_Handler+0x2a2>
 8002fa8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002faa:	691b      	ldr	r3, [r3, #16]
 8002fac:	085b      	lsrs	r3, r3, #1
 8002fae:	647b      	str	r3, [r7, #68]	; 0x44
 8002fb0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002fb2:	691b      	ldr	r3, [r3, #16]
 8002fb4:	f003 0301 	and.w	r3, r3, #1
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d002      	beq.n	8002fc2 <PCD_EP_ISR_Handler+0x28a>
 8002fbc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002fbe:	3301      	adds	r3, #1
 8002fc0:	647b      	str	r3, [r7, #68]	; 0x44
 8002fc2:	697b      	ldr	r3, [r7, #20]
 8002fc4:	881b      	ldrh	r3, [r3, #0]
 8002fc6:	b29a      	uxth	r2, r3
 8002fc8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002fca:	b29b      	uxth	r3, r3
 8002fcc:	029b      	lsls	r3, r3, #10
 8002fce:	b29b      	uxth	r3, r3
 8002fd0:	4313      	orrs	r3, r2
 8002fd2:	b29a      	uxth	r2, r3
 8002fd4:	697b      	ldr	r3, [r7, #20]
 8002fd6:	801a      	strh	r2, [r3, #0]
 8002fd8:	e01c      	b.n	8003014 <PCD_EP_ISR_Handler+0x2dc>
 8002fda:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002fdc:	691b      	ldr	r3, [r3, #16]
 8002fde:	095b      	lsrs	r3, r3, #5
 8002fe0:	647b      	str	r3, [r7, #68]	; 0x44
 8002fe2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002fe4:	691b      	ldr	r3, [r3, #16]
 8002fe6:	f003 031f 	and.w	r3, r3, #31
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d102      	bne.n	8002ff4 <PCD_EP_ISR_Handler+0x2bc>
 8002fee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ff0:	3b01      	subs	r3, #1
 8002ff2:	647b      	str	r3, [r7, #68]	; 0x44
 8002ff4:	697b      	ldr	r3, [r7, #20]
 8002ff6:	881b      	ldrh	r3, [r3, #0]
 8002ff8:	b29a      	uxth	r2, r3
 8002ffa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ffc:	b29b      	uxth	r3, r3
 8002ffe:	029b      	lsls	r3, r3, #10
 8003000:	b29b      	uxth	r3, r3
 8003002:	4313      	orrs	r3, r2
 8003004:	b29b      	uxth	r3, r3
 8003006:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800300a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800300e:	b29a      	uxth	r2, r3
 8003010:	697b      	ldr	r3, [r7, #20]
 8003012:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	881b      	ldrh	r3, [r3, #0]
 800301a:	b29b      	uxth	r3, r3
 800301c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003020:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003024:	827b      	strh	r3, [r7, #18]
 8003026:	8a7b      	ldrh	r3, [r7, #18]
 8003028:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800302c:	827b      	strh	r3, [r7, #18]
 800302e:	8a7b      	ldrh	r3, [r7, #18]
 8003030:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003034:	827b      	strh	r3, [r7, #18]
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681a      	ldr	r2, [r3, #0]
 800303a:	8a7b      	ldrh	r3, [r7, #18]
 800303c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003040:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003044:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003048:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800304c:	b29b      	uxth	r3, r3
 800304e:	8013      	strh	r3, [r2, #0]
 8003050:	e234      	b.n	80034bc <PCD_EP_ISR_Handler+0x784>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	461a      	mov	r2, r3
 8003058:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800305c:	009b      	lsls	r3, r3, #2
 800305e:	4413      	add	r3, r2
 8003060:	881b      	ldrh	r3, [r3, #0]
 8003062:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003066:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 800306a:	2b00      	cmp	r3, #0
 800306c:	f280 80fc 	bge.w	8003268 <PCD_EP_ISR_Handler+0x530>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	461a      	mov	r2, r3
 8003076:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800307a:	009b      	lsls	r3, r3, #2
 800307c:	4413      	add	r3, r2
 800307e:	881b      	ldrh	r3, [r3, #0]
 8003080:	b29a      	uxth	r2, r3
 8003082:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003086:	4013      	ands	r3, r2
 8003088:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	461a      	mov	r2, r3
 8003092:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8003096:	009b      	lsls	r3, r3, #2
 8003098:	4413      	add	r3, r2
 800309a:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 800309e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80030a2:	b292      	uxth	r2, r2
 80030a4:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80030a6:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 80030aa:	4613      	mov	r3, r2
 80030ac:	009b      	lsls	r3, r3, #2
 80030ae:	4413      	add	r3, r2
 80030b0:	00db      	lsls	r3, r3, #3
 80030b2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80030b6:	687a      	ldr	r2, [r7, #4]
 80030b8:	4413      	add	r3, r2
 80030ba:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80030bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80030be:	7b1b      	ldrb	r3, [r3, #12]
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d125      	bne.n	8003110 <PCD_EP_ISR_Handler+0x3d8>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80030cc:	b29b      	uxth	r3, r3
 80030ce:	461a      	mov	r2, r3
 80030d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80030d2:	781b      	ldrb	r3, [r3, #0]
 80030d4:	00db      	lsls	r3, r3, #3
 80030d6:	4413      	add	r3, r2
 80030d8:	3306      	adds	r3, #6
 80030da:	005b      	lsls	r3, r3, #1
 80030dc:	687a      	ldr	r2, [r7, #4]
 80030de:	6812      	ldr	r2, [r2, #0]
 80030e0:	4413      	add	r3, r2
 80030e2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80030e6:	881b      	ldrh	r3, [r3, #0]
 80030e8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80030ec:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 80030f0:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	f000 8092 	beq.w	800321e <PCD_EP_ISR_Handler+0x4e6>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6818      	ldr	r0, [r3, #0]
 80030fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003100:	6959      	ldr	r1, [r3, #20]
 8003102:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003104:	88da      	ldrh	r2, [r3, #6]
 8003106:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800310a:	f004 fe16 	bl	8007d3a <USB_ReadPMA>
 800310e:	e086      	b.n	800321e <PCD_EP_ISR_Handler+0x4e6>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8003110:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003112:	78db      	ldrb	r3, [r3, #3]
 8003114:	2b02      	cmp	r3, #2
 8003116:	d10a      	bne.n	800312e <PCD_EP_ISR_Handler+0x3f6>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8003118:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800311c:	461a      	mov	r2, r3
 800311e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003120:	6878      	ldr	r0, [r7, #4]
 8003122:	f000 f9d9 	bl	80034d8 <HAL_PCD_EP_DB_Receive>
 8003126:	4603      	mov	r3, r0
 8003128:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 800312c:	e077      	b.n	800321e <PCD_EP_ISR_Handler+0x4e6>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	461a      	mov	r2, r3
 8003134:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003136:	781b      	ldrb	r3, [r3, #0]
 8003138:	009b      	lsls	r3, r3, #2
 800313a:	4413      	add	r3, r2
 800313c:	881b      	ldrh	r3, [r3, #0]
 800313e:	b29b      	uxth	r3, r3
 8003140:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003144:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003148:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	461a      	mov	r2, r3
 8003152:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003154:	781b      	ldrb	r3, [r3, #0]
 8003156:	009b      	lsls	r3, r3, #2
 8003158:	441a      	add	r2, r3
 800315a:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800315e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003162:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003166:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800316a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800316e:	b29b      	uxth	r3, r3
 8003170:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	461a      	mov	r2, r3
 8003178:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800317a:	781b      	ldrb	r3, [r3, #0]
 800317c:	009b      	lsls	r3, r3, #2
 800317e:	4413      	add	r3, r2
 8003180:	881b      	ldrh	r3, [r3, #0]
 8003182:	b29b      	uxth	r3, r3
 8003184:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003188:	2b00      	cmp	r3, #0
 800318a:	d024      	beq.n	80031d6 <PCD_EP_ISR_Handler+0x49e>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003194:	b29b      	uxth	r3, r3
 8003196:	461a      	mov	r2, r3
 8003198:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800319a:	781b      	ldrb	r3, [r3, #0]
 800319c:	00db      	lsls	r3, r3, #3
 800319e:	4413      	add	r3, r2
 80031a0:	3302      	adds	r3, #2
 80031a2:	005b      	lsls	r3, r3, #1
 80031a4:	687a      	ldr	r2, [r7, #4]
 80031a6:	6812      	ldr	r2, [r2, #0]
 80031a8:	4413      	add	r3, r2
 80031aa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80031ae:	881b      	ldrh	r3, [r3, #0]
 80031b0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80031b4:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 80031b8:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d02e      	beq.n	800321e <PCD_EP_ISR_Handler+0x4e6>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6818      	ldr	r0, [r3, #0]
 80031c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80031c6:	6959      	ldr	r1, [r3, #20]
 80031c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80031ca:	891a      	ldrh	r2, [r3, #8]
 80031cc:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80031d0:	f004 fdb3 	bl	8007d3a <USB_ReadPMA>
 80031d4:	e023      	b.n	800321e <PCD_EP_ISR_Handler+0x4e6>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80031de:	b29b      	uxth	r3, r3
 80031e0:	461a      	mov	r2, r3
 80031e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80031e4:	781b      	ldrb	r3, [r3, #0]
 80031e6:	00db      	lsls	r3, r3, #3
 80031e8:	4413      	add	r3, r2
 80031ea:	3306      	adds	r3, #6
 80031ec:	005b      	lsls	r3, r3, #1
 80031ee:	687a      	ldr	r2, [r7, #4]
 80031f0:	6812      	ldr	r2, [r2, #0]
 80031f2:	4413      	add	r3, r2
 80031f4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80031f8:	881b      	ldrh	r3, [r3, #0]
 80031fa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80031fe:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8003202:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003206:	2b00      	cmp	r3, #0
 8003208:	d009      	beq.n	800321e <PCD_EP_ISR_Handler+0x4e6>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6818      	ldr	r0, [r3, #0]
 800320e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003210:	6959      	ldr	r1, [r3, #20]
 8003212:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003214:	895a      	ldrh	r2, [r3, #10]
 8003216:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800321a:	f004 fd8e 	bl	8007d3a <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800321e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003220:	69da      	ldr	r2, [r3, #28]
 8003222:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003226:	441a      	add	r2, r3
 8003228:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800322a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800322c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800322e:	695a      	ldr	r2, [r3, #20]
 8003230:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003234:	441a      	add	r2, r3
 8003236:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003238:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800323a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800323c:	699b      	ldr	r3, [r3, #24]
 800323e:	2b00      	cmp	r3, #0
 8003240:	d005      	beq.n	800324e <PCD_EP_ISR_Handler+0x516>
 8003242:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8003246:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003248:	691b      	ldr	r3, [r3, #16]
 800324a:	429a      	cmp	r2, r3
 800324c:	d206      	bcs.n	800325c <PCD_EP_ISR_Handler+0x524>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800324e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003250:	781b      	ldrb	r3, [r3, #0]
 8003252:	4619      	mov	r1, r3
 8003254:	6878      	ldr	r0, [r7, #4]
 8003256:	f006 fbc3 	bl	80099e0 <HAL_PCD_DataOutStageCallback>
 800325a:	e005      	b.n	8003268 <PCD_EP_ISR_Handler+0x530>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003262:	4618      	mov	r0, r3
 8003264:	f003 f843 	bl	80062ee <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8003268:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800326c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003270:	2b00      	cmp	r3, #0
 8003272:	f000 8123 	beq.w	80034bc <PCD_EP_ISR_Handler+0x784>
      {
        ep = &hpcd->IN_ep[epindex];
 8003276:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 800327a:	4613      	mov	r3, r2
 800327c:	009b      	lsls	r3, r3, #2
 800327e:	4413      	add	r3, r2
 8003280:	00db      	lsls	r3, r3, #3
 8003282:	3310      	adds	r3, #16
 8003284:	687a      	ldr	r2, [r7, #4]
 8003286:	4413      	add	r3, r2
 8003288:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	461a      	mov	r2, r3
 8003290:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8003294:	009b      	lsls	r3, r3, #2
 8003296:	4413      	add	r3, r2
 8003298:	881b      	ldrh	r3, [r3, #0]
 800329a:	b29b      	uxth	r3, r3
 800329c:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80032a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032a4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	461a      	mov	r2, r3
 80032ae:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80032b2:	009b      	lsls	r3, r3, #2
 80032b4:	441a      	add	r2, r3
 80032b6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80032ba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80032be:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80032c2:	b29b      	uxth	r3, r3
 80032c4:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 80032c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80032c8:	78db      	ldrb	r3, [r3, #3]
 80032ca:	2b01      	cmp	r3, #1
 80032cc:	f040 80a2 	bne.w	8003414 <PCD_EP_ISR_Handler+0x6dc>
        {
          ep->xfer_len = 0U;
 80032d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80032d2:	2200      	movs	r2, #0
 80032d4:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 80032d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80032d8:	7b1b      	ldrb	r3, [r3, #12]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	f000 8093 	beq.w	8003406 <PCD_EP_ISR_Handler+0x6ce>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80032e0:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80032e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d046      	beq.n	800337a <PCD_EP_ISR_Handler+0x642>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80032ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80032ee:	785b      	ldrb	r3, [r3, #1]
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d126      	bne.n	8003342 <PCD_EP_ISR_Handler+0x60a>
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	627b      	str	r3, [r7, #36]	; 0x24
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003302:	b29b      	uxth	r3, r3
 8003304:	461a      	mov	r2, r3
 8003306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003308:	4413      	add	r3, r2
 800330a:	627b      	str	r3, [r7, #36]	; 0x24
 800330c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800330e:	781b      	ldrb	r3, [r3, #0]
 8003310:	011a      	lsls	r2, r3, #4
 8003312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003314:	4413      	add	r3, r2
 8003316:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800331a:	623b      	str	r3, [r7, #32]
 800331c:	6a3b      	ldr	r3, [r7, #32]
 800331e:	881b      	ldrh	r3, [r3, #0]
 8003320:	b29b      	uxth	r3, r3
 8003322:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003326:	b29a      	uxth	r2, r3
 8003328:	6a3b      	ldr	r3, [r7, #32]
 800332a:	801a      	strh	r2, [r3, #0]
 800332c:	6a3b      	ldr	r3, [r7, #32]
 800332e:	881b      	ldrh	r3, [r3, #0]
 8003330:	b29b      	uxth	r3, r3
 8003332:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003336:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800333a:	b29a      	uxth	r2, r3
 800333c:	6a3b      	ldr	r3, [r7, #32]
 800333e:	801a      	strh	r2, [r3, #0]
 8003340:	e061      	b.n	8003406 <PCD_EP_ISR_Handler+0x6ce>
 8003342:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003344:	785b      	ldrb	r3, [r3, #1]
 8003346:	2b01      	cmp	r3, #1
 8003348:	d15d      	bne.n	8003406 <PCD_EP_ISR_Handler+0x6ce>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003358:	b29b      	uxth	r3, r3
 800335a:	461a      	mov	r2, r3
 800335c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800335e:	4413      	add	r3, r2
 8003360:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003362:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003364:	781b      	ldrb	r3, [r3, #0]
 8003366:	011a      	lsls	r2, r3, #4
 8003368:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800336a:	4413      	add	r3, r2
 800336c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003370:	62bb      	str	r3, [r7, #40]	; 0x28
 8003372:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003374:	2200      	movs	r2, #0
 8003376:	801a      	strh	r2, [r3, #0]
 8003378:	e045      	b.n	8003406 <PCD_EP_ISR_Handler+0x6ce>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003380:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003382:	785b      	ldrb	r3, [r3, #1]
 8003384:	2b00      	cmp	r3, #0
 8003386:	d126      	bne.n	80033d6 <PCD_EP_ISR_Handler+0x69e>
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	637b      	str	r3, [r7, #52]	; 0x34
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003396:	b29b      	uxth	r3, r3
 8003398:	461a      	mov	r2, r3
 800339a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800339c:	4413      	add	r3, r2
 800339e:	637b      	str	r3, [r7, #52]	; 0x34
 80033a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80033a2:	781b      	ldrb	r3, [r3, #0]
 80033a4:	011a      	lsls	r2, r3, #4
 80033a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033a8:	4413      	add	r3, r2
 80033aa:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80033ae:	633b      	str	r3, [r7, #48]	; 0x30
 80033b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033b2:	881b      	ldrh	r3, [r3, #0]
 80033b4:	b29b      	uxth	r3, r3
 80033b6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80033ba:	b29a      	uxth	r2, r3
 80033bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033be:	801a      	strh	r2, [r3, #0]
 80033c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033c2:	881b      	ldrh	r3, [r3, #0]
 80033c4:	b29b      	uxth	r3, r3
 80033c6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80033ca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80033ce:	b29a      	uxth	r2, r3
 80033d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033d2:	801a      	strh	r2, [r3, #0]
 80033d4:	e017      	b.n	8003406 <PCD_EP_ISR_Handler+0x6ce>
 80033d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80033d8:	785b      	ldrb	r3, [r3, #1]
 80033da:	2b01      	cmp	r3, #1
 80033dc:	d113      	bne.n	8003406 <PCD_EP_ISR_Handler+0x6ce>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80033e6:	b29b      	uxth	r3, r3
 80033e8:	461a      	mov	r2, r3
 80033ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80033ec:	4413      	add	r3, r2
 80033ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 80033f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80033f2:	781b      	ldrb	r3, [r3, #0]
 80033f4:	011a      	lsls	r2, r3, #4
 80033f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80033f8:	4413      	add	r3, r2
 80033fa:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80033fe:	63bb      	str	r3, [r7, #56]	; 0x38
 8003400:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003402:	2200      	movs	r2, #0
 8003404:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003406:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003408:	781b      	ldrb	r3, [r3, #0]
 800340a:	4619      	mov	r1, r3
 800340c:	6878      	ldr	r0, [r7, #4]
 800340e:	f006 fb02 	bl	8009a16 <HAL_PCD_DataInStageCallback>
 8003412:	e053      	b.n	80034bc <PCD_EP_ISR_Handler+0x784>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8003414:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8003418:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800341c:	2b00      	cmp	r3, #0
 800341e:	d146      	bne.n	80034ae <PCD_EP_ISR_Handler+0x776>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003428:	b29b      	uxth	r3, r3
 800342a:	461a      	mov	r2, r3
 800342c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800342e:	781b      	ldrb	r3, [r3, #0]
 8003430:	00db      	lsls	r3, r3, #3
 8003432:	4413      	add	r3, r2
 8003434:	3302      	adds	r3, #2
 8003436:	005b      	lsls	r3, r3, #1
 8003438:	687a      	ldr	r2, [r7, #4]
 800343a:	6812      	ldr	r2, [r2, #0]
 800343c:	4413      	add	r3, r2
 800343e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003442:	881b      	ldrh	r3, [r3, #0]
 8003444:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003448:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 800344c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800344e:	699a      	ldr	r2, [r3, #24]
 8003450:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003454:	429a      	cmp	r2, r3
 8003456:	d907      	bls.n	8003468 <PCD_EP_ISR_Handler+0x730>
            {
              ep->xfer_len -= TxPctSize;
 8003458:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800345a:	699a      	ldr	r2, [r3, #24]
 800345c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003460:	1ad2      	subs	r2, r2, r3
 8003462:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003464:	619a      	str	r2, [r3, #24]
 8003466:	e002      	b.n	800346e <PCD_EP_ISR_Handler+0x736>
            }
            else
            {
              ep->xfer_len = 0U;
 8003468:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800346a:	2200      	movs	r2, #0
 800346c:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 800346e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003470:	699b      	ldr	r3, [r3, #24]
 8003472:	2b00      	cmp	r3, #0
 8003474:	d106      	bne.n	8003484 <PCD_EP_ISR_Handler+0x74c>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003476:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003478:	781b      	ldrb	r3, [r3, #0]
 800347a:	4619      	mov	r1, r3
 800347c:	6878      	ldr	r0, [r7, #4]
 800347e:	f006 faca 	bl	8009a16 <HAL_PCD_DataInStageCallback>
 8003482:	e01b      	b.n	80034bc <PCD_EP_ISR_Handler+0x784>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8003484:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003486:	695a      	ldr	r2, [r3, #20]
 8003488:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800348c:	441a      	add	r2, r3
 800348e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003490:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8003492:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003494:	69da      	ldr	r2, [r3, #28]
 8003496:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800349a:	441a      	add	r2, r3
 800349c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800349e:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80034a6:	4618      	mov	r0, r3
 80034a8:	f002 ff21 	bl	80062ee <USB_EPStartXfer>
 80034ac:	e006      	b.n	80034bc <PCD_EP_ISR_Handler+0x784>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80034ae:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80034b2:	461a      	mov	r2, r3
 80034b4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80034b6:	6878      	ldr	r0, [r7, #4]
 80034b8:	f000 f91b 	bl	80036f2 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80034c4:	b29b      	uxth	r3, r3
 80034c6:	b21b      	sxth	r3, r3
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	f6ff ac3a 	blt.w	8002d42 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80034ce:	2300      	movs	r3, #0
}
 80034d0:	4618      	mov	r0, r3
 80034d2:	3758      	adds	r7, #88	; 0x58
 80034d4:	46bd      	mov	sp, r7
 80034d6:	bd80      	pop	{r7, pc}

080034d8 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b088      	sub	sp, #32
 80034dc:	af00      	add	r7, sp, #0
 80034de:	60f8      	str	r0, [r7, #12]
 80034e0:	60b9      	str	r1, [r7, #8]
 80034e2:	4613      	mov	r3, r2
 80034e4:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80034e6:	88fb      	ldrh	r3, [r7, #6]
 80034e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d07e      	beq.n	80035ee <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80034f8:	b29b      	uxth	r3, r3
 80034fa:	461a      	mov	r2, r3
 80034fc:	68bb      	ldr	r3, [r7, #8]
 80034fe:	781b      	ldrb	r3, [r3, #0]
 8003500:	00db      	lsls	r3, r3, #3
 8003502:	4413      	add	r3, r2
 8003504:	3302      	adds	r3, #2
 8003506:	005b      	lsls	r3, r3, #1
 8003508:	68fa      	ldr	r2, [r7, #12]
 800350a:	6812      	ldr	r2, [r2, #0]
 800350c:	4413      	add	r3, r2
 800350e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003512:	881b      	ldrh	r3, [r3, #0]
 8003514:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003518:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800351a:	68bb      	ldr	r3, [r7, #8]
 800351c:	699a      	ldr	r2, [r3, #24]
 800351e:	8b7b      	ldrh	r3, [r7, #26]
 8003520:	429a      	cmp	r2, r3
 8003522:	d306      	bcc.n	8003532 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8003524:	68bb      	ldr	r3, [r7, #8]
 8003526:	699a      	ldr	r2, [r3, #24]
 8003528:	8b7b      	ldrh	r3, [r7, #26]
 800352a:	1ad2      	subs	r2, r2, r3
 800352c:	68bb      	ldr	r3, [r7, #8]
 800352e:	619a      	str	r2, [r3, #24]
 8003530:	e002      	b.n	8003538 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8003532:	68bb      	ldr	r3, [r7, #8]
 8003534:	2200      	movs	r2, #0
 8003536:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003538:	68bb      	ldr	r3, [r7, #8]
 800353a:	699b      	ldr	r3, [r3, #24]
 800353c:	2b00      	cmp	r3, #0
 800353e:	d123      	bne.n	8003588 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	461a      	mov	r2, r3
 8003546:	68bb      	ldr	r3, [r7, #8]
 8003548:	781b      	ldrb	r3, [r3, #0]
 800354a:	009b      	lsls	r3, r3, #2
 800354c:	4413      	add	r3, r2
 800354e:	881b      	ldrh	r3, [r3, #0]
 8003550:	b29b      	uxth	r3, r3
 8003552:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003556:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800355a:	833b      	strh	r3, [r7, #24]
 800355c:	8b3b      	ldrh	r3, [r7, #24]
 800355e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003562:	833b      	strh	r3, [r7, #24]
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	461a      	mov	r2, r3
 800356a:	68bb      	ldr	r3, [r7, #8]
 800356c:	781b      	ldrb	r3, [r3, #0]
 800356e:	009b      	lsls	r3, r3, #2
 8003570:	441a      	add	r2, r3
 8003572:	8b3b      	ldrh	r3, [r7, #24]
 8003574:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003578:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800357c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003580:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003584:	b29b      	uxth	r3, r3
 8003586:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003588:	88fb      	ldrh	r3, [r7, #6]
 800358a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800358e:	2b00      	cmp	r3, #0
 8003590:	d01f      	beq.n	80035d2 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	461a      	mov	r2, r3
 8003598:	68bb      	ldr	r3, [r7, #8]
 800359a:	781b      	ldrb	r3, [r3, #0]
 800359c:	009b      	lsls	r3, r3, #2
 800359e:	4413      	add	r3, r2
 80035a0:	881b      	ldrh	r3, [r3, #0]
 80035a2:	b29b      	uxth	r3, r3
 80035a4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80035a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035ac:	82fb      	strh	r3, [r7, #22]
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	461a      	mov	r2, r3
 80035b4:	68bb      	ldr	r3, [r7, #8]
 80035b6:	781b      	ldrb	r3, [r3, #0]
 80035b8:	009b      	lsls	r3, r3, #2
 80035ba:	441a      	add	r2, r3
 80035bc:	8afb      	ldrh	r3, [r7, #22]
 80035be:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80035c2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80035c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80035ca:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80035ce:	b29b      	uxth	r3, r3
 80035d0:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80035d2:	8b7b      	ldrh	r3, [r7, #26]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	f000 8087 	beq.w	80036e8 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	6818      	ldr	r0, [r3, #0]
 80035de:	68bb      	ldr	r3, [r7, #8]
 80035e0:	6959      	ldr	r1, [r3, #20]
 80035e2:	68bb      	ldr	r3, [r7, #8]
 80035e4:	891a      	ldrh	r2, [r3, #8]
 80035e6:	8b7b      	ldrh	r3, [r7, #26]
 80035e8:	f004 fba7 	bl	8007d3a <USB_ReadPMA>
 80035ec:	e07c      	b.n	80036e8 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80035f6:	b29b      	uxth	r3, r3
 80035f8:	461a      	mov	r2, r3
 80035fa:	68bb      	ldr	r3, [r7, #8]
 80035fc:	781b      	ldrb	r3, [r3, #0]
 80035fe:	00db      	lsls	r3, r3, #3
 8003600:	4413      	add	r3, r2
 8003602:	3306      	adds	r3, #6
 8003604:	005b      	lsls	r3, r3, #1
 8003606:	68fa      	ldr	r2, [r7, #12]
 8003608:	6812      	ldr	r2, [r2, #0]
 800360a:	4413      	add	r3, r2
 800360c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003610:	881b      	ldrh	r3, [r3, #0]
 8003612:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003616:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003618:	68bb      	ldr	r3, [r7, #8]
 800361a:	699a      	ldr	r2, [r3, #24]
 800361c:	8b7b      	ldrh	r3, [r7, #26]
 800361e:	429a      	cmp	r2, r3
 8003620:	d306      	bcc.n	8003630 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8003622:	68bb      	ldr	r3, [r7, #8]
 8003624:	699a      	ldr	r2, [r3, #24]
 8003626:	8b7b      	ldrh	r3, [r7, #26]
 8003628:	1ad2      	subs	r2, r2, r3
 800362a:	68bb      	ldr	r3, [r7, #8]
 800362c:	619a      	str	r2, [r3, #24]
 800362e:	e002      	b.n	8003636 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8003630:	68bb      	ldr	r3, [r7, #8]
 8003632:	2200      	movs	r2, #0
 8003634:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003636:	68bb      	ldr	r3, [r7, #8]
 8003638:	699b      	ldr	r3, [r3, #24]
 800363a:	2b00      	cmp	r3, #0
 800363c:	d123      	bne.n	8003686 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	461a      	mov	r2, r3
 8003644:	68bb      	ldr	r3, [r7, #8]
 8003646:	781b      	ldrb	r3, [r3, #0]
 8003648:	009b      	lsls	r3, r3, #2
 800364a:	4413      	add	r3, r2
 800364c:	881b      	ldrh	r3, [r3, #0]
 800364e:	b29b      	uxth	r3, r3
 8003650:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003654:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003658:	83fb      	strh	r3, [r7, #30]
 800365a:	8bfb      	ldrh	r3, [r7, #30]
 800365c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003660:	83fb      	strh	r3, [r7, #30]
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	461a      	mov	r2, r3
 8003668:	68bb      	ldr	r3, [r7, #8]
 800366a:	781b      	ldrb	r3, [r3, #0]
 800366c:	009b      	lsls	r3, r3, #2
 800366e:	441a      	add	r2, r3
 8003670:	8bfb      	ldrh	r3, [r7, #30]
 8003672:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003676:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800367a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800367e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003682:	b29b      	uxth	r3, r3
 8003684:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8003686:	88fb      	ldrh	r3, [r7, #6]
 8003688:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800368c:	2b00      	cmp	r3, #0
 800368e:	d11f      	bne.n	80036d0 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	461a      	mov	r2, r3
 8003696:	68bb      	ldr	r3, [r7, #8]
 8003698:	781b      	ldrb	r3, [r3, #0]
 800369a:	009b      	lsls	r3, r3, #2
 800369c:	4413      	add	r3, r2
 800369e:	881b      	ldrh	r3, [r3, #0]
 80036a0:	b29b      	uxth	r3, r3
 80036a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80036a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036aa:	83bb      	strh	r3, [r7, #28]
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	461a      	mov	r2, r3
 80036b2:	68bb      	ldr	r3, [r7, #8]
 80036b4:	781b      	ldrb	r3, [r3, #0]
 80036b6:	009b      	lsls	r3, r3, #2
 80036b8:	441a      	add	r2, r3
 80036ba:	8bbb      	ldrh	r3, [r7, #28]
 80036bc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80036c0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80036c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80036c8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80036cc:	b29b      	uxth	r3, r3
 80036ce:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80036d0:	8b7b      	ldrh	r3, [r7, #26]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d008      	beq.n	80036e8 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	6818      	ldr	r0, [r3, #0]
 80036da:	68bb      	ldr	r3, [r7, #8]
 80036dc:	6959      	ldr	r1, [r3, #20]
 80036de:	68bb      	ldr	r3, [r7, #8]
 80036e0:	895a      	ldrh	r2, [r3, #10]
 80036e2:	8b7b      	ldrh	r3, [r7, #26]
 80036e4:	f004 fb29 	bl	8007d3a <USB_ReadPMA>
    }
  }

  return count;
 80036e8:	8b7b      	ldrh	r3, [r7, #26]
}
 80036ea:	4618      	mov	r0, r3
 80036ec:	3720      	adds	r7, #32
 80036ee:	46bd      	mov	sp, r7
 80036f0:	bd80      	pop	{r7, pc}

080036f2 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80036f2:	b580      	push	{r7, lr}
 80036f4:	b0a4      	sub	sp, #144	; 0x90
 80036f6:	af00      	add	r7, sp, #0
 80036f8:	60f8      	str	r0, [r7, #12]
 80036fa:	60b9      	str	r1, [r7, #8]
 80036fc:	4613      	mov	r3, r2
 80036fe:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003700:	88fb      	ldrh	r3, [r7, #6]
 8003702:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003706:	2b00      	cmp	r3, #0
 8003708:	f000 81dd 	beq.w	8003ac6 <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003714:	b29b      	uxth	r3, r3
 8003716:	461a      	mov	r2, r3
 8003718:	68bb      	ldr	r3, [r7, #8]
 800371a:	781b      	ldrb	r3, [r3, #0]
 800371c:	00db      	lsls	r3, r3, #3
 800371e:	4413      	add	r3, r2
 8003720:	3302      	adds	r3, #2
 8003722:	005b      	lsls	r3, r3, #1
 8003724:	68fa      	ldr	r2, [r7, #12]
 8003726:	6812      	ldr	r2, [r2, #0]
 8003728:	4413      	add	r3, r2
 800372a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800372e:	881b      	ldrh	r3, [r3, #0]
 8003730:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003734:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88

    if (ep->xfer_len > TxPctSize)
 8003738:	68bb      	ldr	r3, [r7, #8]
 800373a:	699a      	ldr	r2, [r3, #24]
 800373c:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8003740:	429a      	cmp	r2, r3
 8003742:	d907      	bls.n	8003754 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8003744:	68bb      	ldr	r3, [r7, #8]
 8003746:	699a      	ldr	r2, [r3, #24]
 8003748:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 800374c:	1ad2      	subs	r2, r2, r3
 800374e:	68bb      	ldr	r3, [r7, #8]
 8003750:	619a      	str	r2, [r3, #24]
 8003752:	e002      	b.n	800375a <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8003754:	68bb      	ldr	r3, [r7, #8]
 8003756:	2200      	movs	r2, #0
 8003758:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800375a:	68bb      	ldr	r3, [r7, #8]
 800375c:	699b      	ldr	r3, [r3, #24]
 800375e:	2b00      	cmp	r3, #0
 8003760:	f040 80b9 	bne.w	80038d6 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003764:	68bb      	ldr	r3, [r7, #8]
 8003766:	785b      	ldrb	r3, [r3, #1]
 8003768:	2b00      	cmp	r3, #0
 800376a:	d126      	bne.n	80037ba <HAL_PCD_EP_DB_Transmit+0xc8>
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800377a:	b29b      	uxth	r3, r3
 800377c:	461a      	mov	r2, r3
 800377e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003780:	4413      	add	r3, r2
 8003782:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003784:	68bb      	ldr	r3, [r7, #8]
 8003786:	781b      	ldrb	r3, [r3, #0]
 8003788:	011a      	lsls	r2, r3, #4
 800378a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800378c:	4413      	add	r3, r2
 800378e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003792:	62bb      	str	r3, [r7, #40]	; 0x28
 8003794:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003796:	881b      	ldrh	r3, [r3, #0]
 8003798:	b29b      	uxth	r3, r3
 800379a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800379e:	b29a      	uxth	r2, r3
 80037a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037a2:	801a      	strh	r2, [r3, #0]
 80037a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037a6:	881b      	ldrh	r3, [r3, #0]
 80037a8:	b29b      	uxth	r3, r3
 80037aa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80037ae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80037b2:	b29a      	uxth	r2, r3
 80037b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037b6:	801a      	strh	r2, [r3, #0]
 80037b8:	e01a      	b.n	80037f0 <HAL_PCD_EP_DB_Transmit+0xfe>
 80037ba:	68bb      	ldr	r3, [r7, #8]
 80037bc:	785b      	ldrb	r3, [r3, #1]
 80037be:	2b01      	cmp	r3, #1
 80037c0:	d116      	bne.n	80037f0 <HAL_PCD_EP_DB_Transmit+0xfe>
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	637b      	str	r3, [r7, #52]	; 0x34
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80037d0:	b29b      	uxth	r3, r3
 80037d2:	461a      	mov	r2, r3
 80037d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037d6:	4413      	add	r3, r2
 80037d8:	637b      	str	r3, [r7, #52]	; 0x34
 80037da:	68bb      	ldr	r3, [r7, #8]
 80037dc:	781b      	ldrb	r3, [r3, #0]
 80037de:	011a      	lsls	r2, r3, #4
 80037e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037e2:	4413      	add	r3, r2
 80037e4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80037e8:	633b      	str	r3, [r7, #48]	; 0x30
 80037ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037ec:	2200      	movs	r2, #0
 80037ee:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	627b      	str	r3, [r7, #36]	; 0x24
 80037f6:	68bb      	ldr	r3, [r7, #8]
 80037f8:	785b      	ldrb	r3, [r3, #1]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d126      	bne.n	800384c <HAL_PCD_EP_DB_Transmit+0x15a>
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	61fb      	str	r3, [r7, #28]
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800380c:	b29b      	uxth	r3, r3
 800380e:	461a      	mov	r2, r3
 8003810:	69fb      	ldr	r3, [r7, #28]
 8003812:	4413      	add	r3, r2
 8003814:	61fb      	str	r3, [r7, #28]
 8003816:	68bb      	ldr	r3, [r7, #8]
 8003818:	781b      	ldrb	r3, [r3, #0]
 800381a:	011a      	lsls	r2, r3, #4
 800381c:	69fb      	ldr	r3, [r7, #28]
 800381e:	4413      	add	r3, r2
 8003820:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003824:	61bb      	str	r3, [r7, #24]
 8003826:	69bb      	ldr	r3, [r7, #24]
 8003828:	881b      	ldrh	r3, [r3, #0]
 800382a:	b29b      	uxth	r3, r3
 800382c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003830:	b29a      	uxth	r2, r3
 8003832:	69bb      	ldr	r3, [r7, #24]
 8003834:	801a      	strh	r2, [r3, #0]
 8003836:	69bb      	ldr	r3, [r7, #24]
 8003838:	881b      	ldrh	r3, [r3, #0]
 800383a:	b29b      	uxth	r3, r3
 800383c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003840:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003844:	b29a      	uxth	r2, r3
 8003846:	69bb      	ldr	r3, [r7, #24]
 8003848:	801a      	strh	r2, [r3, #0]
 800384a:	e017      	b.n	800387c <HAL_PCD_EP_DB_Transmit+0x18a>
 800384c:	68bb      	ldr	r3, [r7, #8]
 800384e:	785b      	ldrb	r3, [r3, #1]
 8003850:	2b01      	cmp	r3, #1
 8003852:	d113      	bne.n	800387c <HAL_PCD_EP_DB_Transmit+0x18a>
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800385c:	b29b      	uxth	r3, r3
 800385e:	461a      	mov	r2, r3
 8003860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003862:	4413      	add	r3, r2
 8003864:	627b      	str	r3, [r7, #36]	; 0x24
 8003866:	68bb      	ldr	r3, [r7, #8]
 8003868:	781b      	ldrb	r3, [r3, #0]
 800386a:	011a      	lsls	r2, r3, #4
 800386c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800386e:	4413      	add	r3, r2
 8003870:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003874:	623b      	str	r3, [r7, #32]
 8003876:	6a3b      	ldr	r3, [r7, #32]
 8003878:	2200      	movs	r2, #0
 800387a:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800387c:	68bb      	ldr	r3, [r7, #8]
 800387e:	781b      	ldrb	r3, [r3, #0]
 8003880:	4619      	mov	r1, r3
 8003882:	68f8      	ldr	r0, [r7, #12]
 8003884:	f006 f8c7 	bl	8009a16 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003888:	88fb      	ldrh	r3, [r7, #6]
 800388a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800388e:	2b00      	cmp	r3, #0
 8003890:	f000 82fc 	beq.w	8003e8c <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	461a      	mov	r2, r3
 800389a:	68bb      	ldr	r3, [r7, #8]
 800389c:	781b      	ldrb	r3, [r3, #0]
 800389e:	009b      	lsls	r3, r3, #2
 80038a0:	4413      	add	r3, r2
 80038a2:	881b      	ldrh	r3, [r3, #0]
 80038a4:	b29b      	uxth	r3, r3
 80038a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80038aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038ae:	82fb      	strh	r3, [r7, #22]
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	461a      	mov	r2, r3
 80038b6:	68bb      	ldr	r3, [r7, #8]
 80038b8:	781b      	ldrb	r3, [r3, #0]
 80038ba:	009b      	lsls	r3, r3, #2
 80038bc:	441a      	add	r2, r3
 80038be:	8afb      	ldrh	r3, [r7, #22]
 80038c0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80038c4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80038c8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80038cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80038d0:	b29b      	uxth	r3, r3
 80038d2:	8013      	strh	r3, [r2, #0]
 80038d4:	e2da      	b.n	8003e8c <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80038d6:	88fb      	ldrh	r3, [r7, #6]
 80038d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d021      	beq.n	8003924 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	461a      	mov	r2, r3
 80038e6:	68bb      	ldr	r3, [r7, #8]
 80038e8:	781b      	ldrb	r3, [r3, #0]
 80038ea:	009b      	lsls	r3, r3, #2
 80038ec:	4413      	add	r3, r2
 80038ee:	881b      	ldrh	r3, [r3, #0]
 80038f0:	b29b      	uxth	r3, r3
 80038f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80038f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038fa:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	461a      	mov	r2, r3
 8003904:	68bb      	ldr	r3, [r7, #8]
 8003906:	781b      	ldrb	r3, [r3, #0]
 8003908:	009b      	lsls	r3, r3, #2
 800390a:	441a      	add	r2, r3
 800390c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8003910:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003914:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003918:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800391c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003920:	b29b      	uxth	r3, r3
 8003922:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003924:	68bb      	ldr	r3, [r7, #8]
 8003926:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800392a:	2b01      	cmp	r3, #1
 800392c:	f040 82ae 	bne.w	8003e8c <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8003930:	68bb      	ldr	r3, [r7, #8]
 8003932:	695a      	ldr	r2, [r3, #20]
 8003934:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8003938:	441a      	add	r2, r3
 800393a:	68bb      	ldr	r3, [r7, #8]
 800393c:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800393e:	68bb      	ldr	r3, [r7, #8]
 8003940:	69da      	ldr	r2, [r3, #28]
 8003942:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8003946:	441a      	add	r2, r3
 8003948:	68bb      	ldr	r3, [r7, #8]
 800394a:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800394c:	68bb      	ldr	r3, [r7, #8]
 800394e:	6a1a      	ldr	r2, [r3, #32]
 8003950:	68bb      	ldr	r3, [r7, #8]
 8003952:	691b      	ldr	r3, [r3, #16]
 8003954:	429a      	cmp	r2, r3
 8003956:	d30b      	bcc.n	8003970 <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 8003958:	68bb      	ldr	r3, [r7, #8]
 800395a:	691b      	ldr	r3, [r3, #16]
 800395c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8003960:	68bb      	ldr	r3, [r7, #8]
 8003962:	6a1a      	ldr	r2, [r3, #32]
 8003964:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003968:	1ad2      	subs	r2, r2, r3
 800396a:	68bb      	ldr	r3, [r7, #8]
 800396c:	621a      	str	r2, [r3, #32]
 800396e:	e017      	b.n	80039a0 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 8003970:	68bb      	ldr	r3, [r7, #8]
 8003972:	6a1b      	ldr	r3, [r3, #32]
 8003974:	2b00      	cmp	r3, #0
 8003976:	d108      	bne.n	800398a <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 8003978:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 800397c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8003980:	68bb      	ldr	r3, [r7, #8]
 8003982:	2200      	movs	r2, #0
 8003984:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003988:	e00a      	b.n	80039a0 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800398a:	68bb      	ldr	r3, [r7, #8]
 800398c:	2200      	movs	r2, #0
 800398e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8003992:	68bb      	ldr	r3, [r7, #8]
 8003994:	6a1b      	ldr	r3, [r3, #32]
 8003996:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 800399a:	68bb      	ldr	r3, [r7, #8]
 800399c:	2200      	movs	r2, #0
 800399e:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80039a0:	68bb      	ldr	r3, [r7, #8]
 80039a2:	785b      	ldrb	r3, [r3, #1]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d165      	bne.n	8003a74 <HAL_PCD_EP_DB_Transmit+0x382>
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	63fb      	str	r3, [r7, #60]	; 0x3c
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80039b6:	b29b      	uxth	r3, r3
 80039b8:	461a      	mov	r2, r3
 80039ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80039bc:	4413      	add	r3, r2
 80039be:	63fb      	str	r3, [r7, #60]	; 0x3c
 80039c0:	68bb      	ldr	r3, [r7, #8]
 80039c2:	781b      	ldrb	r3, [r3, #0]
 80039c4:	011a      	lsls	r2, r3, #4
 80039c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80039c8:	4413      	add	r3, r2
 80039ca:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80039ce:	63bb      	str	r3, [r7, #56]	; 0x38
 80039d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039d2:	881b      	ldrh	r3, [r3, #0]
 80039d4:	b29b      	uxth	r3, r3
 80039d6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80039da:	b29a      	uxth	r2, r3
 80039dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039de:	801a      	strh	r2, [r3, #0]
 80039e0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d10a      	bne.n	80039fe <HAL_PCD_EP_DB_Transmit+0x30c>
 80039e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039ea:	881b      	ldrh	r3, [r3, #0]
 80039ec:	b29b      	uxth	r3, r3
 80039ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80039f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80039f6:	b29a      	uxth	r2, r3
 80039f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039fa:	801a      	strh	r2, [r3, #0]
 80039fc:	e057      	b.n	8003aae <HAL_PCD_EP_DB_Transmit+0x3bc>
 80039fe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003a02:	2b3e      	cmp	r3, #62	; 0x3e
 8003a04:	d818      	bhi.n	8003a38 <HAL_PCD_EP_DB_Transmit+0x346>
 8003a06:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003a0a:	085b      	lsrs	r3, r3, #1
 8003a0c:	64bb      	str	r3, [r7, #72]	; 0x48
 8003a0e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003a12:	f003 0301 	and.w	r3, r3, #1
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d002      	beq.n	8003a20 <HAL_PCD_EP_DB_Transmit+0x32e>
 8003a1a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a1c:	3301      	adds	r3, #1
 8003a1e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003a20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a22:	881b      	ldrh	r3, [r3, #0]
 8003a24:	b29a      	uxth	r2, r3
 8003a26:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a28:	b29b      	uxth	r3, r3
 8003a2a:	029b      	lsls	r3, r3, #10
 8003a2c:	b29b      	uxth	r3, r3
 8003a2e:	4313      	orrs	r3, r2
 8003a30:	b29a      	uxth	r2, r3
 8003a32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a34:	801a      	strh	r2, [r3, #0]
 8003a36:	e03a      	b.n	8003aae <HAL_PCD_EP_DB_Transmit+0x3bc>
 8003a38:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003a3c:	095b      	lsrs	r3, r3, #5
 8003a3e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003a40:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003a44:	f003 031f 	and.w	r3, r3, #31
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d102      	bne.n	8003a52 <HAL_PCD_EP_DB_Transmit+0x360>
 8003a4c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a4e:	3b01      	subs	r3, #1
 8003a50:	64bb      	str	r3, [r7, #72]	; 0x48
 8003a52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a54:	881b      	ldrh	r3, [r3, #0]
 8003a56:	b29a      	uxth	r2, r3
 8003a58:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a5a:	b29b      	uxth	r3, r3
 8003a5c:	029b      	lsls	r3, r3, #10
 8003a5e:	b29b      	uxth	r3, r3
 8003a60:	4313      	orrs	r3, r2
 8003a62:	b29b      	uxth	r3, r3
 8003a64:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003a68:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003a6c:	b29a      	uxth	r2, r3
 8003a6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a70:	801a      	strh	r2, [r3, #0]
 8003a72:	e01c      	b.n	8003aae <HAL_PCD_EP_DB_Transmit+0x3bc>
 8003a74:	68bb      	ldr	r3, [r7, #8]
 8003a76:	785b      	ldrb	r3, [r3, #1]
 8003a78:	2b01      	cmp	r3, #1
 8003a7a:	d118      	bne.n	8003aae <HAL_PCD_EP_DB_Transmit+0x3bc>
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	647b      	str	r3, [r7, #68]	; 0x44
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003a8a:	b29b      	uxth	r3, r3
 8003a8c:	461a      	mov	r2, r3
 8003a8e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a90:	4413      	add	r3, r2
 8003a92:	647b      	str	r3, [r7, #68]	; 0x44
 8003a94:	68bb      	ldr	r3, [r7, #8]
 8003a96:	781b      	ldrb	r3, [r3, #0]
 8003a98:	011a      	lsls	r2, r3, #4
 8003a9a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a9c:	4413      	add	r3, r2
 8003a9e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003aa2:	643b      	str	r3, [r7, #64]	; 0x40
 8003aa4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003aa8:	b29a      	uxth	r2, r3
 8003aaa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003aac:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	6818      	ldr	r0, [r3, #0]
 8003ab2:	68bb      	ldr	r3, [r7, #8]
 8003ab4:	6959      	ldr	r1, [r3, #20]
 8003ab6:	68bb      	ldr	r3, [r7, #8]
 8003ab8:	891a      	ldrh	r2, [r3, #8]
 8003aba:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003abe:	b29b      	uxth	r3, r3
 8003ac0:	f004 f8f5 	bl	8007cae <USB_WritePMA>
 8003ac4:	e1e2      	b.n	8003e8c <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003ace:	b29b      	uxth	r3, r3
 8003ad0:	461a      	mov	r2, r3
 8003ad2:	68bb      	ldr	r3, [r7, #8]
 8003ad4:	781b      	ldrb	r3, [r3, #0]
 8003ad6:	00db      	lsls	r3, r3, #3
 8003ad8:	4413      	add	r3, r2
 8003ada:	3306      	adds	r3, #6
 8003adc:	005b      	lsls	r3, r3, #1
 8003ade:	68fa      	ldr	r2, [r7, #12]
 8003ae0:	6812      	ldr	r2, [r2, #0]
 8003ae2:	4413      	add	r3, r2
 8003ae4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003ae8:	881b      	ldrh	r3, [r3, #0]
 8003aea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003aee:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88

    if (ep->xfer_len >= TxPctSize)
 8003af2:	68bb      	ldr	r3, [r7, #8]
 8003af4:	699a      	ldr	r2, [r3, #24]
 8003af6:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8003afa:	429a      	cmp	r2, r3
 8003afc:	d307      	bcc.n	8003b0e <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 8003afe:	68bb      	ldr	r3, [r7, #8]
 8003b00:	699a      	ldr	r2, [r3, #24]
 8003b02:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8003b06:	1ad2      	subs	r2, r2, r3
 8003b08:	68bb      	ldr	r3, [r7, #8]
 8003b0a:	619a      	str	r2, [r3, #24]
 8003b0c:	e002      	b.n	8003b14 <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 8003b0e:	68bb      	ldr	r3, [r7, #8]
 8003b10:	2200      	movs	r2, #0
 8003b12:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003b14:	68bb      	ldr	r3, [r7, #8]
 8003b16:	699b      	ldr	r3, [r3, #24]
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	f040 80c0 	bne.w	8003c9e <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003b1e:	68bb      	ldr	r3, [r7, #8]
 8003b20:	785b      	ldrb	r3, [r3, #1]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d126      	bne.n	8003b74 <HAL_PCD_EP_DB_Transmit+0x482>
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003b34:	b29b      	uxth	r3, r3
 8003b36:	461a      	mov	r2, r3
 8003b38:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003b3a:	4413      	add	r3, r2
 8003b3c:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003b3e:	68bb      	ldr	r3, [r7, #8]
 8003b40:	781b      	ldrb	r3, [r3, #0]
 8003b42:	011a      	lsls	r2, r3, #4
 8003b44:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003b46:	4413      	add	r3, r2
 8003b48:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003b4c:	67bb      	str	r3, [r7, #120]	; 0x78
 8003b4e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003b50:	881b      	ldrh	r3, [r3, #0]
 8003b52:	b29b      	uxth	r3, r3
 8003b54:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003b58:	b29a      	uxth	r2, r3
 8003b5a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003b5c:	801a      	strh	r2, [r3, #0]
 8003b5e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003b60:	881b      	ldrh	r3, [r3, #0]
 8003b62:	b29b      	uxth	r3, r3
 8003b64:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003b68:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003b6c:	b29a      	uxth	r2, r3
 8003b6e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003b70:	801a      	strh	r2, [r3, #0]
 8003b72:	e01a      	b.n	8003baa <HAL_PCD_EP_DB_Transmit+0x4b8>
 8003b74:	68bb      	ldr	r3, [r7, #8]
 8003b76:	785b      	ldrb	r3, [r3, #1]
 8003b78:	2b01      	cmp	r3, #1
 8003b7a:	d116      	bne.n	8003baa <HAL_PCD_EP_DB_Transmit+0x4b8>
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	667b      	str	r3, [r7, #100]	; 0x64
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003b8a:	b29b      	uxth	r3, r3
 8003b8c:	461a      	mov	r2, r3
 8003b8e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003b90:	4413      	add	r3, r2
 8003b92:	667b      	str	r3, [r7, #100]	; 0x64
 8003b94:	68bb      	ldr	r3, [r7, #8]
 8003b96:	781b      	ldrb	r3, [r3, #0]
 8003b98:	011a      	lsls	r2, r3, #4
 8003b9a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003b9c:	4413      	add	r3, r2
 8003b9e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003ba2:	663b      	str	r3, [r7, #96]	; 0x60
 8003ba4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	677b      	str	r3, [r7, #116]	; 0x74
 8003bb0:	68bb      	ldr	r3, [r7, #8]
 8003bb2:	785b      	ldrb	r3, [r3, #1]
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d12b      	bne.n	8003c10 <HAL_PCD_EP_DB_Transmit+0x51e>
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003bc6:	b29b      	uxth	r3, r3
 8003bc8:	461a      	mov	r2, r3
 8003bca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003bcc:	4413      	add	r3, r2
 8003bce:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003bd0:	68bb      	ldr	r3, [r7, #8]
 8003bd2:	781b      	ldrb	r3, [r3, #0]
 8003bd4:	011a      	lsls	r2, r3, #4
 8003bd6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003bd8:	4413      	add	r3, r2
 8003bda:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003bde:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003be2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003be6:	881b      	ldrh	r3, [r3, #0]
 8003be8:	b29b      	uxth	r3, r3
 8003bea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003bee:	b29a      	uxth	r2, r3
 8003bf0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003bf4:	801a      	strh	r2, [r3, #0]
 8003bf6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003bfa:	881b      	ldrh	r3, [r3, #0]
 8003bfc:	b29b      	uxth	r3, r3
 8003bfe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003c02:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003c06:	b29a      	uxth	r2, r3
 8003c08:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003c0c:	801a      	strh	r2, [r3, #0]
 8003c0e:	e017      	b.n	8003c40 <HAL_PCD_EP_DB_Transmit+0x54e>
 8003c10:	68bb      	ldr	r3, [r7, #8]
 8003c12:	785b      	ldrb	r3, [r3, #1]
 8003c14:	2b01      	cmp	r3, #1
 8003c16:	d113      	bne.n	8003c40 <HAL_PCD_EP_DB_Transmit+0x54e>
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003c20:	b29b      	uxth	r3, r3
 8003c22:	461a      	mov	r2, r3
 8003c24:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003c26:	4413      	add	r3, r2
 8003c28:	677b      	str	r3, [r7, #116]	; 0x74
 8003c2a:	68bb      	ldr	r3, [r7, #8]
 8003c2c:	781b      	ldrb	r3, [r3, #0]
 8003c2e:	011a      	lsls	r2, r3, #4
 8003c30:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003c32:	4413      	add	r3, r2
 8003c34:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003c38:	673b      	str	r3, [r7, #112]	; 0x70
 8003c3a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003c40:	68bb      	ldr	r3, [r7, #8]
 8003c42:	781b      	ldrb	r3, [r3, #0]
 8003c44:	4619      	mov	r1, r3
 8003c46:	68f8      	ldr	r0, [r7, #12]
 8003c48:	f005 fee5 	bl	8009a16 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003c4c:	88fb      	ldrh	r3, [r7, #6]
 8003c4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	f040 811a 	bne.w	8003e8c <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	461a      	mov	r2, r3
 8003c5e:	68bb      	ldr	r3, [r7, #8]
 8003c60:	781b      	ldrb	r3, [r3, #0]
 8003c62:	009b      	lsls	r3, r3, #2
 8003c64:	4413      	add	r3, r2
 8003c66:	881b      	ldrh	r3, [r3, #0]
 8003c68:	b29b      	uxth	r3, r3
 8003c6a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c72:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	461a      	mov	r2, r3
 8003c7c:	68bb      	ldr	r3, [r7, #8]
 8003c7e:	781b      	ldrb	r3, [r3, #0]
 8003c80:	009b      	lsls	r3, r3, #2
 8003c82:	441a      	add	r2, r3
 8003c84:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 8003c88:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003c8c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003c90:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003c94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c98:	b29b      	uxth	r3, r3
 8003c9a:	8013      	strh	r3, [r2, #0]
 8003c9c:	e0f6      	b.n	8003e8c <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003c9e:	88fb      	ldrh	r3, [r7, #6]
 8003ca0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d121      	bne.n	8003cec <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	461a      	mov	r2, r3
 8003cae:	68bb      	ldr	r3, [r7, #8]
 8003cb0:	781b      	ldrb	r3, [r3, #0]
 8003cb2:	009b      	lsls	r3, r3, #2
 8003cb4:	4413      	add	r3, r2
 8003cb6:	881b      	ldrh	r3, [r3, #0]
 8003cb8:	b29b      	uxth	r3, r3
 8003cba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003cbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cc2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	461a      	mov	r2, r3
 8003ccc:	68bb      	ldr	r3, [r7, #8]
 8003cce:	781b      	ldrb	r3, [r3, #0]
 8003cd0:	009b      	lsls	r3, r3, #2
 8003cd2:	441a      	add	r2, r3
 8003cd4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003cd8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003cdc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003ce0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003ce4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ce8:	b29b      	uxth	r3, r3
 8003cea:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003cec:	68bb      	ldr	r3, [r7, #8]
 8003cee:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003cf2:	2b01      	cmp	r3, #1
 8003cf4:	f040 80ca 	bne.w	8003e8c <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8003cf8:	68bb      	ldr	r3, [r7, #8]
 8003cfa:	695a      	ldr	r2, [r3, #20]
 8003cfc:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8003d00:	441a      	add	r2, r3
 8003d02:	68bb      	ldr	r3, [r7, #8]
 8003d04:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8003d06:	68bb      	ldr	r3, [r7, #8]
 8003d08:	69da      	ldr	r2, [r3, #28]
 8003d0a:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8003d0e:	441a      	add	r2, r3
 8003d10:	68bb      	ldr	r3, [r7, #8]
 8003d12:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003d14:	68bb      	ldr	r3, [r7, #8]
 8003d16:	6a1a      	ldr	r2, [r3, #32]
 8003d18:	68bb      	ldr	r3, [r7, #8]
 8003d1a:	691b      	ldr	r3, [r3, #16]
 8003d1c:	429a      	cmp	r2, r3
 8003d1e:	d30b      	bcc.n	8003d38 <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 8003d20:	68bb      	ldr	r3, [r7, #8]
 8003d22:	691b      	ldr	r3, [r3, #16]
 8003d24:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8003d28:	68bb      	ldr	r3, [r7, #8]
 8003d2a:	6a1a      	ldr	r2, [r3, #32]
 8003d2c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003d30:	1ad2      	subs	r2, r2, r3
 8003d32:	68bb      	ldr	r3, [r7, #8]
 8003d34:	621a      	str	r2, [r3, #32]
 8003d36:	e017      	b.n	8003d68 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 8003d38:	68bb      	ldr	r3, [r7, #8]
 8003d3a:	6a1b      	ldr	r3, [r3, #32]
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d108      	bne.n	8003d52 <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 8003d40:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8003d44:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8003d48:	68bb      	ldr	r3, [r7, #8]
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003d50:	e00a      	b.n	8003d68 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 8003d52:	68bb      	ldr	r3, [r7, #8]
 8003d54:	6a1b      	ldr	r3, [r3, #32]
 8003d56:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8003d5a:	68bb      	ldr	r3, [r7, #8]
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8003d60:	68bb      	ldr	r3, [r7, #8]
 8003d62:	2200      	movs	r2, #0
 8003d64:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	657b      	str	r3, [r7, #84]	; 0x54
 8003d6e:	68bb      	ldr	r3, [r7, #8]
 8003d70:	785b      	ldrb	r3, [r3, #1]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d165      	bne.n	8003e42 <HAL_PCD_EP_DB_Transmit+0x750>
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003d84:	b29b      	uxth	r3, r3
 8003d86:	461a      	mov	r2, r3
 8003d88:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003d8a:	4413      	add	r3, r2
 8003d8c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003d8e:	68bb      	ldr	r3, [r7, #8]
 8003d90:	781b      	ldrb	r3, [r3, #0]
 8003d92:	011a      	lsls	r2, r3, #4
 8003d94:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003d96:	4413      	add	r3, r2
 8003d98:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003d9c:	65bb      	str	r3, [r7, #88]	; 0x58
 8003d9e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003da0:	881b      	ldrh	r3, [r3, #0]
 8003da2:	b29b      	uxth	r3, r3
 8003da4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003da8:	b29a      	uxth	r2, r3
 8003daa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003dac:	801a      	strh	r2, [r3, #0]
 8003dae:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d10a      	bne.n	8003dcc <HAL_PCD_EP_DB_Transmit+0x6da>
 8003db6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003db8:	881b      	ldrh	r3, [r3, #0]
 8003dba:	b29b      	uxth	r3, r3
 8003dbc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003dc0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003dc4:	b29a      	uxth	r2, r3
 8003dc6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003dc8:	801a      	strh	r2, [r3, #0]
 8003dca:	e054      	b.n	8003e76 <HAL_PCD_EP_DB_Transmit+0x784>
 8003dcc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003dd0:	2b3e      	cmp	r3, #62	; 0x3e
 8003dd2:	d818      	bhi.n	8003e06 <HAL_PCD_EP_DB_Transmit+0x714>
 8003dd4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003dd8:	085b      	lsrs	r3, r3, #1
 8003dda:	66bb      	str	r3, [r7, #104]	; 0x68
 8003ddc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003de0:	f003 0301 	and.w	r3, r3, #1
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d002      	beq.n	8003dee <HAL_PCD_EP_DB_Transmit+0x6fc>
 8003de8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003dea:	3301      	adds	r3, #1
 8003dec:	66bb      	str	r3, [r7, #104]	; 0x68
 8003dee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003df0:	881b      	ldrh	r3, [r3, #0]
 8003df2:	b29a      	uxth	r2, r3
 8003df4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003df6:	b29b      	uxth	r3, r3
 8003df8:	029b      	lsls	r3, r3, #10
 8003dfa:	b29b      	uxth	r3, r3
 8003dfc:	4313      	orrs	r3, r2
 8003dfe:	b29a      	uxth	r2, r3
 8003e00:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003e02:	801a      	strh	r2, [r3, #0]
 8003e04:	e037      	b.n	8003e76 <HAL_PCD_EP_DB_Transmit+0x784>
 8003e06:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003e0a:	095b      	lsrs	r3, r3, #5
 8003e0c:	66bb      	str	r3, [r7, #104]	; 0x68
 8003e0e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003e12:	f003 031f 	and.w	r3, r3, #31
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d102      	bne.n	8003e20 <HAL_PCD_EP_DB_Transmit+0x72e>
 8003e1a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003e1c:	3b01      	subs	r3, #1
 8003e1e:	66bb      	str	r3, [r7, #104]	; 0x68
 8003e20:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003e22:	881b      	ldrh	r3, [r3, #0]
 8003e24:	b29a      	uxth	r2, r3
 8003e26:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003e28:	b29b      	uxth	r3, r3
 8003e2a:	029b      	lsls	r3, r3, #10
 8003e2c:	b29b      	uxth	r3, r3
 8003e2e:	4313      	orrs	r3, r2
 8003e30:	b29b      	uxth	r3, r3
 8003e32:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003e36:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003e3a:	b29a      	uxth	r2, r3
 8003e3c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003e3e:	801a      	strh	r2, [r3, #0]
 8003e40:	e019      	b.n	8003e76 <HAL_PCD_EP_DB_Transmit+0x784>
 8003e42:	68bb      	ldr	r3, [r7, #8]
 8003e44:	785b      	ldrb	r3, [r3, #1]
 8003e46:	2b01      	cmp	r3, #1
 8003e48:	d115      	bne.n	8003e76 <HAL_PCD_EP_DB_Transmit+0x784>
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003e52:	b29b      	uxth	r3, r3
 8003e54:	461a      	mov	r2, r3
 8003e56:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003e58:	4413      	add	r3, r2
 8003e5a:	657b      	str	r3, [r7, #84]	; 0x54
 8003e5c:	68bb      	ldr	r3, [r7, #8]
 8003e5e:	781b      	ldrb	r3, [r3, #0]
 8003e60:	011a      	lsls	r2, r3, #4
 8003e62:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003e64:	4413      	add	r3, r2
 8003e66:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003e6a:	653b      	str	r3, [r7, #80]	; 0x50
 8003e6c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003e70:	b29a      	uxth	r2, r3
 8003e72:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003e74:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	6818      	ldr	r0, [r3, #0]
 8003e7a:	68bb      	ldr	r3, [r7, #8]
 8003e7c:	6959      	ldr	r1, [r3, #20]
 8003e7e:	68bb      	ldr	r3, [r7, #8]
 8003e80:	895a      	ldrh	r2, [r3, #10]
 8003e82:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003e86:	b29b      	uxth	r3, r3
 8003e88:	f003 ff11 	bl	8007cae <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	461a      	mov	r2, r3
 8003e92:	68bb      	ldr	r3, [r7, #8]
 8003e94:	781b      	ldrb	r3, [r3, #0]
 8003e96:	009b      	lsls	r3, r3, #2
 8003e98:	4413      	add	r3, r2
 8003e9a:	881b      	ldrh	r3, [r3, #0]
 8003e9c:	b29b      	uxth	r3, r3
 8003e9e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ea2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003ea6:	82bb      	strh	r3, [r7, #20]
 8003ea8:	8abb      	ldrh	r3, [r7, #20]
 8003eaa:	f083 0310 	eor.w	r3, r3, #16
 8003eae:	82bb      	strh	r3, [r7, #20]
 8003eb0:	8abb      	ldrh	r3, [r7, #20]
 8003eb2:	f083 0320 	eor.w	r3, r3, #32
 8003eb6:	82bb      	strh	r3, [r7, #20]
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	461a      	mov	r2, r3
 8003ebe:	68bb      	ldr	r3, [r7, #8]
 8003ec0:	781b      	ldrb	r3, [r3, #0]
 8003ec2:	009b      	lsls	r3, r3, #2
 8003ec4:	441a      	add	r2, r3
 8003ec6:	8abb      	ldrh	r3, [r7, #20]
 8003ec8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003ecc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003ed0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003ed4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ed8:	b29b      	uxth	r3, r3
 8003eda:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8003edc:	2300      	movs	r3, #0
}
 8003ede:	4618      	mov	r0, r3
 8003ee0:	3790      	adds	r7, #144	; 0x90
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	bd80      	pop	{r7, pc}

08003ee6 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8003ee6:	b480      	push	{r7}
 8003ee8:	b087      	sub	sp, #28
 8003eea:	af00      	add	r7, sp, #0
 8003eec:	60f8      	str	r0, [r7, #12]
 8003eee:	607b      	str	r3, [r7, #4]
 8003ef0:	460b      	mov	r3, r1
 8003ef2:	817b      	strh	r3, [r7, #10]
 8003ef4:	4613      	mov	r3, r2
 8003ef6:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8003ef8:	897b      	ldrh	r3, [r7, #10]
 8003efa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003efe:	b29b      	uxth	r3, r3
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d00b      	beq.n	8003f1c <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003f04:	897b      	ldrh	r3, [r7, #10]
 8003f06:	f003 0207 	and.w	r2, r3, #7
 8003f0a:	4613      	mov	r3, r2
 8003f0c:	009b      	lsls	r3, r3, #2
 8003f0e:	4413      	add	r3, r2
 8003f10:	00db      	lsls	r3, r3, #3
 8003f12:	3310      	adds	r3, #16
 8003f14:	68fa      	ldr	r2, [r7, #12]
 8003f16:	4413      	add	r3, r2
 8003f18:	617b      	str	r3, [r7, #20]
 8003f1a:	e009      	b.n	8003f30 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003f1c:	897a      	ldrh	r2, [r7, #10]
 8003f1e:	4613      	mov	r3, r2
 8003f20:	009b      	lsls	r3, r3, #2
 8003f22:	4413      	add	r3, r2
 8003f24:	00db      	lsls	r3, r3, #3
 8003f26:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8003f2a:	68fa      	ldr	r2, [r7, #12]
 8003f2c:	4413      	add	r3, r2
 8003f2e:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8003f30:	893b      	ldrh	r3, [r7, #8]
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d107      	bne.n	8003f46 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8003f36:	697b      	ldr	r3, [r7, #20]
 8003f38:	2200      	movs	r2, #0
 8003f3a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	b29a      	uxth	r2, r3
 8003f40:	697b      	ldr	r3, [r7, #20]
 8003f42:	80da      	strh	r2, [r3, #6]
 8003f44:	e00b      	b.n	8003f5e <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8003f46:	697b      	ldr	r3, [r7, #20]
 8003f48:	2201      	movs	r2, #1
 8003f4a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	b29a      	uxth	r2, r3
 8003f50:	697b      	ldr	r3, [r7, #20]
 8003f52:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	0c1b      	lsrs	r3, r3, #16
 8003f58:	b29a      	uxth	r2, r3
 8003f5a:	697b      	ldr	r3, [r7, #20]
 8003f5c:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8003f5e:	2300      	movs	r3, #0
}
 8003f60:	4618      	mov	r0, r3
 8003f62:	371c      	adds	r7, #28
 8003f64:	46bd      	mov	sp, r7
 8003f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6a:	4770      	bx	lr

08003f6c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8003f72:	af00      	add	r7, sp, #0
 8003f74:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f78:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003f7c:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003f7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f82:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d102      	bne.n	8003f92 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8003f8c:	2301      	movs	r3, #1
 8003f8e:	f001 b823 	b.w	8004fd8 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f92:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f96:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f003 0301 	and.w	r3, r3, #1
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	f000 817d 	beq.w	80042a2 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003fa8:	4bbc      	ldr	r3, [pc, #752]	; (800429c <HAL_RCC_OscConfig+0x330>)
 8003faa:	685b      	ldr	r3, [r3, #4]
 8003fac:	f003 030c 	and.w	r3, r3, #12
 8003fb0:	2b04      	cmp	r3, #4
 8003fb2:	d00c      	beq.n	8003fce <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003fb4:	4bb9      	ldr	r3, [pc, #740]	; (800429c <HAL_RCC_OscConfig+0x330>)
 8003fb6:	685b      	ldr	r3, [r3, #4]
 8003fb8:	f003 030c 	and.w	r3, r3, #12
 8003fbc:	2b08      	cmp	r3, #8
 8003fbe:	d15c      	bne.n	800407a <HAL_RCC_OscConfig+0x10e>
 8003fc0:	4bb6      	ldr	r3, [pc, #728]	; (800429c <HAL_RCC_OscConfig+0x330>)
 8003fc2:	685b      	ldr	r3, [r3, #4]
 8003fc4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003fc8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fcc:	d155      	bne.n	800407a <HAL_RCC_OscConfig+0x10e>
 8003fce:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003fd2:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fd6:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8003fda:	fa93 f3a3 	rbit	r3, r3
 8003fde:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003fe2:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003fe6:	fab3 f383 	clz	r3, r3
 8003fea:	b2db      	uxtb	r3, r3
 8003fec:	095b      	lsrs	r3, r3, #5
 8003fee:	b2db      	uxtb	r3, r3
 8003ff0:	f043 0301 	orr.w	r3, r3, #1
 8003ff4:	b2db      	uxtb	r3, r3
 8003ff6:	2b01      	cmp	r3, #1
 8003ff8:	d102      	bne.n	8004000 <HAL_RCC_OscConfig+0x94>
 8003ffa:	4ba8      	ldr	r3, [pc, #672]	; (800429c <HAL_RCC_OscConfig+0x330>)
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	e015      	b.n	800402c <HAL_RCC_OscConfig+0xc0>
 8004000:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004004:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004008:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 800400c:	fa93 f3a3 	rbit	r3, r3
 8004010:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8004014:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004018:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 800401c:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8004020:	fa93 f3a3 	rbit	r3, r3
 8004024:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8004028:	4b9c      	ldr	r3, [pc, #624]	; (800429c <HAL_RCC_OscConfig+0x330>)
 800402a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800402c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004030:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8004034:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8004038:	fa92 f2a2 	rbit	r2, r2
 800403c:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8004040:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8004044:	fab2 f282 	clz	r2, r2
 8004048:	b2d2      	uxtb	r2, r2
 800404a:	f042 0220 	orr.w	r2, r2, #32
 800404e:	b2d2      	uxtb	r2, r2
 8004050:	f002 021f 	and.w	r2, r2, #31
 8004054:	2101      	movs	r1, #1
 8004056:	fa01 f202 	lsl.w	r2, r1, r2
 800405a:	4013      	ands	r3, r2
 800405c:	2b00      	cmp	r3, #0
 800405e:	f000 811f 	beq.w	80042a0 <HAL_RCC_OscConfig+0x334>
 8004062:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004066:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	685b      	ldr	r3, [r3, #4]
 800406e:	2b00      	cmp	r3, #0
 8004070:	f040 8116 	bne.w	80042a0 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8004074:	2301      	movs	r3, #1
 8004076:	f000 bfaf 	b.w	8004fd8 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800407a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800407e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	685b      	ldr	r3, [r3, #4]
 8004086:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800408a:	d106      	bne.n	800409a <HAL_RCC_OscConfig+0x12e>
 800408c:	4b83      	ldr	r3, [pc, #524]	; (800429c <HAL_RCC_OscConfig+0x330>)
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	4a82      	ldr	r2, [pc, #520]	; (800429c <HAL_RCC_OscConfig+0x330>)
 8004092:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004096:	6013      	str	r3, [r2, #0]
 8004098:	e036      	b.n	8004108 <HAL_RCC_OscConfig+0x19c>
 800409a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800409e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	685b      	ldr	r3, [r3, #4]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d10c      	bne.n	80040c4 <HAL_RCC_OscConfig+0x158>
 80040aa:	4b7c      	ldr	r3, [pc, #496]	; (800429c <HAL_RCC_OscConfig+0x330>)
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	4a7b      	ldr	r2, [pc, #492]	; (800429c <HAL_RCC_OscConfig+0x330>)
 80040b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80040b4:	6013      	str	r3, [r2, #0]
 80040b6:	4b79      	ldr	r3, [pc, #484]	; (800429c <HAL_RCC_OscConfig+0x330>)
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	4a78      	ldr	r2, [pc, #480]	; (800429c <HAL_RCC_OscConfig+0x330>)
 80040bc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80040c0:	6013      	str	r3, [r2, #0]
 80040c2:	e021      	b.n	8004108 <HAL_RCC_OscConfig+0x19c>
 80040c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80040c8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	685b      	ldr	r3, [r3, #4]
 80040d0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80040d4:	d10c      	bne.n	80040f0 <HAL_RCC_OscConfig+0x184>
 80040d6:	4b71      	ldr	r3, [pc, #452]	; (800429c <HAL_RCC_OscConfig+0x330>)
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	4a70      	ldr	r2, [pc, #448]	; (800429c <HAL_RCC_OscConfig+0x330>)
 80040dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80040e0:	6013      	str	r3, [r2, #0]
 80040e2:	4b6e      	ldr	r3, [pc, #440]	; (800429c <HAL_RCC_OscConfig+0x330>)
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	4a6d      	ldr	r2, [pc, #436]	; (800429c <HAL_RCC_OscConfig+0x330>)
 80040e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040ec:	6013      	str	r3, [r2, #0]
 80040ee:	e00b      	b.n	8004108 <HAL_RCC_OscConfig+0x19c>
 80040f0:	4b6a      	ldr	r3, [pc, #424]	; (800429c <HAL_RCC_OscConfig+0x330>)
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	4a69      	ldr	r2, [pc, #420]	; (800429c <HAL_RCC_OscConfig+0x330>)
 80040f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80040fa:	6013      	str	r3, [r2, #0]
 80040fc:	4b67      	ldr	r3, [pc, #412]	; (800429c <HAL_RCC_OscConfig+0x330>)
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	4a66      	ldr	r2, [pc, #408]	; (800429c <HAL_RCC_OscConfig+0x330>)
 8004102:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004106:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004108:	4b64      	ldr	r3, [pc, #400]	; (800429c <HAL_RCC_OscConfig+0x330>)
 800410a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800410c:	f023 020f 	bic.w	r2, r3, #15
 8004110:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004114:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	689b      	ldr	r3, [r3, #8]
 800411c:	495f      	ldr	r1, [pc, #380]	; (800429c <HAL_RCC_OscConfig+0x330>)
 800411e:	4313      	orrs	r3, r2
 8004120:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004122:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004126:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	685b      	ldr	r3, [r3, #4]
 800412e:	2b00      	cmp	r3, #0
 8004130:	d059      	beq.n	80041e6 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004132:	f7fd f8ab 	bl	800128c <HAL_GetTick>
 8004136:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800413a:	e00a      	b.n	8004152 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800413c:	f7fd f8a6 	bl	800128c <HAL_GetTick>
 8004140:	4602      	mov	r2, r0
 8004142:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004146:	1ad3      	subs	r3, r2, r3
 8004148:	2b64      	cmp	r3, #100	; 0x64
 800414a:	d902      	bls.n	8004152 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 800414c:	2303      	movs	r3, #3
 800414e:	f000 bf43 	b.w	8004fd8 <HAL_RCC_OscConfig+0x106c>
 8004152:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004156:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800415a:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 800415e:	fa93 f3a3 	rbit	r3, r3
 8004162:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8004166:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800416a:	fab3 f383 	clz	r3, r3
 800416e:	b2db      	uxtb	r3, r3
 8004170:	095b      	lsrs	r3, r3, #5
 8004172:	b2db      	uxtb	r3, r3
 8004174:	f043 0301 	orr.w	r3, r3, #1
 8004178:	b2db      	uxtb	r3, r3
 800417a:	2b01      	cmp	r3, #1
 800417c:	d102      	bne.n	8004184 <HAL_RCC_OscConfig+0x218>
 800417e:	4b47      	ldr	r3, [pc, #284]	; (800429c <HAL_RCC_OscConfig+0x330>)
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	e015      	b.n	80041b0 <HAL_RCC_OscConfig+0x244>
 8004184:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004188:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800418c:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8004190:	fa93 f3a3 	rbit	r3, r3
 8004194:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8004198:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800419c:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80041a0:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80041a4:	fa93 f3a3 	rbit	r3, r3
 80041a8:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80041ac:	4b3b      	ldr	r3, [pc, #236]	; (800429c <HAL_RCC_OscConfig+0x330>)
 80041ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041b0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80041b4:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 80041b8:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80041bc:	fa92 f2a2 	rbit	r2, r2
 80041c0:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 80041c4:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 80041c8:	fab2 f282 	clz	r2, r2
 80041cc:	b2d2      	uxtb	r2, r2
 80041ce:	f042 0220 	orr.w	r2, r2, #32
 80041d2:	b2d2      	uxtb	r2, r2
 80041d4:	f002 021f 	and.w	r2, r2, #31
 80041d8:	2101      	movs	r1, #1
 80041da:	fa01 f202 	lsl.w	r2, r1, r2
 80041de:	4013      	ands	r3, r2
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d0ab      	beq.n	800413c <HAL_RCC_OscConfig+0x1d0>
 80041e4:	e05d      	b.n	80042a2 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041e6:	f7fd f851 	bl	800128c <HAL_GetTick>
 80041ea:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80041ee:	e00a      	b.n	8004206 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80041f0:	f7fd f84c 	bl	800128c <HAL_GetTick>
 80041f4:	4602      	mov	r2, r0
 80041f6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80041fa:	1ad3      	subs	r3, r2, r3
 80041fc:	2b64      	cmp	r3, #100	; 0x64
 80041fe:	d902      	bls.n	8004206 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8004200:	2303      	movs	r3, #3
 8004202:	f000 bee9 	b.w	8004fd8 <HAL_RCC_OscConfig+0x106c>
 8004206:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800420a:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800420e:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8004212:	fa93 f3a3 	rbit	r3, r3
 8004216:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 800421a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800421e:	fab3 f383 	clz	r3, r3
 8004222:	b2db      	uxtb	r3, r3
 8004224:	095b      	lsrs	r3, r3, #5
 8004226:	b2db      	uxtb	r3, r3
 8004228:	f043 0301 	orr.w	r3, r3, #1
 800422c:	b2db      	uxtb	r3, r3
 800422e:	2b01      	cmp	r3, #1
 8004230:	d102      	bne.n	8004238 <HAL_RCC_OscConfig+0x2cc>
 8004232:	4b1a      	ldr	r3, [pc, #104]	; (800429c <HAL_RCC_OscConfig+0x330>)
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	e015      	b.n	8004264 <HAL_RCC_OscConfig+0x2f8>
 8004238:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800423c:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004240:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8004244:	fa93 f3a3 	rbit	r3, r3
 8004248:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800424c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004250:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8004254:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8004258:	fa93 f3a3 	rbit	r3, r3
 800425c:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8004260:	4b0e      	ldr	r3, [pc, #56]	; (800429c <HAL_RCC_OscConfig+0x330>)
 8004262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004264:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004268:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 800426c:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8004270:	fa92 f2a2 	rbit	r2, r2
 8004274:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8004278:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 800427c:	fab2 f282 	clz	r2, r2
 8004280:	b2d2      	uxtb	r2, r2
 8004282:	f042 0220 	orr.w	r2, r2, #32
 8004286:	b2d2      	uxtb	r2, r2
 8004288:	f002 021f 	and.w	r2, r2, #31
 800428c:	2101      	movs	r1, #1
 800428e:	fa01 f202 	lsl.w	r2, r1, r2
 8004292:	4013      	ands	r3, r2
 8004294:	2b00      	cmp	r3, #0
 8004296:	d1ab      	bne.n	80041f0 <HAL_RCC_OscConfig+0x284>
 8004298:	e003      	b.n	80042a2 <HAL_RCC_OscConfig+0x336>
 800429a:	bf00      	nop
 800429c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80042a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80042a6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f003 0302 	and.w	r3, r3, #2
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	f000 817d 	beq.w	80045b2 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80042b8:	4ba6      	ldr	r3, [pc, #664]	; (8004554 <HAL_RCC_OscConfig+0x5e8>)
 80042ba:	685b      	ldr	r3, [r3, #4]
 80042bc:	f003 030c 	and.w	r3, r3, #12
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d00b      	beq.n	80042dc <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80042c4:	4ba3      	ldr	r3, [pc, #652]	; (8004554 <HAL_RCC_OscConfig+0x5e8>)
 80042c6:	685b      	ldr	r3, [r3, #4]
 80042c8:	f003 030c 	and.w	r3, r3, #12
 80042cc:	2b08      	cmp	r3, #8
 80042ce:	d172      	bne.n	80043b6 <HAL_RCC_OscConfig+0x44a>
 80042d0:	4ba0      	ldr	r3, [pc, #640]	; (8004554 <HAL_RCC_OscConfig+0x5e8>)
 80042d2:	685b      	ldr	r3, [r3, #4]
 80042d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d16c      	bne.n	80043b6 <HAL_RCC_OscConfig+0x44a>
 80042dc:	2302      	movs	r3, #2
 80042de:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042e2:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80042e6:	fa93 f3a3 	rbit	r3, r3
 80042ea:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 80042ee:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80042f2:	fab3 f383 	clz	r3, r3
 80042f6:	b2db      	uxtb	r3, r3
 80042f8:	095b      	lsrs	r3, r3, #5
 80042fa:	b2db      	uxtb	r3, r3
 80042fc:	f043 0301 	orr.w	r3, r3, #1
 8004300:	b2db      	uxtb	r3, r3
 8004302:	2b01      	cmp	r3, #1
 8004304:	d102      	bne.n	800430c <HAL_RCC_OscConfig+0x3a0>
 8004306:	4b93      	ldr	r3, [pc, #588]	; (8004554 <HAL_RCC_OscConfig+0x5e8>)
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	e013      	b.n	8004334 <HAL_RCC_OscConfig+0x3c8>
 800430c:	2302      	movs	r3, #2
 800430e:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004312:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8004316:	fa93 f3a3 	rbit	r3, r3
 800431a:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800431e:	2302      	movs	r3, #2
 8004320:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8004324:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8004328:	fa93 f3a3 	rbit	r3, r3
 800432c:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8004330:	4b88      	ldr	r3, [pc, #544]	; (8004554 <HAL_RCC_OscConfig+0x5e8>)
 8004332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004334:	2202      	movs	r2, #2
 8004336:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 800433a:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 800433e:	fa92 f2a2 	rbit	r2, r2
 8004342:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8004346:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 800434a:	fab2 f282 	clz	r2, r2
 800434e:	b2d2      	uxtb	r2, r2
 8004350:	f042 0220 	orr.w	r2, r2, #32
 8004354:	b2d2      	uxtb	r2, r2
 8004356:	f002 021f 	and.w	r2, r2, #31
 800435a:	2101      	movs	r1, #1
 800435c:	fa01 f202 	lsl.w	r2, r1, r2
 8004360:	4013      	ands	r3, r2
 8004362:	2b00      	cmp	r3, #0
 8004364:	d00a      	beq.n	800437c <HAL_RCC_OscConfig+0x410>
 8004366:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800436a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	691b      	ldr	r3, [r3, #16]
 8004372:	2b01      	cmp	r3, #1
 8004374:	d002      	beq.n	800437c <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8004376:	2301      	movs	r3, #1
 8004378:	f000 be2e 	b.w	8004fd8 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800437c:	4b75      	ldr	r3, [pc, #468]	; (8004554 <HAL_RCC_OscConfig+0x5e8>)
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004384:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004388:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	695b      	ldr	r3, [r3, #20]
 8004390:	21f8      	movs	r1, #248	; 0xf8
 8004392:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004396:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 800439a:	fa91 f1a1 	rbit	r1, r1
 800439e:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 80043a2:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80043a6:	fab1 f181 	clz	r1, r1
 80043aa:	b2c9      	uxtb	r1, r1
 80043ac:	408b      	lsls	r3, r1
 80043ae:	4969      	ldr	r1, [pc, #420]	; (8004554 <HAL_RCC_OscConfig+0x5e8>)
 80043b0:	4313      	orrs	r3, r2
 80043b2:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80043b4:	e0fd      	b.n	80045b2 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80043b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043ba:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	691b      	ldr	r3, [r3, #16]
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	f000 8088 	beq.w	80044d8 <HAL_RCC_OscConfig+0x56c>
 80043c8:	2301      	movs	r3, #1
 80043ca:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043ce:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80043d2:	fa93 f3a3 	rbit	r3, r3
 80043d6:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 80043da:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80043de:	fab3 f383 	clz	r3, r3
 80043e2:	b2db      	uxtb	r3, r3
 80043e4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80043e8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80043ec:	009b      	lsls	r3, r3, #2
 80043ee:	461a      	mov	r2, r3
 80043f0:	2301      	movs	r3, #1
 80043f2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043f4:	f7fc ff4a 	bl	800128c <HAL_GetTick>
 80043f8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043fc:	e00a      	b.n	8004414 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80043fe:	f7fc ff45 	bl	800128c <HAL_GetTick>
 8004402:	4602      	mov	r2, r0
 8004404:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004408:	1ad3      	subs	r3, r2, r3
 800440a:	2b02      	cmp	r3, #2
 800440c:	d902      	bls.n	8004414 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 800440e:	2303      	movs	r3, #3
 8004410:	f000 bde2 	b.w	8004fd8 <HAL_RCC_OscConfig+0x106c>
 8004414:	2302      	movs	r3, #2
 8004416:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800441a:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800441e:	fa93 f3a3 	rbit	r3, r3
 8004422:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8004426:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800442a:	fab3 f383 	clz	r3, r3
 800442e:	b2db      	uxtb	r3, r3
 8004430:	095b      	lsrs	r3, r3, #5
 8004432:	b2db      	uxtb	r3, r3
 8004434:	f043 0301 	orr.w	r3, r3, #1
 8004438:	b2db      	uxtb	r3, r3
 800443a:	2b01      	cmp	r3, #1
 800443c:	d102      	bne.n	8004444 <HAL_RCC_OscConfig+0x4d8>
 800443e:	4b45      	ldr	r3, [pc, #276]	; (8004554 <HAL_RCC_OscConfig+0x5e8>)
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	e013      	b.n	800446c <HAL_RCC_OscConfig+0x500>
 8004444:	2302      	movs	r3, #2
 8004446:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800444a:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800444e:	fa93 f3a3 	rbit	r3, r3
 8004452:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8004456:	2302      	movs	r3, #2
 8004458:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800445c:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8004460:	fa93 f3a3 	rbit	r3, r3
 8004464:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8004468:	4b3a      	ldr	r3, [pc, #232]	; (8004554 <HAL_RCC_OscConfig+0x5e8>)
 800446a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800446c:	2202      	movs	r2, #2
 800446e:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8004472:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8004476:	fa92 f2a2 	rbit	r2, r2
 800447a:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 800447e:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8004482:	fab2 f282 	clz	r2, r2
 8004486:	b2d2      	uxtb	r2, r2
 8004488:	f042 0220 	orr.w	r2, r2, #32
 800448c:	b2d2      	uxtb	r2, r2
 800448e:	f002 021f 	and.w	r2, r2, #31
 8004492:	2101      	movs	r1, #1
 8004494:	fa01 f202 	lsl.w	r2, r1, r2
 8004498:	4013      	ands	r3, r2
 800449a:	2b00      	cmp	r3, #0
 800449c:	d0af      	beq.n	80043fe <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800449e:	4b2d      	ldr	r3, [pc, #180]	; (8004554 <HAL_RCC_OscConfig+0x5e8>)
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80044a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80044aa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	695b      	ldr	r3, [r3, #20]
 80044b2:	21f8      	movs	r1, #248	; 0xf8
 80044b4:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044b8:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80044bc:	fa91 f1a1 	rbit	r1, r1
 80044c0:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 80044c4:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80044c8:	fab1 f181 	clz	r1, r1
 80044cc:	b2c9      	uxtb	r1, r1
 80044ce:	408b      	lsls	r3, r1
 80044d0:	4920      	ldr	r1, [pc, #128]	; (8004554 <HAL_RCC_OscConfig+0x5e8>)
 80044d2:	4313      	orrs	r3, r2
 80044d4:	600b      	str	r3, [r1, #0]
 80044d6:	e06c      	b.n	80045b2 <HAL_RCC_OscConfig+0x646>
 80044d8:	2301      	movs	r3, #1
 80044da:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044de:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80044e2:	fa93 f3a3 	rbit	r3, r3
 80044e6:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 80044ea:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80044ee:	fab3 f383 	clz	r3, r3
 80044f2:	b2db      	uxtb	r3, r3
 80044f4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80044f8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80044fc:	009b      	lsls	r3, r3, #2
 80044fe:	461a      	mov	r2, r3
 8004500:	2300      	movs	r3, #0
 8004502:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004504:	f7fc fec2 	bl	800128c <HAL_GetTick>
 8004508:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800450c:	e00a      	b.n	8004524 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800450e:	f7fc febd 	bl	800128c <HAL_GetTick>
 8004512:	4602      	mov	r2, r0
 8004514:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004518:	1ad3      	subs	r3, r2, r3
 800451a:	2b02      	cmp	r3, #2
 800451c:	d902      	bls.n	8004524 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 800451e:	2303      	movs	r3, #3
 8004520:	f000 bd5a 	b.w	8004fd8 <HAL_RCC_OscConfig+0x106c>
 8004524:	2302      	movs	r3, #2
 8004526:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800452a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800452e:	fa93 f3a3 	rbit	r3, r3
 8004532:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8004536:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800453a:	fab3 f383 	clz	r3, r3
 800453e:	b2db      	uxtb	r3, r3
 8004540:	095b      	lsrs	r3, r3, #5
 8004542:	b2db      	uxtb	r3, r3
 8004544:	f043 0301 	orr.w	r3, r3, #1
 8004548:	b2db      	uxtb	r3, r3
 800454a:	2b01      	cmp	r3, #1
 800454c:	d104      	bne.n	8004558 <HAL_RCC_OscConfig+0x5ec>
 800454e:	4b01      	ldr	r3, [pc, #4]	; (8004554 <HAL_RCC_OscConfig+0x5e8>)
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	e015      	b.n	8004580 <HAL_RCC_OscConfig+0x614>
 8004554:	40021000 	.word	0x40021000
 8004558:	2302      	movs	r3, #2
 800455a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800455e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004562:	fa93 f3a3 	rbit	r3, r3
 8004566:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800456a:	2302      	movs	r3, #2
 800456c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8004570:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004574:	fa93 f3a3 	rbit	r3, r3
 8004578:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800457c:	4bc8      	ldr	r3, [pc, #800]	; (80048a0 <HAL_RCC_OscConfig+0x934>)
 800457e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004580:	2202      	movs	r2, #2
 8004582:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8004586:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800458a:	fa92 f2a2 	rbit	r2, r2
 800458e:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8004592:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8004596:	fab2 f282 	clz	r2, r2
 800459a:	b2d2      	uxtb	r2, r2
 800459c:	f042 0220 	orr.w	r2, r2, #32
 80045a0:	b2d2      	uxtb	r2, r2
 80045a2:	f002 021f 	and.w	r2, r2, #31
 80045a6:	2101      	movs	r1, #1
 80045a8:	fa01 f202 	lsl.w	r2, r1, r2
 80045ac:	4013      	ands	r3, r2
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d1ad      	bne.n	800450e <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80045b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80045b6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f003 0308 	and.w	r3, r3, #8
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	f000 8110 	beq.w	80047e8 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80045c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80045cc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	699b      	ldr	r3, [r3, #24]
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d079      	beq.n	80046cc <HAL_RCC_OscConfig+0x760>
 80045d8:	2301      	movs	r3, #1
 80045da:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045de:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80045e2:	fa93 f3a3 	rbit	r3, r3
 80045e6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 80045ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80045ee:	fab3 f383 	clz	r3, r3
 80045f2:	b2db      	uxtb	r3, r3
 80045f4:	461a      	mov	r2, r3
 80045f6:	4bab      	ldr	r3, [pc, #684]	; (80048a4 <HAL_RCC_OscConfig+0x938>)
 80045f8:	4413      	add	r3, r2
 80045fa:	009b      	lsls	r3, r3, #2
 80045fc:	461a      	mov	r2, r3
 80045fe:	2301      	movs	r3, #1
 8004600:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004602:	f7fc fe43 	bl	800128c <HAL_GetTick>
 8004606:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800460a:	e00a      	b.n	8004622 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800460c:	f7fc fe3e 	bl	800128c <HAL_GetTick>
 8004610:	4602      	mov	r2, r0
 8004612:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004616:	1ad3      	subs	r3, r2, r3
 8004618:	2b02      	cmp	r3, #2
 800461a:	d902      	bls.n	8004622 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 800461c:	2303      	movs	r3, #3
 800461e:	f000 bcdb 	b.w	8004fd8 <HAL_RCC_OscConfig+0x106c>
 8004622:	2302      	movs	r3, #2
 8004624:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004628:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800462c:	fa93 f3a3 	rbit	r3, r3
 8004630:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004634:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004638:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800463c:	2202      	movs	r2, #2
 800463e:	601a      	str	r2, [r3, #0]
 8004640:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004644:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	fa93 f2a3 	rbit	r2, r3
 800464e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004652:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004656:	601a      	str	r2, [r3, #0]
 8004658:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800465c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004660:	2202      	movs	r2, #2
 8004662:	601a      	str	r2, [r3, #0]
 8004664:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004668:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	fa93 f2a3 	rbit	r2, r3
 8004672:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004676:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800467a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800467c:	4b88      	ldr	r3, [pc, #544]	; (80048a0 <HAL_RCC_OscConfig+0x934>)
 800467e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004680:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004684:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8004688:	2102      	movs	r1, #2
 800468a:	6019      	str	r1, [r3, #0]
 800468c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004690:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	fa93 f1a3 	rbit	r1, r3
 800469a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800469e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80046a2:	6019      	str	r1, [r3, #0]
  return result;
 80046a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80046a8:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	fab3 f383 	clz	r3, r3
 80046b2:	b2db      	uxtb	r3, r3
 80046b4:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80046b8:	b2db      	uxtb	r3, r3
 80046ba:	f003 031f 	and.w	r3, r3, #31
 80046be:	2101      	movs	r1, #1
 80046c0:	fa01 f303 	lsl.w	r3, r1, r3
 80046c4:	4013      	ands	r3, r2
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d0a0      	beq.n	800460c <HAL_RCC_OscConfig+0x6a0>
 80046ca:	e08d      	b.n	80047e8 <HAL_RCC_OscConfig+0x87c>
 80046cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80046d0:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80046d4:	2201      	movs	r2, #1
 80046d6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80046dc:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	fa93 f2a3 	rbit	r2, r3
 80046e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80046ea:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80046ee:	601a      	str	r2, [r3, #0]
  return result;
 80046f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80046f4:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80046f8:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80046fa:	fab3 f383 	clz	r3, r3
 80046fe:	b2db      	uxtb	r3, r3
 8004700:	461a      	mov	r2, r3
 8004702:	4b68      	ldr	r3, [pc, #416]	; (80048a4 <HAL_RCC_OscConfig+0x938>)
 8004704:	4413      	add	r3, r2
 8004706:	009b      	lsls	r3, r3, #2
 8004708:	461a      	mov	r2, r3
 800470a:	2300      	movs	r3, #0
 800470c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800470e:	f7fc fdbd 	bl	800128c <HAL_GetTick>
 8004712:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004716:	e00a      	b.n	800472e <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004718:	f7fc fdb8 	bl	800128c <HAL_GetTick>
 800471c:	4602      	mov	r2, r0
 800471e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004722:	1ad3      	subs	r3, r2, r3
 8004724:	2b02      	cmp	r3, #2
 8004726:	d902      	bls.n	800472e <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8004728:	2303      	movs	r3, #3
 800472a:	f000 bc55 	b.w	8004fd8 <HAL_RCC_OscConfig+0x106c>
 800472e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004732:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8004736:	2202      	movs	r2, #2
 8004738:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800473a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800473e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	fa93 f2a3 	rbit	r2, r3
 8004748:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800474c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8004750:	601a      	str	r2, [r3, #0]
 8004752:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004756:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800475a:	2202      	movs	r2, #2
 800475c:	601a      	str	r2, [r3, #0]
 800475e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004762:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	fa93 f2a3 	rbit	r2, r3
 800476c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004770:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004774:	601a      	str	r2, [r3, #0]
 8004776:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800477a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800477e:	2202      	movs	r2, #2
 8004780:	601a      	str	r2, [r3, #0]
 8004782:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004786:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	fa93 f2a3 	rbit	r2, r3
 8004790:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004794:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8004798:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800479a:	4b41      	ldr	r3, [pc, #260]	; (80048a0 <HAL_RCC_OscConfig+0x934>)
 800479c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800479e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80047a2:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80047a6:	2102      	movs	r1, #2
 80047a8:	6019      	str	r1, [r3, #0]
 80047aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80047ae:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	fa93 f1a3 	rbit	r1, r3
 80047b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80047bc:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80047c0:	6019      	str	r1, [r3, #0]
  return result;
 80047c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80047c6:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	fab3 f383 	clz	r3, r3
 80047d0:	b2db      	uxtb	r3, r3
 80047d2:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80047d6:	b2db      	uxtb	r3, r3
 80047d8:	f003 031f 	and.w	r3, r3, #31
 80047dc:	2101      	movs	r1, #1
 80047de:	fa01 f303 	lsl.w	r3, r1, r3
 80047e2:	4013      	ands	r3, r2
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d197      	bne.n	8004718 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80047e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80047ec:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f003 0304 	and.w	r3, r3, #4
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	f000 81a1 	beq.w	8004b40 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80047fe:	2300      	movs	r3, #0
 8004800:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004804:	4b26      	ldr	r3, [pc, #152]	; (80048a0 <HAL_RCC_OscConfig+0x934>)
 8004806:	69db      	ldr	r3, [r3, #28]
 8004808:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800480c:	2b00      	cmp	r3, #0
 800480e:	d116      	bne.n	800483e <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004810:	4b23      	ldr	r3, [pc, #140]	; (80048a0 <HAL_RCC_OscConfig+0x934>)
 8004812:	69db      	ldr	r3, [r3, #28]
 8004814:	4a22      	ldr	r2, [pc, #136]	; (80048a0 <HAL_RCC_OscConfig+0x934>)
 8004816:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800481a:	61d3      	str	r3, [r2, #28]
 800481c:	4b20      	ldr	r3, [pc, #128]	; (80048a0 <HAL_RCC_OscConfig+0x934>)
 800481e:	69db      	ldr	r3, [r3, #28]
 8004820:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8004824:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004828:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 800482c:	601a      	str	r2, [r3, #0]
 800482e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004832:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8004836:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8004838:	2301      	movs	r3, #1
 800483a:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800483e:	4b1a      	ldr	r3, [pc, #104]	; (80048a8 <HAL_RCC_OscConfig+0x93c>)
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004846:	2b00      	cmp	r3, #0
 8004848:	d11a      	bne.n	8004880 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800484a:	4b17      	ldr	r3, [pc, #92]	; (80048a8 <HAL_RCC_OscConfig+0x93c>)
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	4a16      	ldr	r2, [pc, #88]	; (80048a8 <HAL_RCC_OscConfig+0x93c>)
 8004850:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004854:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004856:	f7fc fd19 	bl	800128c <HAL_GetTick>
 800485a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800485e:	e009      	b.n	8004874 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004860:	f7fc fd14 	bl	800128c <HAL_GetTick>
 8004864:	4602      	mov	r2, r0
 8004866:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800486a:	1ad3      	subs	r3, r2, r3
 800486c:	2b64      	cmp	r3, #100	; 0x64
 800486e:	d901      	bls.n	8004874 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8004870:	2303      	movs	r3, #3
 8004872:	e3b1      	b.n	8004fd8 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004874:	4b0c      	ldr	r3, [pc, #48]	; (80048a8 <HAL_RCC_OscConfig+0x93c>)
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800487c:	2b00      	cmp	r3, #0
 800487e:	d0ef      	beq.n	8004860 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004880:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004884:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	68db      	ldr	r3, [r3, #12]
 800488c:	2b01      	cmp	r3, #1
 800488e:	d10d      	bne.n	80048ac <HAL_RCC_OscConfig+0x940>
 8004890:	4b03      	ldr	r3, [pc, #12]	; (80048a0 <HAL_RCC_OscConfig+0x934>)
 8004892:	6a1b      	ldr	r3, [r3, #32]
 8004894:	4a02      	ldr	r2, [pc, #8]	; (80048a0 <HAL_RCC_OscConfig+0x934>)
 8004896:	f043 0301 	orr.w	r3, r3, #1
 800489a:	6213      	str	r3, [r2, #32]
 800489c:	e03c      	b.n	8004918 <HAL_RCC_OscConfig+0x9ac>
 800489e:	bf00      	nop
 80048a0:	40021000 	.word	0x40021000
 80048a4:	10908120 	.word	0x10908120
 80048a8:	40007000 	.word	0x40007000
 80048ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80048b0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	68db      	ldr	r3, [r3, #12]
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d10c      	bne.n	80048d6 <HAL_RCC_OscConfig+0x96a>
 80048bc:	4bc1      	ldr	r3, [pc, #772]	; (8004bc4 <HAL_RCC_OscConfig+0xc58>)
 80048be:	6a1b      	ldr	r3, [r3, #32]
 80048c0:	4ac0      	ldr	r2, [pc, #768]	; (8004bc4 <HAL_RCC_OscConfig+0xc58>)
 80048c2:	f023 0301 	bic.w	r3, r3, #1
 80048c6:	6213      	str	r3, [r2, #32]
 80048c8:	4bbe      	ldr	r3, [pc, #760]	; (8004bc4 <HAL_RCC_OscConfig+0xc58>)
 80048ca:	6a1b      	ldr	r3, [r3, #32]
 80048cc:	4abd      	ldr	r2, [pc, #756]	; (8004bc4 <HAL_RCC_OscConfig+0xc58>)
 80048ce:	f023 0304 	bic.w	r3, r3, #4
 80048d2:	6213      	str	r3, [r2, #32]
 80048d4:	e020      	b.n	8004918 <HAL_RCC_OscConfig+0x9ac>
 80048d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80048da:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	68db      	ldr	r3, [r3, #12]
 80048e2:	2b05      	cmp	r3, #5
 80048e4:	d10c      	bne.n	8004900 <HAL_RCC_OscConfig+0x994>
 80048e6:	4bb7      	ldr	r3, [pc, #732]	; (8004bc4 <HAL_RCC_OscConfig+0xc58>)
 80048e8:	6a1b      	ldr	r3, [r3, #32]
 80048ea:	4ab6      	ldr	r2, [pc, #728]	; (8004bc4 <HAL_RCC_OscConfig+0xc58>)
 80048ec:	f043 0304 	orr.w	r3, r3, #4
 80048f0:	6213      	str	r3, [r2, #32]
 80048f2:	4bb4      	ldr	r3, [pc, #720]	; (8004bc4 <HAL_RCC_OscConfig+0xc58>)
 80048f4:	6a1b      	ldr	r3, [r3, #32]
 80048f6:	4ab3      	ldr	r2, [pc, #716]	; (8004bc4 <HAL_RCC_OscConfig+0xc58>)
 80048f8:	f043 0301 	orr.w	r3, r3, #1
 80048fc:	6213      	str	r3, [r2, #32]
 80048fe:	e00b      	b.n	8004918 <HAL_RCC_OscConfig+0x9ac>
 8004900:	4bb0      	ldr	r3, [pc, #704]	; (8004bc4 <HAL_RCC_OscConfig+0xc58>)
 8004902:	6a1b      	ldr	r3, [r3, #32]
 8004904:	4aaf      	ldr	r2, [pc, #700]	; (8004bc4 <HAL_RCC_OscConfig+0xc58>)
 8004906:	f023 0301 	bic.w	r3, r3, #1
 800490a:	6213      	str	r3, [r2, #32]
 800490c:	4bad      	ldr	r3, [pc, #692]	; (8004bc4 <HAL_RCC_OscConfig+0xc58>)
 800490e:	6a1b      	ldr	r3, [r3, #32]
 8004910:	4aac      	ldr	r2, [pc, #688]	; (8004bc4 <HAL_RCC_OscConfig+0xc58>)
 8004912:	f023 0304 	bic.w	r3, r3, #4
 8004916:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004918:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800491c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	68db      	ldr	r3, [r3, #12]
 8004924:	2b00      	cmp	r3, #0
 8004926:	f000 8081 	beq.w	8004a2c <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800492a:	f7fc fcaf 	bl	800128c <HAL_GetTick>
 800492e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004932:	e00b      	b.n	800494c <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004934:	f7fc fcaa 	bl	800128c <HAL_GetTick>
 8004938:	4602      	mov	r2, r0
 800493a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800493e:	1ad3      	subs	r3, r2, r3
 8004940:	f241 3288 	movw	r2, #5000	; 0x1388
 8004944:	4293      	cmp	r3, r2
 8004946:	d901      	bls.n	800494c <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8004948:	2303      	movs	r3, #3
 800494a:	e345      	b.n	8004fd8 <HAL_RCC_OscConfig+0x106c>
 800494c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004950:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8004954:	2202      	movs	r2, #2
 8004956:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004958:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800495c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	fa93 f2a3 	rbit	r2, r3
 8004966:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800496a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800496e:	601a      	str	r2, [r3, #0]
 8004970:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004974:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8004978:	2202      	movs	r2, #2
 800497a:	601a      	str	r2, [r3, #0]
 800497c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004980:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	fa93 f2a3 	rbit	r2, r3
 800498a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800498e:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8004992:	601a      	str	r2, [r3, #0]
  return result;
 8004994:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004998:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800499c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800499e:	fab3 f383 	clz	r3, r3
 80049a2:	b2db      	uxtb	r3, r3
 80049a4:	095b      	lsrs	r3, r3, #5
 80049a6:	b2db      	uxtb	r3, r3
 80049a8:	f043 0302 	orr.w	r3, r3, #2
 80049ac:	b2db      	uxtb	r3, r3
 80049ae:	2b02      	cmp	r3, #2
 80049b0:	d102      	bne.n	80049b8 <HAL_RCC_OscConfig+0xa4c>
 80049b2:	4b84      	ldr	r3, [pc, #528]	; (8004bc4 <HAL_RCC_OscConfig+0xc58>)
 80049b4:	6a1b      	ldr	r3, [r3, #32]
 80049b6:	e013      	b.n	80049e0 <HAL_RCC_OscConfig+0xa74>
 80049b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80049bc:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80049c0:	2202      	movs	r2, #2
 80049c2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80049c8:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	fa93 f2a3 	rbit	r2, r3
 80049d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80049d6:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80049da:	601a      	str	r2, [r3, #0]
 80049dc:	4b79      	ldr	r3, [pc, #484]	; (8004bc4 <HAL_RCC_OscConfig+0xc58>)
 80049de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049e0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80049e4:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80049e8:	2102      	movs	r1, #2
 80049ea:	6011      	str	r1, [r2, #0]
 80049ec:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80049f0:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80049f4:	6812      	ldr	r2, [r2, #0]
 80049f6:	fa92 f1a2 	rbit	r1, r2
 80049fa:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80049fe:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8004a02:	6011      	str	r1, [r2, #0]
  return result;
 8004a04:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004a08:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8004a0c:	6812      	ldr	r2, [r2, #0]
 8004a0e:	fab2 f282 	clz	r2, r2
 8004a12:	b2d2      	uxtb	r2, r2
 8004a14:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004a18:	b2d2      	uxtb	r2, r2
 8004a1a:	f002 021f 	and.w	r2, r2, #31
 8004a1e:	2101      	movs	r1, #1
 8004a20:	fa01 f202 	lsl.w	r2, r1, r2
 8004a24:	4013      	ands	r3, r2
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d084      	beq.n	8004934 <HAL_RCC_OscConfig+0x9c8>
 8004a2a:	e07f      	b.n	8004b2c <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a2c:	f7fc fc2e 	bl	800128c <HAL_GetTick>
 8004a30:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a34:	e00b      	b.n	8004a4e <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004a36:	f7fc fc29 	bl	800128c <HAL_GetTick>
 8004a3a:	4602      	mov	r2, r0
 8004a3c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004a40:	1ad3      	subs	r3, r2, r3
 8004a42:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a46:	4293      	cmp	r3, r2
 8004a48:	d901      	bls.n	8004a4e <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8004a4a:	2303      	movs	r3, #3
 8004a4c:	e2c4      	b.n	8004fd8 <HAL_RCC_OscConfig+0x106c>
 8004a4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a52:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8004a56:	2202      	movs	r2, #2
 8004a58:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a5a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a5e:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	fa93 f2a3 	rbit	r2, r3
 8004a68:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a6c:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8004a70:	601a      	str	r2, [r3, #0]
 8004a72:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a76:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8004a7a:	2202      	movs	r2, #2
 8004a7c:	601a      	str	r2, [r3, #0]
 8004a7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a82:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	fa93 f2a3 	rbit	r2, r3
 8004a8c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a90:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8004a94:	601a      	str	r2, [r3, #0]
  return result;
 8004a96:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a9a:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8004a9e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004aa0:	fab3 f383 	clz	r3, r3
 8004aa4:	b2db      	uxtb	r3, r3
 8004aa6:	095b      	lsrs	r3, r3, #5
 8004aa8:	b2db      	uxtb	r3, r3
 8004aaa:	f043 0302 	orr.w	r3, r3, #2
 8004aae:	b2db      	uxtb	r3, r3
 8004ab0:	2b02      	cmp	r3, #2
 8004ab2:	d102      	bne.n	8004aba <HAL_RCC_OscConfig+0xb4e>
 8004ab4:	4b43      	ldr	r3, [pc, #268]	; (8004bc4 <HAL_RCC_OscConfig+0xc58>)
 8004ab6:	6a1b      	ldr	r3, [r3, #32]
 8004ab8:	e013      	b.n	8004ae2 <HAL_RCC_OscConfig+0xb76>
 8004aba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004abe:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8004ac2:	2202      	movs	r2, #2
 8004ac4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ac6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004aca:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	fa93 f2a3 	rbit	r2, r3
 8004ad4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ad8:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8004adc:	601a      	str	r2, [r3, #0]
 8004ade:	4b39      	ldr	r3, [pc, #228]	; (8004bc4 <HAL_RCC_OscConfig+0xc58>)
 8004ae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ae2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004ae6:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8004aea:	2102      	movs	r1, #2
 8004aec:	6011      	str	r1, [r2, #0]
 8004aee:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004af2:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8004af6:	6812      	ldr	r2, [r2, #0]
 8004af8:	fa92 f1a2 	rbit	r1, r2
 8004afc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004b00:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8004b04:	6011      	str	r1, [r2, #0]
  return result;
 8004b06:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004b0a:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8004b0e:	6812      	ldr	r2, [r2, #0]
 8004b10:	fab2 f282 	clz	r2, r2
 8004b14:	b2d2      	uxtb	r2, r2
 8004b16:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004b1a:	b2d2      	uxtb	r2, r2
 8004b1c:	f002 021f 	and.w	r2, r2, #31
 8004b20:	2101      	movs	r1, #1
 8004b22:	fa01 f202 	lsl.w	r2, r1, r2
 8004b26:	4013      	ands	r3, r2
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d184      	bne.n	8004a36 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004b2c:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8004b30:	2b01      	cmp	r3, #1
 8004b32:	d105      	bne.n	8004b40 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004b34:	4b23      	ldr	r3, [pc, #140]	; (8004bc4 <HAL_RCC_OscConfig+0xc58>)
 8004b36:	69db      	ldr	r3, [r3, #28]
 8004b38:	4a22      	ldr	r2, [pc, #136]	; (8004bc4 <HAL_RCC_OscConfig+0xc58>)
 8004b3a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004b3e:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004b40:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b44:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	69db      	ldr	r3, [r3, #28]
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	f000 8242 	beq.w	8004fd6 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004b52:	4b1c      	ldr	r3, [pc, #112]	; (8004bc4 <HAL_RCC_OscConfig+0xc58>)
 8004b54:	685b      	ldr	r3, [r3, #4]
 8004b56:	f003 030c 	and.w	r3, r3, #12
 8004b5a:	2b08      	cmp	r3, #8
 8004b5c:	f000 8213 	beq.w	8004f86 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004b60:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b64:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	69db      	ldr	r3, [r3, #28]
 8004b6c:	2b02      	cmp	r3, #2
 8004b6e:	f040 8162 	bne.w	8004e36 <HAL_RCC_OscConfig+0xeca>
 8004b72:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b76:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8004b7a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004b7e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b80:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b84:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	fa93 f2a3 	rbit	r2, r3
 8004b8e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b92:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8004b96:	601a      	str	r2, [r3, #0]
  return result;
 8004b98:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b9c:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8004ba0:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ba2:	fab3 f383 	clz	r3, r3
 8004ba6:	b2db      	uxtb	r3, r3
 8004ba8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004bac:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004bb0:	009b      	lsls	r3, r3, #2
 8004bb2:	461a      	mov	r2, r3
 8004bb4:	2300      	movs	r3, #0
 8004bb6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bb8:	f7fc fb68 	bl	800128c <HAL_GetTick>
 8004bbc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004bc0:	e00c      	b.n	8004bdc <HAL_RCC_OscConfig+0xc70>
 8004bc2:	bf00      	nop
 8004bc4:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004bc8:	f7fc fb60 	bl	800128c <HAL_GetTick>
 8004bcc:	4602      	mov	r2, r0
 8004bce:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004bd2:	1ad3      	subs	r3, r2, r3
 8004bd4:	2b02      	cmp	r3, #2
 8004bd6:	d901      	bls.n	8004bdc <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8004bd8:	2303      	movs	r3, #3
 8004bda:	e1fd      	b.n	8004fd8 <HAL_RCC_OscConfig+0x106c>
 8004bdc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004be0:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8004be4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004be8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004bee:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	fa93 f2a3 	rbit	r2, r3
 8004bf8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004bfc:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8004c00:	601a      	str	r2, [r3, #0]
  return result;
 8004c02:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c06:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8004c0a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004c0c:	fab3 f383 	clz	r3, r3
 8004c10:	b2db      	uxtb	r3, r3
 8004c12:	095b      	lsrs	r3, r3, #5
 8004c14:	b2db      	uxtb	r3, r3
 8004c16:	f043 0301 	orr.w	r3, r3, #1
 8004c1a:	b2db      	uxtb	r3, r3
 8004c1c:	2b01      	cmp	r3, #1
 8004c1e:	d102      	bne.n	8004c26 <HAL_RCC_OscConfig+0xcba>
 8004c20:	4bb0      	ldr	r3, [pc, #704]	; (8004ee4 <HAL_RCC_OscConfig+0xf78>)
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	e027      	b.n	8004c76 <HAL_RCC_OscConfig+0xd0a>
 8004c26:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c2a:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8004c2e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004c32:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c34:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c38:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	fa93 f2a3 	rbit	r2, r3
 8004c42:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c46:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8004c4a:	601a      	str	r2, [r3, #0]
 8004c4c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c50:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8004c54:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004c58:	601a      	str	r2, [r3, #0]
 8004c5a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c5e:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	fa93 f2a3 	rbit	r2, r3
 8004c68:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c6c:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8004c70:	601a      	str	r2, [r3, #0]
 8004c72:	4b9c      	ldr	r3, [pc, #624]	; (8004ee4 <HAL_RCC_OscConfig+0xf78>)
 8004c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c76:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004c7a:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8004c7e:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004c82:	6011      	str	r1, [r2, #0]
 8004c84:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004c88:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8004c8c:	6812      	ldr	r2, [r2, #0]
 8004c8e:	fa92 f1a2 	rbit	r1, r2
 8004c92:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004c96:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8004c9a:	6011      	str	r1, [r2, #0]
  return result;
 8004c9c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004ca0:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8004ca4:	6812      	ldr	r2, [r2, #0]
 8004ca6:	fab2 f282 	clz	r2, r2
 8004caa:	b2d2      	uxtb	r2, r2
 8004cac:	f042 0220 	orr.w	r2, r2, #32
 8004cb0:	b2d2      	uxtb	r2, r2
 8004cb2:	f002 021f 	and.w	r2, r2, #31
 8004cb6:	2101      	movs	r1, #1
 8004cb8:	fa01 f202 	lsl.w	r2, r1, r2
 8004cbc:	4013      	ands	r3, r2
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d182      	bne.n	8004bc8 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004cc2:	4b88      	ldr	r3, [pc, #544]	; (8004ee4 <HAL_RCC_OscConfig+0xf78>)
 8004cc4:	685b      	ldr	r3, [r3, #4]
 8004cc6:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004cca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004cce:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8004cd6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004cda:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	6a1b      	ldr	r3, [r3, #32]
 8004ce2:	430b      	orrs	r3, r1
 8004ce4:	497f      	ldr	r1, [pc, #508]	; (8004ee4 <HAL_RCC_OscConfig+0xf78>)
 8004ce6:	4313      	orrs	r3, r2
 8004ce8:	604b      	str	r3, [r1, #4]
 8004cea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004cee:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8004cf2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004cf6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cf8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004cfc:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	fa93 f2a3 	rbit	r2, r3
 8004d06:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d0a:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8004d0e:	601a      	str	r2, [r3, #0]
  return result;
 8004d10:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d14:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8004d18:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004d1a:	fab3 f383 	clz	r3, r3
 8004d1e:	b2db      	uxtb	r3, r3
 8004d20:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004d24:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004d28:	009b      	lsls	r3, r3, #2
 8004d2a:	461a      	mov	r2, r3
 8004d2c:	2301      	movs	r3, #1
 8004d2e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d30:	f7fc faac 	bl	800128c <HAL_GetTick>
 8004d34:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004d38:	e009      	b.n	8004d4e <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004d3a:	f7fc faa7 	bl	800128c <HAL_GetTick>
 8004d3e:	4602      	mov	r2, r0
 8004d40:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004d44:	1ad3      	subs	r3, r2, r3
 8004d46:	2b02      	cmp	r3, #2
 8004d48:	d901      	bls.n	8004d4e <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8004d4a:	2303      	movs	r3, #3
 8004d4c:	e144      	b.n	8004fd8 <HAL_RCC_OscConfig+0x106c>
 8004d4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d52:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8004d56:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004d5a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d5c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d60:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	fa93 f2a3 	rbit	r2, r3
 8004d6a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d6e:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8004d72:	601a      	str	r2, [r3, #0]
  return result;
 8004d74:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d78:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8004d7c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004d7e:	fab3 f383 	clz	r3, r3
 8004d82:	b2db      	uxtb	r3, r3
 8004d84:	095b      	lsrs	r3, r3, #5
 8004d86:	b2db      	uxtb	r3, r3
 8004d88:	f043 0301 	orr.w	r3, r3, #1
 8004d8c:	b2db      	uxtb	r3, r3
 8004d8e:	2b01      	cmp	r3, #1
 8004d90:	d102      	bne.n	8004d98 <HAL_RCC_OscConfig+0xe2c>
 8004d92:	4b54      	ldr	r3, [pc, #336]	; (8004ee4 <HAL_RCC_OscConfig+0xf78>)
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	e027      	b.n	8004de8 <HAL_RCC_OscConfig+0xe7c>
 8004d98:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d9c:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8004da0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004da4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004da6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004daa:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	fa93 f2a3 	rbit	r2, r3
 8004db4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004db8:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8004dbc:	601a      	str	r2, [r3, #0]
 8004dbe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004dc2:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8004dc6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004dca:	601a      	str	r2, [r3, #0]
 8004dcc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004dd0:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	fa93 f2a3 	rbit	r2, r3
 8004dda:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004dde:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8004de2:	601a      	str	r2, [r3, #0]
 8004de4:	4b3f      	ldr	r3, [pc, #252]	; (8004ee4 <HAL_RCC_OscConfig+0xf78>)
 8004de6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004de8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004dec:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8004df0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004df4:	6011      	str	r1, [r2, #0]
 8004df6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004dfa:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8004dfe:	6812      	ldr	r2, [r2, #0]
 8004e00:	fa92 f1a2 	rbit	r1, r2
 8004e04:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004e08:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8004e0c:	6011      	str	r1, [r2, #0]
  return result;
 8004e0e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004e12:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8004e16:	6812      	ldr	r2, [r2, #0]
 8004e18:	fab2 f282 	clz	r2, r2
 8004e1c:	b2d2      	uxtb	r2, r2
 8004e1e:	f042 0220 	orr.w	r2, r2, #32
 8004e22:	b2d2      	uxtb	r2, r2
 8004e24:	f002 021f 	and.w	r2, r2, #31
 8004e28:	2101      	movs	r1, #1
 8004e2a:	fa01 f202 	lsl.w	r2, r1, r2
 8004e2e:	4013      	ands	r3, r2
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d082      	beq.n	8004d3a <HAL_RCC_OscConfig+0xdce>
 8004e34:	e0cf      	b.n	8004fd6 <HAL_RCC_OscConfig+0x106a>
 8004e36:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e3a:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8004e3e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004e42:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e44:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e48:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	fa93 f2a3 	rbit	r2, r3
 8004e52:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e56:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8004e5a:	601a      	str	r2, [r3, #0]
  return result;
 8004e5c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e60:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8004e64:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e66:	fab3 f383 	clz	r3, r3
 8004e6a:	b2db      	uxtb	r3, r3
 8004e6c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004e70:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004e74:	009b      	lsls	r3, r3, #2
 8004e76:	461a      	mov	r2, r3
 8004e78:	2300      	movs	r3, #0
 8004e7a:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e7c:	f7fc fa06 	bl	800128c <HAL_GetTick>
 8004e80:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004e84:	e009      	b.n	8004e9a <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004e86:	f7fc fa01 	bl	800128c <HAL_GetTick>
 8004e8a:	4602      	mov	r2, r0
 8004e8c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004e90:	1ad3      	subs	r3, r2, r3
 8004e92:	2b02      	cmp	r3, #2
 8004e94:	d901      	bls.n	8004e9a <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8004e96:	2303      	movs	r3, #3
 8004e98:	e09e      	b.n	8004fd8 <HAL_RCC_OscConfig+0x106c>
 8004e9a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e9e:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8004ea2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004ea6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ea8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004eac:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	fa93 f2a3 	rbit	r2, r3
 8004eb6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004eba:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8004ebe:	601a      	str	r2, [r3, #0]
  return result;
 8004ec0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ec4:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8004ec8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004eca:	fab3 f383 	clz	r3, r3
 8004ece:	b2db      	uxtb	r3, r3
 8004ed0:	095b      	lsrs	r3, r3, #5
 8004ed2:	b2db      	uxtb	r3, r3
 8004ed4:	f043 0301 	orr.w	r3, r3, #1
 8004ed8:	b2db      	uxtb	r3, r3
 8004eda:	2b01      	cmp	r3, #1
 8004edc:	d104      	bne.n	8004ee8 <HAL_RCC_OscConfig+0xf7c>
 8004ede:	4b01      	ldr	r3, [pc, #4]	; (8004ee4 <HAL_RCC_OscConfig+0xf78>)
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	e029      	b.n	8004f38 <HAL_RCC_OscConfig+0xfcc>
 8004ee4:	40021000 	.word	0x40021000
 8004ee8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004eec:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8004ef0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004ef4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ef6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004efa:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	fa93 f2a3 	rbit	r2, r3
 8004f04:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f08:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8004f0c:	601a      	str	r2, [r3, #0]
 8004f0e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f12:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8004f16:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004f1a:	601a      	str	r2, [r3, #0]
 8004f1c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f20:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	fa93 f2a3 	rbit	r2, r3
 8004f2a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f2e:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8004f32:	601a      	str	r2, [r3, #0]
 8004f34:	4b2b      	ldr	r3, [pc, #172]	; (8004fe4 <HAL_RCC_OscConfig+0x1078>)
 8004f36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f38:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004f3c:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8004f40:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004f44:	6011      	str	r1, [r2, #0]
 8004f46:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004f4a:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8004f4e:	6812      	ldr	r2, [r2, #0]
 8004f50:	fa92 f1a2 	rbit	r1, r2
 8004f54:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004f58:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8004f5c:	6011      	str	r1, [r2, #0]
  return result;
 8004f5e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004f62:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8004f66:	6812      	ldr	r2, [r2, #0]
 8004f68:	fab2 f282 	clz	r2, r2
 8004f6c:	b2d2      	uxtb	r2, r2
 8004f6e:	f042 0220 	orr.w	r2, r2, #32
 8004f72:	b2d2      	uxtb	r2, r2
 8004f74:	f002 021f 	and.w	r2, r2, #31
 8004f78:	2101      	movs	r1, #1
 8004f7a:	fa01 f202 	lsl.w	r2, r1, r2
 8004f7e:	4013      	ands	r3, r2
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d180      	bne.n	8004e86 <HAL_RCC_OscConfig+0xf1a>
 8004f84:	e027      	b.n	8004fd6 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004f86:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f8a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	69db      	ldr	r3, [r3, #28]
 8004f92:	2b01      	cmp	r3, #1
 8004f94:	d101      	bne.n	8004f9a <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8004f96:	2301      	movs	r3, #1
 8004f98:	e01e      	b.n	8004fd8 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004f9a:	4b12      	ldr	r3, [pc, #72]	; (8004fe4 <HAL_RCC_OscConfig+0x1078>)
 8004f9c:	685b      	ldr	r3, [r3, #4]
 8004f9e:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004fa2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8004fa6:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004faa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004fae:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	6a1b      	ldr	r3, [r3, #32]
 8004fb6:	429a      	cmp	r2, r3
 8004fb8:	d10b      	bne.n	8004fd2 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8004fba:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8004fbe:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004fc2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004fc6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004fce:	429a      	cmp	r2, r3
 8004fd0:	d001      	beq.n	8004fd6 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8004fd2:	2301      	movs	r3, #1
 8004fd4:	e000      	b.n	8004fd8 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8004fd6:	2300      	movs	r3, #0
}
 8004fd8:	4618      	mov	r0, r3
 8004fda:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	bd80      	pop	{r7, pc}
 8004fe2:	bf00      	nop
 8004fe4:	40021000 	.word	0x40021000

08004fe8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	b09e      	sub	sp, #120	; 0x78
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	6078      	str	r0, [r7, #4]
 8004ff0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8004ff2:	2300      	movs	r3, #0
 8004ff4:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d101      	bne.n	8005000 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004ffc:	2301      	movs	r3, #1
 8004ffe:	e162      	b.n	80052c6 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005000:	4b90      	ldr	r3, [pc, #576]	; (8005244 <HAL_RCC_ClockConfig+0x25c>)
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f003 0307 	and.w	r3, r3, #7
 8005008:	683a      	ldr	r2, [r7, #0]
 800500a:	429a      	cmp	r2, r3
 800500c:	d910      	bls.n	8005030 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800500e:	4b8d      	ldr	r3, [pc, #564]	; (8005244 <HAL_RCC_ClockConfig+0x25c>)
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f023 0207 	bic.w	r2, r3, #7
 8005016:	498b      	ldr	r1, [pc, #556]	; (8005244 <HAL_RCC_ClockConfig+0x25c>)
 8005018:	683b      	ldr	r3, [r7, #0]
 800501a:	4313      	orrs	r3, r2
 800501c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800501e:	4b89      	ldr	r3, [pc, #548]	; (8005244 <HAL_RCC_ClockConfig+0x25c>)
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f003 0307 	and.w	r3, r3, #7
 8005026:	683a      	ldr	r2, [r7, #0]
 8005028:	429a      	cmp	r2, r3
 800502a:	d001      	beq.n	8005030 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800502c:	2301      	movs	r3, #1
 800502e:	e14a      	b.n	80052c6 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f003 0302 	and.w	r3, r3, #2
 8005038:	2b00      	cmp	r3, #0
 800503a:	d008      	beq.n	800504e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800503c:	4b82      	ldr	r3, [pc, #520]	; (8005248 <HAL_RCC_ClockConfig+0x260>)
 800503e:	685b      	ldr	r3, [r3, #4]
 8005040:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	689b      	ldr	r3, [r3, #8]
 8005048:	497f      	ldr	r1, [pc, #508]	; (8005248 <HAL_RCC_ClockConfig+0x260>)
 800504a:	4313      	orrs	r3, r2
 800504c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f003 0301 	and.w	r3, r3, #1
 8005056:	2b00      	cmp	r3, #0
 8005058:	f000 80dc 	beq.w	8005214 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	685b      	ldr	r3, [r3, #4]
 8005060:	2b01      	cmp	r3, #1
 8005062:	d13c      	bne.n	80050de <HAL_RCC_ClockConfig+0xf6>
 8005064:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005068:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800506a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800506c:	fa93 f3a3 	rbit	r3, r3
 8005070:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8005072:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005074:	fab3 f383 	clz	r3, r3
 8005078:	b2db      	uxtb	r3, r3
 800507a:	095b      	lsrs	r3, r3, #5
 800507c:	b2db      	uxtb	r3, r3
 800507e:	f043 0301 	orr.w	r3, r3, #1
 8005082:	b2db      	uxtb	r3, r3
 8005084:	2b01      	cmp	r3, #1
 8005086:	d102      	bne.n	800508e <HAL_RCC_ClockConfig+0xa6>
 8005088:	4b6f      	ldr	r3, [pc, #444]	; (8005248 <HAL_RCC_ClockConfig+0x260>)
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	e00f      	b.n	80050ae <HAL_RCC_ClockConfig+0xc6>
 800508e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005092:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005094:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005096:	fa93 f3a3 	rbit	r3, r3
 800509a:	667b      	str	r3, [r7, #100]	; 0x64
 800509c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80050a0:	663b      	str	r3, [r7, #96]	; 0x60
 80050a2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80050a4:	fa93 f3a3 	rbit	r3, r3
 80050a8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80050aa:	4b67      	ldr	r3, [pc, #412]	; (8005248 <HAL_RCC_ClockConfig+0x260>)
 80050ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050ae:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80050b2:	65ba      	str	r2, [r7, #88]	; 0x58
 80050b4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80050b6:	fa92 f2a2 	rbit	r2, r2
 80050ba:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80050bc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80050be:	fab2 f282 	clz	r2, r2
 80050c2:	b2d2      	uxtb	r2, r2
 80050c4:	f042 0220 	orr.w	r2, r2, #32
 80050c8:	b2d2      	uxtb	r2, r2
 80050ca:	f002 021f 	and.w	r2, r2, #31
 80050ce:	2101      	movs	r1, #1
 80050d0:	fa01 f202 	lsl.w	r2, r1, r2
 80050d4:	4013      	ands	r3, r2
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d17b      	bne.n	80051d2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80050da:	2301      	movs	r3, #1
 80050dc:	e0f3      	b.n	80052c6 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	685b      	ldr	r3, [r3, #4]
 80050e2:	2b02      	cmp	r3, #2
 80050e4:	d13c      	bne.n	8005160 <HAL_RCC_ClockConfig+0x178>
 80050e6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80050ea:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80050ee:	fa93 f3a3 	rbit	r3, r3
 80050f2:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80050f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80050f6:	fab3 f383 	clz	r3, r3
 80050fa:	b2db      	uxtb	r3, r3
 80050fc:	095b      	lsrs	r3, r3, #5
 80050fe:	b2db      	uxtb	r3, r3
 8005100:	f043 0301 	orr.w	r3, r3, #1
 8005104:	b2db      	uxtb	r3, r3
 8005106:	2b01      	cmp	r3, #1
 8005108:	d102      	bne.n	8005110 <HAL_RCC_ClockConfig+0x128>
 800510a:	4b4f      	ldr	r3, [pc, #316]	; (8005248 <HAL_RCC_ClockConfig+0x260>)
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	e00f      	b.n	8005130 <HAL_RCC_ClockConfig+0x148>
 8005110:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005114:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005116:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005118:	fa93 f3a3 	rbit	r3, r3
 800511c:	647b      	str	r3, [r7, #68]	; 0x44
 800511e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005122:	643b      	str	r3, [r7, #64]	; 0x40
 8005124:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005126:	fa93 f3a3 	rbit	r3, r3
 800512a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800512c:	4b46      	ldr	r3, [pc, #280]	; (8005248 <HAL_RCC_ClockConfig+0x260>)
 800512e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005130:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005134:	63ba      	str	r2, [r7, #56]	; 0x38
 8005136:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005138:	fa92 f2a2 	rbit	r2, r2
 800513c:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800513e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005140:	fab2 f282 	clz	r2, r2
 8005144:	b2d2      	uxtb	r2, r2
 8005146:	f042 0220 	orr.w	r2, r2, #32
 800514a:	b2d2      	uxtb	r2, r2
 800514c:	f002 021f 	and.w	r2, r2, #31
 8005150:	2101      	movs	r1, #1
 8005152:	fa01 f202 	lsl.w	r2, r1, r2
 8005156:	4013      	ands	r3, r2
 8005158:	2b00      	cmp	r3, #0
 800515a:	d13a      	bne.n	80051d2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800515c:	2301      	movs	r3, #1
 800515e:	e0b2      	b.n	80052c6 <HAL_RCC_ClockConfig+0x2de>
 8005160:	2302      	movs	r3, #2
 8005162:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005164:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005166:	fa93 f3a3 	rbit	r3, r3
 800516a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800516c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800516e:	fab3 f383 	clz	r3, r3
 8005172:	b2db      	uxtb	r3, r3
 8005174:	095b      	lsrs	r3, r3, #5
 8005176:	b2db      	uxtb	r3, r3
 8005178:	f043 0301 	orr.w	r3, r3, #1
 800517c:	b2db      	uxtb	r3, r3
 800517e:	2b01      	cmp	r3, #1
 8005180:	d102      	bne.n	8005188 <HAL_RCC_ClockConfig+0x1a0>
 8005182:	4b31      	ldr	r3, [pc, #196]	; (8005248 <HAL_RCC_ClockConfig+0x260>)
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	e00d      	b.n	80051a4 <HAL_RCC_ClockConfig+0x1bc>
 8005188:	2302      	movs	r3, #2
 800518a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800518c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800518e:	fa93 f3a3 	rbit	r3, r3
 8005192:	627b      	str	r3, [r7, #36]	; 0x24
 8005194:	2302      	movs	r3, #2
 8005196:	623b      	str	r3, [r7, #32]
 8005198:	6a3b      	ldr	r3, [r7, #32]
 800519a:	fa93 f3a3 	rbit	r3, r3
 800519e:	61fb      	str	r3, [r7, #28]
 80051a0:	4b29      	ldr	r3, [pc, #164]	; (8005248 <HAL_RCC_ClockConfig+0x260>)
 80051a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051a4:	2202      	movs	r2, #2
 80051a6:	61ba      	str	r2, [r7, #24]
 80051a8:	69ba      	ldr	r2, [r7, #24]
 80051aa:	fa92 f2a2 	rbit	r2, r2
 80051ae:	617a      	str	r2, [r7, #20]
  return result;
 80051b0:	697a      	ldr	r2, [r7, #20]
 80051b2:	fab2 f282 	clz	r2, r2
 80051b6:	b2d2      	uxtb	r2, r2
 80051b8:	f042 0220 	orr.w	r2, r2, #32
 80051bc:	b2d2      	uxtb	r2, r2
 80051be:	f002 021f 	and.w	r2, r2, #31
 80051c2:	2101      	movs	r1, #1
 80051c4:	fa01 f202 	lsl.w	r2, r1, r2
 80051c8:	4013      	ands	r3, r2
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d101      	bne.n	80051d2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80051ce:	2301      	movs	r3, #1
 80051d0:	e079      	b.n	80052c6 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80051d2:	4b1d      	ldr	r3, [pc, #116]	; (8005248 <HAL_RCC_ClockConfig+0x260>)
 80051d4:	685b      	ldr	r3, [r3, #4]
 80051d6:	f023 0203 	bic.w	r2, r3, #3
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	685b      	ldr	r3, [r3, #4]
 80051de:	491a      	ldr	r1, [pc, #104]	; (8005248 <HAL_RCC_ClockConfig+0x260>)
 80051e0:	4313      	orrs	r3, r2
 80051e2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80051e4:	f7fc f852 	bl	800128c <HAL_GetTick>
 80051e8:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80051ea:	e00a      	b.n	8005202 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80051ec:	f7fc f84e 	bl	800128c <HAL_GetTick>
 80051f0:	4602      	mov	r2, r0
 80051f2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80051f4:	1ad3      	subs	r3, r2, r3
 80051f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80051fa:	4293      	cmp	r3, r2
 80051fc:	d901      	bls.n	8005202 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80051fe:	2303      	movs	r3, #3
 8005200:	e061      	b.n	80052c6 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005202:	4b11      	ldr	r3, [pc, #68]	; (8005248 <HAL_RCC_ClockConfig+0x260>)
 8005204:	685b      	ldr	r3, [r3, #4]
 8005206:	f003 020c 	and.w	r2, r3, #12
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	685b      	ldr	r3, [r3, #4]
 800520e:	009b      	lsls	r3, r3, #2
 8005210:	429a      	cmp	r2, r3
 8005212:	d1eb      	bne.n	80051ec <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005214:	4b0b      	ldr	r3, [pc, #44]	; (8005244 <HAL_RCC_ClockConfig+0x25c>)
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f003 0307 	and.w	r3, r3, #7
 800521c:	683a      	ldr	r2, [r7, #0]
 800521e:	429a      	cmp	r2, r3
 8005220:	d214      	bcs.n	800524c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005222:	4b08      	ldr	r3, [pc, #32]	; (8005244 <HAL_RCC_ClockConfig+0x25c>)
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f023 0207 	bic.w	r2, r3, #7
 800522a:	4906      	ldr	r1, [pc, #24]	; (8005244 <HAL_RCC_ClockConfig+0x25c>)
 800522c:	683b      	ldr	r3, [r7, #0]
 800522e:	4313      	orrs	r3, r2
 8005230:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005232:	4b04      	ldr	r3, [pc, #16]	; (8005244 <HAL_RCC_ClockConfig+0x25c>)
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f003 0307 	and.w	r3, r3, #7
 800523a:	683a      	ldr	r2, [r7, #0]
 800523c:	429a      	cmp	r2, r3
 800523e:	d005      	beq.n	800524c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8005240:	2301      	movs	r3, #1
 8005242:	e040      	b.n	80052c6 <HAL_RCC_ClockConfig+0x2de>
 8005244:	40022000 	.word	0x40022000
 8005248:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f003 0304 	and.w	r3, r3, #4
 8005254:	2b00      	cmp	r3, #0
 8005256:	d008      	beq.n	800526a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005258:	4b1d      	ldr	r3, [pc, #116]	; (80052d0 <HAL_RCC_ClockConfig+0x2e8>)
 800525a:	685b      	ldr	r3, [r3, #4]
 800525c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	68db      	ldr	r3, [r3, #12]
 8005264:	491a      	ldr	r1, [pc, #104]	; (80052d0 <HAL_RCC_ClockConfig+0x2e8>)
 8005266:	4313      	orrs	r3, r2
 8005268:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f003 0308 	and.w	r3, r3, #8
 8005272:	2b00      	cmp	r3, #0
 8005274:	d009      	beq.n	800528a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005276:	4b16      	ldr	r3, [pc, #88]	; (80052d0 <HAL_RCC_ClockConfig+0x2e8>)
 8005278:	685b      	ldr	r3, [r3, #4]
 800527a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	691b      	ldr	r3, [r3, #16]
 8005282:	00db      	lsls	r3, r3, #3
 8005284:	4912      	ldr	r1, [pc, #72]	; (80052d0 <HAL_RCC_ClockConfig+0x2e8>)
 8005286:	4313      	orrs	r3, r2
 8005288:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800528a:	f000 f829 	bl	80052e0 <HAL_RCC_GetSysClockFreq>
 800528e:	4601      	mov	r1, r0
 8005290:	4b0f      	ldr	r3, [pc, #60]	; (80052d0 <HAL_RCC_ClockConfig+0x2e8>)
 8005292:	685b      	ldr	r3, [r3, #4]
 8005294:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005298:	22f0      	movs	r2, #240	; 0xf0
 800529a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800529c:	693a      	ldr	r2, [r7, #16]
 800529e:	fa92 f2a2 	rbit	r2, r2
 80052a2:	60fa      	str	r2, [r7, #12]
  return result;
 80052a4:	68fa      	ldr	r2, [r7, #12]
 80052a6:	fab2 f282 	clz	r2, r2
 80052aa:	b2d2      	uxtb	r2, r2
 80052ac:	40d3      	lsrs	r3, r2
 80052ae:	4a09      	ldr	r2, [pc, #36]	; (80052d4 <HAL_RCC_ClockConfig+0x2ec>)
 80052b0:	5cd3      	ldrb	r3, [r2, r3]
 80052b2:	fa21 f303 	lsr.w	r3, r1, r3
 80052b6:	4a08      	ldr	r2, [pc, #32]	; (80052d8 <HAL_RCC_ClockConfig+0x2f0>)
 80052b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80052ba:	4b08      	ldr	r3, [pc, #32]	; (80052dc <HAL_RCC_ClockConfig+0x2f4>)
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	4618      	mov	r0, r3
 80052c0:	f7fb ffa0 	bl	8001204 <HAL_InitTick>
  
  return HAL_OK;
 80052c4:	2300      	movs	r3, #0
}
 80052c6:	4618      	mov	r0, r3
 80052c8:	3778      	adds	r7, #120	; 0x78
 80052ca:	46bd      	mov	sp, r7
 80052cc:	bd80      	pop	{r7, pc}
 80052ce:	bf00      	nop
 80052d0:	40021000 	.word	0x40021000
 80052d4:	0800b314 	.word	0x0800b314
 80052d8:	20000000 	.word	0x20000000
 80052dc:	20000004 	.word	0x20000004

080052e0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80052e0:	b480      	push	{r7}
 80052e2:	b087      	sub	sp, #28
 80052e4:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80052e6:	2300      	movs	r3, #0
 80052e8:	60fb      	str	r3, [r7, #12]
 80052ea:	2300      	movs	r3, #0
 80052ec:	60bb      	str	r3, [r7, #8]
 80052ee:	2300      	movs	r3, #0
 80052f0:	617b      	str	r3, [r7, #20]
 80052f2:	2300      	movs	r3, #0
 80052f4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80052f6:	2300      	movs	r3, #0
 80052f8:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 80052fa:	4b1e      	ldr	r3, [pc, #120]	; (8005374 <HAL_RCC_GetSysClockFreq+0x94>)
 80052fc:	685b      	ldr	r3, [r3, #4]
 80052fe:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	f003 030c 	and.w	r3, r3, #12
 8005306:	2b04      	cmp	r3, #4
 8005308:	d002      	beq.n	8005310 <HAL_RCC_GetSysClockFreq+0x30>
 800530a:	2b08      	cmp	r3, #8
 800530c:	d003      	beq.n	8005316 <HAL_RCC_GetSysClockFreq+0x36>
 800530e:	e026      	b.n	800535e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005310:	4b19      	ldr	r3, [pc, #100]	; (8005378 <HAL_RCC_GetSysClockFreq+0x98>)
 8005312:	613b      	str	r3, [r7, #16]
      break;
 8005314:	e026      	b.n	8005364 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	0c9b      	lsrs	r3, r3, #18
 800531a:	f003 030f 	and.w	r3, r3, #15
 800531e:	4a17      	ldr	r2, [pc, #92]	; (800537c <HAL_RCC_GetSysClockFreq+0x9c>)
 8005320:	5cd3      	ldrb	r3, [r2, r3]
 8005322:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8005324:	4b13      	ldr	r3, [pc, #76]	; (8005374 <HAL_RCC_GetSysClockFreq+0x94>)
 8005326:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005328:	f003 030f 	and.w	r3, r3, #15
 800532c:	4a14      	ldr	r2, [pc, #80]	; (8005380 <HAL_RCC_GetSysClockFreq+0xa0>)
 800532e:	5cd3      	ldrb	r3, [r2, r3]
 8005330:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005338:	2b00      	cmp	r3, #0
 800533a:	d008      	beq.n	800534e <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800533c:	4a0e      	ldr	r2, [pc, #56]	; (8005378 <HAL_RCC_GetSysClockFreq+0x98>)
 800533e:	68bb      	ldr	r3, [r7, #8]
 8005340:	fbb2 f2f3 	udiv	r2, r2, r3
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	fb02 f303 	mul.w	r3, r2, r3
 800534a:	617b      	str	r3, [r7, #20]
 800534c:	e004      	b.n	8005358 <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	4a0c      	ldr	r2, [pc, #48]	; (8005384 <HAL_RCC_GetSysClockFreq+0xa4>)
 8005352:	fb02 f303 	mul.w	r3, r2, r3
 8005356:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8005358:	697b      	ldr	r3, [r7, #20]
 800535a:	613b      	str	r3, [r7, #16]
      break;
 800535c:	e002      	b.n	8005364 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800535e:	4b0a      	ldr	r3, [pc, #40]	; (8005388 <HAL_RCC_GetSysClockFreq+0xa8>)
 8005360:	613b      	str	r3, [r7, #16]
      break;
 8005362:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005364:	693b      	ldr	r3, [r7, #16]
}
 8005366:	4618      	mov	r0, r3
 8005368:	371c      	adds	r7, #28
 800536a:	46bd      	mov	sp, r7
 800536c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005370:	4770      	bx	lr
 8005372:	bf00      	nop
 8005374:	40021000 	.word	0x40021000
 8005378:	016e3600 	.word	0x016e3600
 800537c:	0800b324 	.word	0x0800b324
 8005380:	0800b334 	.word	0x0800b334
 8005384:	003d0900 	.word	0x003d0900
 8005388:	007a1200 	.word	0x007a1200

0800538c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800538c:	b580      	push	{r7, lr}
 800538e:	b092      	sub	sp, #72	; 0x48
 8005390:	af00      	add	r7, sp, #0
 8005392:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005394:	2300      	movs	r3, #0
 8005396:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8005398:	2300      	movs	r3, #0
 800539a:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 800539c:	2300      	movs	r3, #0
 800539e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	f000 80d4 	beq.w	8005558 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80053b0:	4b4e      	ldr	r3, [pc, #312]	; (80054ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80053b2:	69db      	ldr	r3, [r3, #28]
 80053b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d10e      	bne.n	80053da <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80053bc:	4b4b      	ldr	r3, [pc, #300]	; (80054ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80053be:	69db      	ldr	r3, [r3, #28]
 80053c0:	4a4a      	ldr	r2, [pc, #296]	; (80054ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80053c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80053c6:	61d3      	str	r3, [r2, #28]
 80053c8:	4b48      	ldr	r3, [pc, #288]	; (80054ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80053ca:	69db      	ldr	r3, [r3, #28]
 80053cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80053d0:	60bb      	str	r3, [r7, #8]
 80053d2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80053d4:	2301      	movs	r3, #1
 80053d6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80053da:	4b45      	ldr	r3, [pc, #276]	; (80054f0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d118      	bne.n	8005418 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80053e6:	4b42      	ldr	r3, [pc, #264]	; (80054f0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	4a41      	ldr	r2, [pc, #260]	; (80054f0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80053ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80053f0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80053f2:	f7fb ff4b 	bl	800128c <HAL_GetTick>
 80053f6:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80053f8:	e008      	b.n	800540c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80053fa:	f7fb ff47 	bl	800128c <HAL_GetTick>
 80053fe:	4602      	mov	r2, r0
 8005400:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005402:	1ad3      	subs	r3, r2, r3
 8005404:	2b64      	cmp	r3, #100	; 0x64
 8005406:	d901      	bls.n	800540c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8005408:	2303      	movs	r3, #3
 800540a:	e169      	b.n	80056e0 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800540c:	4b38      	ldr	r3, [pc, #224]	; (80054f0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005414:	2b00      	cmp	r3, #0
 8005416:	d0f0      	beq.n	80053fa <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005418:	4b34      	ldr	r3, [pc, #208]	; (80054ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800541a:	6a1b      	ldr	r3, [r3, #32]
 800541c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005420:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005422:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005424:	2b00      	cmp	r3, #0
 8005426:	f000 8084 	beq.w	8005532 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	685b      	ldr	r3, [r3, #4]
 800542e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005432:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005434:	429a      	cmp	r2, r3
 8005436:	d07c      	beq.n	8005532 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005438:	4b2c      	ldr	r3, [pc, #176]	; (80054ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800543a:	6a1b      	ldr	r3, [r3, #32]
 800543c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005440:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005442:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005446:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005448:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800544a:	fa93 f3a3 	rbit	r3, r3
 800544e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8005450:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005452:	fab3 f383 	clz	r3, r3
 8005456:	b2db      	uxtb	r3, r3
 8005458:	461a      	mov	r2, r3
 800545a:	4b26      	ldr	r3, [pc, #152]	; (80054f4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800545c:	4413      	add	r3, r2
 800545e:	009b      	lsls	r3, r3, #2
 8005460:	461a      	mov	r2, r3
 8005462:	2301      	movs	r3, #1
 8005464:	6013      	str	r3, [r2, #0]
 8005466:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800546a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800546c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800546e:	fa93 f3a3 	rbit	r3, r3
 8005472:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8005474:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005476:	fab3 f383 	clz	r3, r3
 800547a:	b2db      	uxtb	r3, r3
 800547c:	461a      	mov	r2, r3
 800547e:	4b1d      	ldr	r3, [pc, #116]	; (80054f4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005480:	4413      	add	r3, r2
 8005482:	009b      	lsls	r3, r3, #2
 8005484:	461a      	mov	r2, r3
 8005486:	2300      	movs	r3, #0
 8005488:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800548a:	4a18      	ldr	r2, [pc, #96]	; (80054ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800548c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800548e:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005490:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005492:	f003 0301 	and.w	r3, r3, #1
 8005496:	2b00      	cmp	r3, #0
 8005498:	d04b      	beq.n	8005532 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800549a:	f7fb fef7 	bl	800128c <HAL_GetTick>
 800549e:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80054a0:	e00a      	b.n	80054b8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80054a2:	f7fb fef3 	bl	800128c <HAL_GetTick>
 80054a6:	4602      	mov	r2, r0
 80054a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80054aa:	1ad3      	subs	r3, r2, r3
 80054ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80054b0:	4293      	cmp	r3, r2
 80054b2:	d901      	bls.n	80054b8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80054b4:	2303      	movs	r3, #3
 80054b6:	e113      	b.n	80056e0 <HAL_RCCEx_PeriphCLKConfig+0x354>
 80054b8:	2302      	movs	r3, #2
 80054ba:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054be:	fa93 f3a3 	rbit	r3, r3
 80054c2:	627b      	str	r3, [r7, #36]	; 0x24
 80054c4:	2302      	movs	r3, #2
 80054c6:	623b      	str	r3, [r7, #32]
 80054c8:	6a3b      	ldr	r3, [r7, #32]
 80054ca:	fa93 f3a3 	rbit	r3, r3
 80054ce:	61fb      	str	r3, [r7, #28]
  return result;
 80054d0:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80054d2:	fab3 f383 	clz	r3, r3
 80054d6:	b2db      	uxtb	r3, r3
 80054d8:	095b      	lsrs	r3, r3, #5
 80054da:	b2db      	uxtb	r3, r3
 80054dc:	f043 0302 	orr.w	r3, r3, #2
 80054e0:	b2db      	uxtb	r3, r3
 80054e2:	2b02      	cmp	r3, #2
 80054e4:	d108      	bne.n	80054f8 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80054e6:	4b01      	ldr	r3, [pc, #4]	; (80054ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80054e8:	6a1b      	ldr	r3, [r3, #32]
 80054ea:	e00d      	b.n	8005508 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80054ec:	40021000 	.word	0x40021000
 80054f0:	40007000 	.word	0x40007000
 80054f4:	10908100 	.word	0x10908100
 80054f8:	2302      	movs	r3, #2
 80054fa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054fc:	69bb      	ldr	r3, [r7, #24]
 80054fe:	fa93 f3a3 	rbit	r3, r3
 8005502:	617b      	str	r3, [r7, #20]
 8005504:	4b78      	ldr	r3, [pc, #480]	; (80056e8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005508:	2202      	movs	r2, #2
 800550a:	613a      	str	r2, [r7, #16]
 800550c:	693a      	ldr	r2, [r7, #16]
 800550e:	fa92 f2a2 	rbit	r2, r2
 8005512:	60fa      	str	r2, [r7, #12]
  return result;
 8005514:	68fa      	ldr	r2, [r7, #12]
 8005516:	fab2 f282 	clz	r2, r2
 800551a:	b2d2      	uxtb	r2, r2
 800551c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005520:	b2d2      	uxtb	r2, r2
 8005522:	f002 021f 	and.w	r2, r2, #31
 8005526:	2101      	movs	r1, #1
 8005528:	fa01 f202 	lsl.w	r2, r1, r2
 800552c:	4013      	ands	r3, r2
 800552e:	2b00      	cmp	r3, #0
 8005530:	d0b7      	beq.n	80054a2 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8005532:	4b6d      	ldr	r3, [pc, #436]	; (80056e8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005534:	6a1b      	ldr	r3, [r3, #32]
 8005536:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	685b      	ldr	r3, [r3, #4]
 800553e:	496a      	ldr	r1, [pc, #424]	; (80056e8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005540:	4313      	orrs	r3, r2
 8005542:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005544:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005548:	2b01      	cmp	r3, #1
 800554a:	d105      	bne.n	8005558 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800554c:	4b66      	ldr	r3, [pc, #408]	; (80056e8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800554e:	69db      	ldr	r3, [r3, #28]
 8005550:	4a65      	ldr	r2, [pc, #404]	; (80056e8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005552:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005556:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	f003 0301 	and.w	r3, r3, #1
 8005560:	2b00      	cmp	r3, #0
 8005562:	d008      	beq.n	8005576 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005564:	4b60      	ldr	r3, [pc, #384]	; (80056e8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005566:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005568:	f023 0203 	bic.w	r2, r3, #3
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	689b      	ldr	r3, [r3, #8]
 8005570:	495d      	ldr	r1, [pc, #372]	; (80056e8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005572:	4313      	orrs	r3, r2
 8005574:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f003 0302 	and.w	r3, r3, #2
 800557e:	2b00      	cmp	r3, #0
 8005580:	d008      	beq.n	8005594 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005582:	4b59      	ldr	r3, [pc, #356]	; (80056e8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005586:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	68db      	ldr	r3, [r3, #12]
 800558e:	4956      	ldr	r1, [pc, #344]	; (80056e8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005590:	4313      	orrs	r3, r2
 8005592:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	f003 0304 	and.w	r3, r3, #4
 800559c:	2b00      	cmp	r3, #0
 800559e:	d008      	beq.n	80055b2 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80055a0:	4b51      	ldr	r3, [pc, #324]	; (80056e8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80055a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055a4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	691b      	ldr	r3, [r3, #16]
 80055ac:	494e      	ldr	r1, [pc, #312]	; (80056e8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80055ae:	4313      	orrs	r3, r2
 80055b0:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	f003 0320 	and.w	r3, r3, #32
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d008      	beq.n	80055d0 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80055be:	4b4a      	ldr	r3, [pc, #296]	; (80056e8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80055c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055c2:	f023 0210 	bic.w	r2, r3, #16
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	69db      	ldr	r3, [r3, #28]
 80055ca:	4947      	ldr	r1, [pc, #284]	; (80056e8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80055cc:	4313      	orrs	r3, r2
 80055ce:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d008      	beq.n	80055ee <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80055dc:	4b42      	ldr	r3, [pc, #264]	; (80056e8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80055de:	685b      	ldr	r3, [r3, #4]
 80055e0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055e8:	493f      	ldr	r1, [pc, #252]	; (80056e8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80055ea:	4313      	orrs	r3, r2
 80055ec:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d008      	beq.n	800560c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80055fa:	4b3b      	ldr	r3, [pc, #236]	; (80056e8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80055fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055fe:	f023 0220 	bic.w	r2, r3, #32
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	6a1b      	ldr	r3, [r3, #32]
 8005606:	4938      	ldr	r1, [pc, #224]	; (80056e8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005608:	4313      	orrs	r3, r2
 800560a:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	f003 0308 	and.w	r3, r3, #8
 8005614:	2b00      	cmp	r3, #0
 8005616:	d008      	beq.n	800562a <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005618:	4b33      	ldr	r3, [pc, #204]	; (80056e8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800561a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800561c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	695b      	ldr	r3, [r3, #20]
 8005624:	4930      	ldr	r1, [pc, #192]	; (80056e8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005626:	4313      	orrs	r3, r2
 8005628:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	f003 0310 	and.w	r3, r3, #16
 8005632:	2b00      	cmp	r3, #0
 8005634:	d008      	beq.n	8005648 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005636:	4b2c      	ldr	r3, [pc, #176]	; (80056e8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800563a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	699b      	ldr	r3, [r3, #24]
 8005642:	4929      	ldr	r1, [pc, #164]	; (80056e8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005644:	4313      	orrs	r3, r2
 8005646:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005650:	2b00      	cmp	r3, #0
 8005652:	d008      	beq.n	8005666 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005654:	4b24      	ldr	r3, [pc, #144]	; (80056e8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005656:	685b      	ldr	r3, [r3, #4]
 8005658:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005660:	4921      	ldr	r1, [pc, #132]	; (80056e8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005662:	4313      	orrs	r3, r2
 8005664:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800566e:	2b00      	cmp	r3, #0
 8005670:	d008      	beq.n	8005684 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005672:	4b1d      	ldr	r3, [pc, #116]	; (80056e8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005674:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005676:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800567e:	491a      	ldr	r1, [pc, #104]	; (80056e8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005680:	4313      	orrs	r3, r2
 8005682:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800568c:	2b00      	cmp	r3, #0
 800568e:	d008      	beq.n	80056a2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8005690:	4b15      	ldr	r3, [pc, #84]	; (80056e8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005692:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005694:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800569c:	4912      	ldr	r1, [pc, #72]	; (80056e8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800569e:	4313      	orrs	r3, r2
 80056a0:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d008      	beq.n	80056c0 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80056ae:	4b0e      	ldr	r3, [pc, #56]	; (80056e8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80056b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056b2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056ba:	490b      	ldr	r1, [pc, #44]	; (80056e8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80056bc:	4313      	orrs	r3, r2
 80056be:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d008      	beq.n	80056de <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80056cc:	4b06      	ldr	r3, [pc, #24]	; (80056e8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80056ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056d0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056d8:	4903      	ldr	r1, [pc, #12]	; (80056e8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80056da:	4313      	orrs	r3, r2
 80056dc:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80056de:	2300      	movs	r3, #0
}
 80056e0:	4618      	mov	r0, r3
 80056e2:	3748      	adds	r7, #72	; 0x48
 80056e4:	46bd      	mov	sp, r7
 80056e6:	bd80      	pop	{r7, pc}
 80056e8:	40021000 	.word	0x40021000

080056ec <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80056ec:	b480      	push	{r7}
 80056ee:	b085      	sub	sp, #20
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	2200      	movs	r2, #0
 80056f8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80056fc:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8005700:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	b29a      	uxth	r2, r3
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800570c:	2300      	movs	r3, #0
}
 800570e:	4618      	mov	r0, r3
 8005710:	3714      	adds	r7, #20
 8005712:	46bd      	mov	sp, r7
 8005714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005718:	4770      	bx	lr

0800571a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800571a:	b480      	push	{r7}
 800571c:	b085      	sub	sp, #20
 800571e:	af00      	add	r7, sp, #0
 8005720:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005722:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8005726:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800572e:	b29a      	uxth	r2, r3
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	b29b      	uxth	r3, r3
 8005734:	43db      	mvns	r3, r3
 8005736:	b29b      	uxth	r3, r3
 8005738:	4013      	ands	r3, r2
 800573a:	b29a      	uxth	r2, r3
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005742:	2300      	movs	r3, #0
}
 8005744:	4618      	mov	r0, r3
 8005746:	3714      	adds	r7, #20
 8005748:	46bd      	mov	sp, r7
 800574a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574e:	4770      	bx	lr

08005750 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005750:	b480      	push	{r7}
 8005752:	b085      	sub	sp, #20
 8005754:	af00      	add	r7, sp, #0
 8005756:	60f8      	str	r0, [r7, #12]
 8005758:	1d3b      	adds	r3, r7, #4
 800575a:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	2201      	movs	r2, #1
 8005762:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	2200      	movs	r2, #0
 800576a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	2200      	movs	r2, #0
 8005772:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	2200      	movs	r2, #0
 800577a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800577e:	2300      	movs	r3, #0
}
 8005780:	4618      	mov	r0, r3
 8005782:	3714      	adds	r7, #20
 8005784:	46bd      	mov	sp, r7
 8005786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578a:	4770      	bx	lr

0800578c <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800578c:	b480      	push	{r7}
 800578e:	b09d      	sub	sp, #116	; 0x74
 8005790:	af00      	add	r7, sp, #0
 8005792:	6078      	str	r0, [r7, #4]
 8005794:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8005796:	2300      	movs	r3, #0
 8005798:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800579c:	687a      	ldr	r2, [r7, #4]
 800579e:	683b      	ldr	r3, [r7, #0]
 80057a0:	781b      	ldrb	r3, [r3, #0]
 80057a2:	009b      	lsls	r3, r3, #2
 80057a4:	4413      	add	r3, r2
 80057a6:	881b      	ldrh	r3, [r3, #0]
 80057a8:	b29b      	uxth	r3, r3
 80057aa:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80057ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057b2:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 80057b6:	683b      	ldr	r3, [r7, #0]
 80057b8:	78db      	ldrb	r3, [r3, #3]
 80057ba:	2b03      	cmp	r3, #3
 80057bc:	d81f      	bhi.n	80057fe <USB_ActivateEndpoint+0x72>
 80057be:	a201      	add	r2, pc, #4	; (adr r2, 80057c4 <USB_ActivateEndpoint+0x38>)
 80057c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057c4:	080057d5 	.word	0x080057d5
 80057c8:	080057f1 	.word	0x080057f1
 80057cc:	08005807 	.word	0x08005807
 80057d0:	080057e3 	.word	0x080057e3
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80057d4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80057d8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80057dc:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 80057e0:	e012      	b.n	8005808 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80057e2:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80057e6:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 80057ea:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 80057ee:	e00b      	b.n	8005808 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80057f0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80057f4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80057f8:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 80057fc:	e004      	b.n	8005808 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80057fe:	2301      	movs	r3, #1
 8005800:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 8005804:	e000      	b.n	8005808 <USB_ActivateEndpoint+0x7c>
      break;
 8005806:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8005808:	687a      	ldr	r2, [r7, #4]
 800580a:	683b      	ldr	r3, [r7, #0]
 800580c:	781b      	ldrb	r3, [r3, #0]
 800580e:	009b      	lsls	r3, r3, #2
 8005810:	441a      	add	r2, r3
 8005812:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8005816:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800581a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800581e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005822:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005826:	b29b      	uxth	r3, r3
 8005828:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800582a:	687a      	ldr	r2, [r7, #4]
 800582c:	683b      	ldr	r3, [r7, #0]
 800582e:	781b      	ldrb	r3, [r3, #0]
 8005830:	009b      	lsls	r3, r3, #2
 8005832:	4413      	add	r3, r2
 8005834:	881b      	ldrh	r3, [r3, #0]
 8005836:	b29b      	uxth	r3, r3
 8005838:	b21b      	sxth	r3, r3
 800583a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800583e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005842:	b21a      	sxth	r2, r3
 8005844:	683b      	ldr	r3, [r7, #0]
 8005846:	781b      	ldrb	r3, [r3, #0]
 8005848:	b21b      	sxth	r3, r3
 800584a:	4313      	orrs	r3, r2
 800584c:	b21b      	sxth	r3, r3
 800584e:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8005852:	687a      	ldr	r2, [r7, #4]
 8005854:	683b      	ldr	r3, [r7, #0]
 8005856:	781b      	ldrb	r3, [r3, #0]
 8005858:	009b      	lsls	r3, r3, #2
 800585a:	441a      	add	r2, r3
 800585c:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8005860:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005864:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005868:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800586c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005870:	b29b      	uxth	r3, r3
 8005872:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8005874:	683b      	ldr	r3, [r7, #0]
 8005876:	7b1b      	ldrb	r3, [r3, #12]
 8005878:	2b00      	cmp	r3, #0
 800587a:	f040 8178 	bne.w	8005b6e <USB_ActivateEndpoint+0x3e2>
  {
    if (ep->is_in != 0U)
 800587e:	683b      	ldr	r3, [r7, #0]
 8005880:	785b      	ldrb	r3, [r3, #1]
 8005882:	2b00      	cmp	r3, #0
 8005884:	f000 8084 	beq.w	8005990 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	61bb      	str	r3, [r7, #24]
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005892:	b29b      	uxth	r3, r3
 8005894:	461a      	mov	r2, r3
 8005896:	69bb      	ldr	r3, [r7, #24]
 8005898:	4413      	add	r3, r2
 800589a:	61bb      	str	r3, [r7, #24]
 800589c:	683b      	ldr	r3, [r7, #0]
 800589e:	781b      	ldrb	r3, [r3, #0]
 80058a0:	011a      	lsls	r2, r3, #4
 80058a2:	69bb      	ldr	r3, [r7, #24]
 80058a4:	4413      	add	r3, r2
 80058a6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80058aa:	617b      	str	r3, [r7, #20]
 80058ac:	683b      	ldr	r3, [r7, #0]
 80058ae:	88db      	ldrh	r3, [r3, #6]
 80058b0:	085b      	lsrs	r3, r3, #1
 80058b2:	b29b      	uxth	r3, r3
 80058b4:	005b      	lsls	r3, r3, #1
 80058b6:	b29a      	uxth	r2, r3
 80058b8:	697b      	ldr	r3, [r7, #20]
 80058ba:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80058bc:	687a      	ldr	r2, [r7, #4]
 80058be:	683b      	ldr	r3, [r7, #0]
 80058c0:	781b      	ldrb	r3, [r3, #0]
 80058c2:	009b      	lsls	r3, r3, #2
 80058c4:	4413      	add	r3, r2
 80058c6:	881b      	ldrh	r3, [r3, #0]
 80058c8:	827b      	strh	r3, [r7, #18]
 80058ca:	8a7b      	ldrh	r3, [r7, #18]
 80058cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d01b      	beq.n	800590c <USB_ActivateEndpoint+0x180>
 80058d4:	687a      	ldr	r2, [r7, #4]
 80058d6:	683b      	ldr	r3, [r7, #0]
 80058d8:	781b      	ldrb	r3, [r3, #0]
 80058da:	009b      	lsls	r3, r3, #2
 80058dc:	4413      	add	r3, r2
 80058de:	881b      	ldrh	r3, [r3, #0]
 80058e0:	b29b      	uxth	r3, r3
 80058e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80058e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058ea:	823b      	strh	r3, [r7, #16]
 80058ec:	687a      	ldr	r2, [r7, #4]
 80058ee:	683b      	ldr	r3, [r7, #0]
 80058f0:	781b      	ldrb	r3, [r3, #0]
 80058f2:	009b      	lsls	r3, r3, #2
 80058f4:	441a      	add	r2, r3
 80058f6:	8a3b      	ldrh	r3, [r7, #16]
 80058f8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80058fc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005900:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005904:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005908:	b29b      	uxth	r3, r3
 800590a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800590c:	683b      	ldr	r3, [r7, #0]
 800590e:	78db      	ldrb	r3, [r3, #3]
 8005910:	2b01      	cmp	r3, #1
 8005912:	d020      	beq.n	8005956 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005914:	687a      	ldr	r2, [r7, #4]
 8005916:	683b      	ldr	r3, [r7, #0]
 8005918:	781b      	ldrb	r3, [r3, #0]
 800591a:	009b      	lsls	r3, r3, #2
 800591c:	4413      	add	r3, r2
 800591e:	881b      	ldrh	r3, [r3, #0]
 8005920:	b29b      	uxth	r3, r3
 8005922:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005926:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800592a:	81bb      	strh	r3, [r7, #12]
 800592c:	89bb      	ldrh	r3, [r7, #12]
 800592e:	f083 0320 	eor.w	r3, r3, #32
 8005932:	81bb      	strh	r3, [r7, #12]
 8005934:	687a      	ldr	r2, [r7, #4]
 8005936:	683b      	ldr	r3, [r7, #0]
 8005938:	781b      	ldrb	r3, [r3, #0]
 800593a:	009b      	lsls	r3, r3, #2
 800593c:	441a      	add	r2, r3
 800593e:	89bb      	ldrh	r3, [r7, #12]
 8005940:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005944:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005948:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800594c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005950:	b29b      	uxth	r3, r3
 8005952:	8013      	strh	r3, [r2, #0]
 8005954:	e2d5      	b.n	8005f02 <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005956:	687a      	ldr	r2, [r7, #4]
 8005958:	683b      	ldr	r3, [r7, #0]
 800595a:	781b      	ldrb	r3, [r3, #0]
 800595c:	009b      	lsls	r3, r3, #2
 800595e:	4413      	add	r3, r2
 8005960:	881b      	ldrh	r3, [r3, #0]
 8005962:	b29b      	uxth	r3, r3
 8005964:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005968:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800596c:	81fb      	strh	r3, [r7, #14]
 800596e:	687a      	ldr	r2, [r7, #4]
 8005970:	683b      	ldr	r3, [r7, #0]
 8005972:	781b      	ldrb	r3, [r3, #0]
 8005974:	009b      	lsls	r3, r3, #2
 8005976:	441a      	add	r2, r3
 8005978:	89fb      	ldrh	r3, [r7, #14]
 800597a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800597e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005982:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005986:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800598a:	b29b      	uxth	r3, r3
 800598c:	8013      	strh	r3, [r2, #0]
 800598e:	e2b8      	b.n	8005f02 <USB_ActivateEndpoint+0x776>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	633b      	str	r3, [r7, #48]	; 0x30
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800599a:	b29b      	uxth	r3, r3
 800599c:	461a      	mov	r2, r3
 800599e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059a0:	4413      	add	r3, r2
 80059a2:	633b      	str	r3, [r7, #48]	; 0x30
 80059a4:	683b      	ldr	r3, [r7, #0]
 80059a6:	781b      	ldrb	r3, [r3, #0]
 80059a8:	011a      	lsls	r2, r3, #4
 80059aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059ac:	4413      	add	r3, r2
 80059ae:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80059b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80059b4:	683b      	ldr	r3, [r7, #0]
 80059b6:	88db      	ldrh	r3, [r3, #6]
 80059b8:	085b      	lsrs	r3, r3, #1
 80059ba:	b29b      	uxth	r3, r3
 80059bc:	005b      	lsls	r3, r3, #1
 80059be:	b29a      	uxth	r2, r3
 80059c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059c2:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	62bb      	str	r3, [r7, #40]	; 0x28
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80059ce:	b29b      	uxth	r3, r3
 80059d0:	461a      	mov	r2, r3
 80059d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059d4:	4413      	add	r3, r2
 80059d6:	62bb      	str	r3, [r7, #40]	; 0x28
 80059d8:	683b      	ldr	r3, [r7, #0]
 80059da:	781b      	ldrb	r3, [r3, #0]
 80059dc:	011a      	lsls	r2, r3, #4
 80059de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059e0:	4413      	add	r3, r2
 80059e2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80059e6:	627b      	str	r3, [r7, #36]	; 0x24
 80059e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059ea:	881b      	ldrh	r3, [r3, #0]
 80059ec:	b29b      	uxth	r3, r3
 80059ee:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80059f2:	b29a      	uxth	r2, r3
 80059f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059f6:	801a      	strh	r2, [r3, #0]
 80059f8:	683b      	ldr	r3, [r7, #0]
 80059fa:	691b      	ldr	r3, [r3, #16]
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d10a      	bne.n	8005a16 <USB_ActivateEndpoint+0x28a>
 8005a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a02:	881b      	ldrh	r3, [r3, #0]
 8005a04:	b29b      	uxth	r3, r3
 8005a06:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a0a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a0e:	b29a      	uxth	r2, r3
 8005a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a12:	801a      	strh	r2, [r3, #0]
 8005a14:	e039      	b.n	8005a8a <USB_ActivateEndpoint+0x2fe>
 8005a16:	683b      	ldr	r3, [r7, #0]
 8005a18:	691b      	ldr	r3, [r3, #16]
 8005a1a:	2b3e      	cmp	r3, #62	; 0x3e
 8005a1c:	d818      	bhi.n	8005a50 <USB_ActivateEndpoint+0x2c4>
 8005a1e:	683b      	ldr	r3, [r7, #0]
 8005a20:	691b      	ldr	r3, [r3, #16]
 8005a22:	085b      	lsrs	r3, r3, #1
 8005a24:	66bb      	str	r3, [r7, #104]	; 0x68
 8005a26:	683b      	ldr	r3, [r7, #0]
 8005a28:	691b      	ldr	r3, [r3, #16]
 8005a2a:	f003 0301 	and.w	r3, r3, #1
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d002      	beq.n	8005a38 <USB_ActivateEndpoint+0x2ac>
 8005a32:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005a34:	3301      	adds	r3, #1
 8005a36:	66bb      	str	r3, [r7, #104]	; 0x68
 8005a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a3a:	881b      	ldrh	r3, [r3, #0]
 8005a3c:	b29a      	uxth	r2, r3
 8005a3e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005a40:	b29b      	uxth	r3, r3
 8005a42:	029b      	lsls	r3, r3, #10
 8005a44:	b29b      	uxth	r3, r3
 8005a46:	4313      	orrs	r3, r2
 8005a48:	b29a      	uxth	r2, r3
 8005a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a4c:	801a      	strh	r2, [r3, #0]
 8005a4e:	e01c      	b.n	8005a8a <USB_ActivateEndpoint+0x2fe>
 8005a50:	683b      	ldr	r3, [r7, #0]
 8005a52:	691b      	ldr	r3, [r3, #16]
 8005a54:	095b      	lsrs	r3, r3, #5
 8005a56:	66bb      	str	r3, [r7, #104]	; 0x68
 8005a58:	683b      	ldr	r3, [r7, #0]
 8005a5a:	691b      	ldr	r3, [r3, #16]
 8005a5c:	f003 031f 	and.w	r3, r3, #31
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d102      	bne.n	8005a6a <USB_ActivateEndpoint+0x2de>
 8005a64:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005a66:	3b01      	subs	r3, #1
 8005a68:	66bb      	str	r3, [r7, #104]	; 0x68
 8005a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a6c:	881b      	ldrh	r3, [r3, #0]
 8005a6e:	b29a      	uxth	r2, r3
 8005a70:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005a72:	b29b      	uxth	r3, r3
 8005a74:	029b      	lsls	r3, r3, #10
 8005a76:	b29b      	uxth	r3, r3
 8005a78:	4313      	orrs	r3, r2
 8005a7a:	b29b      	uxth	r3, r3
 8005a7c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a80:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a84:	b29a      	uxth	r2, r3
 8005a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a88:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005a8a:	687a      	ldr	r2, [r7, #4]
 8005a8c:	683b      	ldr	r3, [r7, #0]
 8005a8e:	781b      	ldrb	r3, [r3, #0]
 8005a90:	009b      	lsls	r3, r3, #2
 8005a92:	4413      	add	r3, r2
 8005a94:	881b      	ldrh	r3, [r3, #0]
 8005a96:	847b      	strh	r3, [r7, #34]	; 0x22
 8005a98:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005a9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d01b      	beq.n	8005ada <USB_ActivateEndpoint+0x34e>
 8005aa2:	687a      	ldr	r2, [r7, #4]
 8005aa4:	683b      	ldr	r3, [r7, #0]
 8005aa6:	781b      	ldrb	r3, [r3, #0]
 8005aa8:	009b      	lsls	r3, r3, #2
 8005aaa:	4413      	add	r3, r2
 8005aac:	881b      	ldrh	r3, [r3, #0]
 8005aae:	b29b      	uxth	r3, r3
 8005ab0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ab4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ab8:	843b      	strh	r3, [r7, #32]
 8005aba:	687a      	ldr	r2, [r7, #4]
 8005abc:	683b      	ldr	r3, [r7, #0]
 8005abe:	781b      	ldrb	r3, [r3, #0]
 8005ac0:	009b      	lsls	r3, r3, #2
 8005ac2:	441a      	add	r2, r3
 8005ac4:	8c3b      	ldrh	r3, [r7, #32]
 8005ac6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005aca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ace:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005ad2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ad6:	b29b      	uxth	r3, r3
 8005ad8:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8005ada:	683b      	ldr	r3, [r7, #0]
 8005adc:	781b      	ldrb	r3, [r3, #0]
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d124      	bne.n	8005b2c <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005ae2:	687a      	ldr	r2, [r7, #4]
 8005ae4:	683b      	ldr	r3, [r7, #0]
 8005ae6:	781b      	ldrb	r3, [r3, #0]
 8005ae8:	009b      	lsls	r3, r3, #2
 8005aea:	4413      	add	r3, r2
 8005aec:	881b      	ldrh	r3, [r3, #0]
 8005aee:	b29b      	uxth	r3, r3
 8005af0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005af4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005af8:	83bb      	strh	r3, [r7, #28]
 8005afa:	8bbb      	ldrh	r3, [r7, #28]
 8005afc:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005b00:	83bb      	strh	r3, [r7, #28]
 8005b02:	8bbb      	ldrh	r3, [r7, #28]
 8005b04:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005b08:	83bb      	strh	r3, [r7, #28]
 8005b0a:	687a      	ldr	r2, [r7, #4]
 8005b0c:	683b      	ldr	r3, [r7, #0]
 8005b0e:	781b      	ldrb	r3, [r3, #0]
 8005b10:	009b      	lsls	r3, r3, #2
 8005b12:	441a      	add	r2, r3
 8005b14:	8bbb      	ldrh	r3, [r7, #28]
 8005b16:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b1a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b1e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b26:	b29b      	uxth	r3, r3
 8005b28:	8013      	strh	r3, [r2, #0]
 8005b2a:	e1ea      	b.n	8005f02 <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8005b2c:	687a      	ldr	r2, [r7, #4]
 8005b2e:	683b      	ldr	r3, [r7, #0]
 8005b30:	781b      	ldrb	r3, [r3, #0]
 8005b32:	009b      	lsls	r3, r3, #2
 8005b34:	4413      	add	r3, r2
 8005b36:	881b      	ldrh	r3, [r3, #0]
 8005b38:	b29b      	uxth	r3, r3
 8005b3a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005b3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b42:	83fb      	strh	r3, [r7, #30]
 8005b44:	8bfb      	ldrh	r3, [r7, #30]
 8005b46:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005b4a:	83fb      	strh	r3, [r7, #30]
 8005b4c:	687a      	ldr	r2, [r7, #4]
 8005b4e:	683b      	ldr	r3, [r7, #0]
 8005b50:	781b      	ldrb	r3, [r3, #0]
 8005b52:	009b      	lsls	r3, r3, #2
 8005b54:	441a      	add	r2, r3
 8005b56:	8bfb      	ldrh	r3, [r7, #30]
 8005b58:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b5c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b60:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b68:	b29b      	uxth	r3, r3
 8005b6a:	8013      	strh	r3, [r2, #0]
 8005b6c:	e1c9      	b.n	8005f02 <USB_ActivateEndpoint+0x776>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8005b6e:	683b      	ldr	r3, [r7, #0]
 8005b70:	78db      	ldrb	r3, [r3, #3]
 8005b72:	2b02      	cmp	r3, #2
 8005b74:	d11e      	bne.n	8005bb4 <USB_ActivateEndpoint+0x428>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8005b76:	687a      	ldr	r2, [r7, #4]
 8005b78:	683b      	ldr	r3, [r7, #0]
 8005b7a:	781b      	ldrb	r3, [r3, #0]
 8005b7c:	009b      	lsls	r3, r3, #2
 8005b7e:	4413      	add	r3, r2
 8005b80:	881b      	ldrh	r3, [r3, #0]
 8005b82:	b29b      	uxth	r3, r3
 8005b84:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b88:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b8c:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8005b90:	687a      	ldr	r2, [r7, #4]
 8005b92:	683b      	ldr	r3, [r7, #0]
 8005b94:	781b      	ldrb	r3, [r3, #0]
 8005b96:	009b      	lsls	r3, r3, #2
 8005b98:	441a      	add	r2, r3
 8005b9a:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8005b9e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ba2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ba6:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005baa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005bae:	b29b      	uxth	r3, r3
 8005bb0:	8013      	strh	r3, [r2, #0]
 8005bb2:	e01d      	b.n	8005bf0 <USB_ActivateEndpoint+0x464>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8005bb4:	687a      	ldr	r2, [r7, #4]
 8005bb6:	683b      	ldr	r3, [r7, #0]
 8005bb8:	781b      	ldrb	r3, [r3, #0]
 8005bba:	009b      	lsls	r3, r3, #2
 8005bbc:	4413      	add	r3, r2
 8005bbe:	881b      	ldrh	r3, [r3, #0]
 8005bc0:	b29b      	uxth	r3, r3
 8005bc2:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8005bc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bca:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8005bce:	687a      	ldr	r2, [r7, #4]
 8005bd0:	683b      	ldr	r3, [r7, #0]
 8005bd2:	781b      	ldrb	r3, [r3, #0]
 8005bd4:	009b      	lsls	r3, r3, #2
 8005bd6:	441a      	add	r2, r3
 8005bd8:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005bdc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005be0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005be4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005be8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005bec:	b29b      	uxth	r3, r3
 8005bee:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005bfa:	b29b      	uxth	r3, r3
 8005bfc:	461a      	mov	r2, r3
 8005bfe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005c00:	4413      	add	r3, r2
 8005c02:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005c04:	683b      	ldr	r3, [r7, #0]
 8005c06:	781b      	ldrb	r3, [r3, #0]
 8005c08:	011a      	lsls	r2, r3, #4
 8005c0a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005c0c:	4413      	add	r3, r2
 8005c0e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005c12:	65bb      	str	r3, [r7, #88]	; 0x58
 8005c14:	683b      	ldr	r3, [r7, #0]
 8005c16:	891b      	ldrh	r3, [r3, #8]
 8005c18:	085b      	lsrs	r3, r3, #1
 8005c1a:	b29b      	uxth	r3, r3
 8005c1c:	005b      	lsls	r3, r3, #1
 8005c1e:	b29a      	uxth	r2, r3
 8005c20:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005c22:	801a      	strh	r2, [r3, #0]
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	657b      	str	r3, [r7, #84]	; 0x54
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c2e:	b29b      	uxth	r3, r3
 8005c30:	461a      	mov	r2, r3
 8005c32:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005c34:	4413      	add	r3, r2
 8005c36:	657b      	str	r3, [r7, #84]	; 0x54
 8005c38:	683b      	ldr	r3, [r7, #0]
 8005c3a:	781b      	ldrb	r3, [r3, #0]
 8005c3c:	011a      	lsls	r2, r3, #4
 8005c3e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005c40:	4413      	add	r3, r2
 8005c42:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8005c46:	653b      	str	r3, [r7, #80]	; 0x50
 8005c48:	683b      	ldr	r3, [r7, #0]
 8005c4a:	895b      	ldrh	r3, [r3, #10]
 8005c4c:	085b      	lsrs	r3, r3, #1
 8005c4e:	b29b      	uxth	r3, r3
 8005c50:	005b      	lsls	r3, r3, #1
 8005c52:	b29a      	uxth	r2, r3
 8005c54:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c56:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8005c58:	683b      	ldr	r3, [r7, #0]
 8005c5a:	785b      	ldrb	r3, [r3, #1]
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	f040 8093 	bne.w	8005d88 <USB_ActivateEndpoint+0x5fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005c62:	687a      	ldr	r2, [r7, #4]
 8005c64:	683b      	ldr	r3, [r7, #0]
 8005c66:	781b      	ldrb	r3, [r3, #0]
 8005c68:	009b      	lsls	r3, r3, #2
 8005c6a:	4413      	add	r3, r2
 8005c6c:	881b      	ldrh	r3, [r3, #0]
 8005c6e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8005c72:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005c76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d01b      	beq.n	8005cb6 <USB_ActivateEndpoint+0x52a>
 8005c7e:	687a      	ldr	r2, [r7, #4]
 8005c80:	683b      	ldr	r3, [r7, #0]
 8005c82:	781b      	ldrb	r3, [r3, #0]
 8005c84:	009b      	lsls	r3, r3, #2
 8005c86:	4413      	add	r3, r2
 8005c88:	881b      	ldrh	r3, [r3, #0]
 8005c8a:	b29b      	uxth	r3, r3
 8005c8c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c90:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c94:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8005c96:	687a      	ldr	r2, [r7, #4]
 8005c98:	683b      	ldr	r3, [r7, #0]
 8005c9a:	781b      	ldrb	r3, [r3, #0]
 8005c9c:	009b      	lsls	r3, r3, #2
 8005c9e:	441a      	add	r2, r3
 8005ca0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8005ca2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ca6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005caa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005cae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005cb2:	b29b      	uxth	r3, r3
 8005cb4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005cb6:	687a      	ldr	r2, [r7, #4]
 8005cb8:	683b      	ldr	r3, [r7, #0]
 8005cba:	781b      	ldrb	r3, [r3, #0]
 8005cbc:	009b      	lsls	r3, r3, #2
 8005cbe:	4413      	add	r3, r2
 8005cc0:	881b      	ldrh	r3, [r3, #0]
 8005cc2:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8005cc4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8005cc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d01b      	beq.n	8005d06 <USB_ActivateEndpoint+0x57a>
 8005cce:	687a      	ldr	r2, [r7, #4]
 8005cd0:	683b      	ldr	r3, [r7, #0]
 8005cd2:	781b      	ldrb	r3, [r3, #0]
 8005cd4:	009b      	lsls	r3, r3, #2
 8005cd6:	4413      	add	r3, r2
 8005cd8:	881b      	ldrh	r3, [r3, #0]
 8005cda:	b29b      	uxth	r3, r3
 8005cdc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ce0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ce4:	877b      	strh	r3, [r7, #58]	; 0x3a
 8005ce6:	687a      	ldr	r2, [r7, #4]
 8005ce8:	683b      	ldr	r3, [r7, #0]
 8005cea:	781b      	ldrb	r3, [r3, #0]
 8005cec:	009b      	lsls	r3, r3, #2
 8005cee:	441a      	add	r2, r3
 8005cf0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8005cf2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005cf6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005cfa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005cfe:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005d02:	b29b      	uxth	r3, r3
 8005d04:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005d06:	687a      	ldr	r2, [r7, #4]
 8005d08:	683b      	ldr	r3, [r7, #0]
 8005d0a:	781b      	ldrb	r3, [r3, #0]
 8005d0c:	009b      	lsls	r3, r3, #2
 8005d0e:	4413      	add	r3, r2
 8005d10:	881b      	ldrh	r3, [r3, #0]
 8005d12:	b29b      	uxth	r3, r3
 8005d14:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005d18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d1c:	873b      	strh	r3, [r7, #56]	; 0x38
 8005d1e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005d20:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005d24:	873b      	strh	r3, [r7, #56]	; 0x38
 8005d26:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005d28:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005d2c:	873b      	strh	r3, [r7, #56]	; 0x38
 8005d2e:	687a      	ldr	r2, [r7, #4]
 8005d30:	683b      	ldr	r3, [r7, #0]
 8005d32:	781b      	ldrb	r3, [r3, #0]
 8005d34:	009b      	lsls	r3, r3, #2
 8005d36:	441a      	add	r2, r3
 8005d38:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005d3a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d3e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d42:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d4a:	b29b      	uxth	r3, r3
 8005d4c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005d4e:	687a      	ldr	r2, [r7, #4]
 8005d50:	683b      	ldr	r3, [r7, #0]
 8005d52:	781b      	ldrb	r3, [r3, #0]
 8005d54:	009b      	lsls	r3, r3, #2
 8005d56:	4413      	add	r3, r2
 8005d58:	881b      	ldrh	r3, [r3, #0]
 8005d5a:	b29b      	uxth	r3, r3
 8005d5c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d60:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005d64:	86fb      	strh	r3, [r7, #54]	; 0x36
 8005d66:	687a      	ldr	r2, [r7, #4]
 8005d68:	683b      	ldr	r3, [r7, #0]
 8005d6a:	781b      	ldrb	r3, [r3, #0]
 8005d6c:	009b      	lsls	r3, r3, #2
 8005d6e:	441a      	add	r2, r3
 8005d70:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005d72:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d76:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d7a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d82:	b29b      	uxth	r3, r3
 8005d84:	8013      	strh	r3, [r2, #0]
 8005d86:	e0bc      	b.n	8005f02 <USB_ActivateEndpoint+0x776>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005d88:	687a      	ldr	r2, [r7, #4]
 8005d8a:	683b      	ldr	r3, [r7, #0]
 8005d8c:	781b      	ldrb	r3, [r3, #0]
 8005d8e:	009b      	lsls	r3, r3, #2
 8005d90:	4413      	add	r3, r2
 8005d92:	881b      	ldrh	r3, [r3, #0]
 8005d94:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8005d98:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005d9c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d01d      	beq.n	8005de0 <USB_ActivateEndpoint+0x654>
 8005da4:	687a      	ldr	r2, [r7, #4]
 8005da6:	683b      	ldr	r3, [r7, #0]
 8005da8:	781b      	ldrb	r3, [r3, #0]
 8005daa:	009b      	lsls	r3, r3, #2
 8005dac:	4413      	add	r3, r2
 8005dae:	881b      	ldrh	r3, [r3, #0]
 8005db0:	b29b      	uxth	r3, r3
 8005db2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005db6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005dba:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8005dbe:	687a      	ldr	r2, [r7, #4]
 8005dc0:	683b      	ldr	r3, [r7, #0]
 8005dc2:	781b      	ldrb	r3, [r3, #0]
 8005dc4:	009b      	lsls	r3, r3, #2
 8005dc6:	441a      	add	r2, r3
 8005dc8:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8005dcc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005dd0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005dd4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005dd8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ddc:	b29b      	uxth	r3, r3
 8005dde:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005de0:	687a      	ldr	r2, [r7, #4]
 8005de2:	683b      	ldr	r3, [r7, #0]
 8005de4:	781b      	ldrb	r3, [r3, #0]
 8005de6:	009b      	lsls	r3, r3, #2
 8005de8:	4413      	add	r3, r2
 8005dea:	881b      	ldrh	r3, [r3, #0]
 8005dec:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8005df0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8005df4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d01d      	beq.n	8005e38 <USB_ActivateEndpoint+0x6ac>
 8005dfc:	687a      	ldr	r2, [r7, #4]
 8005dfe:	683b      	ldr	r3, [r7, #0]
 8005e00:	781b      	ldrb	r3, [r3, #0]
 8005e02:	009b      	lsls	r3, r3, #2
 8005e04:	4413      	add	r3, r2
 8005e06:	881b      	ldrh	r3, [r3, #0]
 8005e08:	b29b      	uxth	r3, r3
 8005e0a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e12:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8005e16:	687a      	ldr	r2, [r7, #4]
 8005e18:	683b      	ldr	r3, [r7, #0]
 8005e1a:	781b      	ldrb	r3, [r3, #0]
 8005e1c:	009b      	lsls	r3, r3, #2
 8005e1e:	441a      	add	r2, r3
 8005e20:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005e24:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e28:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e2c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e30:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005e34:	b29b      	uxth	r3, r3
 8005e36:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005e38:	683b      	ldr	r3, [r7, #0]
 8005e3a:	78db      	ldrb	r3, [r3, #3]
 8005e3c:	2b01      	cmp	r3, #1
 8005e3e:	d024      	beq.n	8005e8a <USB_ActivateEndpoint+0x6fe>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005e40:	687a      	ldr	r2, [r7, #4]
 8005e42:	683b      	ldr	r3, [r7, #0]
 8005e44:	781b      	ldrb	r3, [r3, #0]
 8005e46:	009b      	lsls	r3, r3, #2
 8005e48:	4413      	add	r3, r2
 8005e4a:	881b      	ldrh	r3, [r3, #0]
 8005e4c:	b29b      	uxth	r3, r3
 8005e4e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e52:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e56:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8005e5a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8005e5e:	f083 0320 	eor.w	r3, r3, #32
 8005e62:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8005e66:	687a      	ldr	r2, [r7, #4]
 8005e68:	683b      	ldr	r3, [r7, #0]
 8005e6a:	781b      	ldrb	r3, [r3, #0]
 8005e6c:	009b      	lsls	r3, r3, #2
 8005e6e:	441a      	add	r2, r3
 8005e70:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8005e74:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e78:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e7c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e84:	b29b      	uxth	r3, r3
 8005e86:	8013      	strh	r3, [r2, #0]
 8005e88:	e01d      	b.n	8005ec6 <USB_ActivateEndpoint+0x73a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005e8a:	687a      	ldr	r2, [r7, #4]
 8005e8c:	683b      	ldr	r3, [r7, #0]
 8005e8e:	781b      	ldrb	r3, [r3, #0]
 8005e90:	009b      	lsls	r3, r3, #2
 8005e92:	4413      	add	r3, r2
 8005e94:	881b      	ldrh	r3, [r3, #0]
 8005e96:	b29b      	uxth	r3, r3
 8005e98:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e9c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ea0:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8005ea4:	687a      	ldr	r2, [r7, #4]
 8005ea6:	683b      	ldr	r3, [r7, #0]
 8005ea8:	781b      	ldrb	r3, [r3, #0]
 8005eaa:	009b      	lsls	r3, r3, #2
 8005eac:	441a      	add	r2, r3
 8005eae:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8005eb2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005eb6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005eba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ebe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ec2:	b29b      	uxth	r3, r3
 8005ec4:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005ec6:	687a      	ldr	r2, [r7, #4]
 8005ec8:	683b      	ldr	r3, [r7, #0]
 8005eca:	781b      	ldrb	r3, [r3, #0]
 8005ecc:	009b      	lsls	r3, r3, #2
 8005ece:	4413      	add	r3, r2
 8005ed0:	881b      	ldrh	r3, [r3, #0]
 8005ed2:	b29b      	uxth	r3, r3
 8005ed4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005ed8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005edc:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8005ee0:	687a      	ldr	r2, [r7, #4]
 8005ee2:	683b      	ldr	r3, [r7, #0]
 8005ee4:	781b      	ldrb	r3, [r3, #0]
 8005ee6:	009b      	lsls	r3, r3, #2
 8005ee8:	441a      	add	r2, r3
 8005eea:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8005eee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ef2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ef6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005efa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005efe:	b29b      	uxth	r3, r3
 8005f00:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8005f02:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8005f06:	4618      	mov	r0, r3
 8005f08:	3774      	adds	r7, #116	; 0x74
 8005f0a:	46bd      	mov	sp, r7
 8005f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f10:	4770      	bx	lr
 8005f12:	bf00      	nop

08005f14 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005f14:	b480      	push	{r7}
 8005f16:	b08d      	sub	sp, #52	; 0x34
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	6078      	str	r0, [r7, #4]
 8005f1c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8005f1e:	683b      	ldr	r3, [r7, #0]
 8005f20:	7b1b      	ldrb	r3, [r3, #12]
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	f040 808e 	bne.w	8006044 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8005f28:	683b      	ldr	r3, [r7, #0]
 8005f2a:	785b      	ldrb	r3, [r3, #1]
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d044      	beq.n	8005fba <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005f30:	687a      	ldr	r2, [r7, #4]
 8005f32:	683b      	ldr	r3, [r7, #0]
 8005f34:	781b      	ldrb	r3, [r3, #0]
 8005f36:	009b      	lsls	r3, r3, #2
 8005f38:	4413      	add	r3, r2
 8005f3a:	881b      	ldrh	r3, [r3, #0]
 8005f3c:	81bb      	strh	r3, [r7, #12]
 8005f3e:	89bb      	ldrh	r3, [r7, #12]
 8005f40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d01b      	beq.n	8005f80 <USB_DeactivateEndpoint+0x6c>
 8005f48:	687a      	ldr	r2, [r7, #4]
 8005f4a:	683b      	ldr	r3, [r7, #0]
 8005f4c:	781b      	ldrb	r3, [r3, #0]
 8005f4e:	009b      	lsls	r3, r3, #2
 8005f50:	4413      	add	r3, r2
 8005f52:	881b      	ldrh	r3, [r3, #0]
 8005f54:	b29b      	uxth	r3, r3
 8005f56:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f5e:	817b      	strh	r3, [r7, #10]
 8005f60:	687a      	ldr	r2, [r7, #4]
 8005f62:	683b      	ldr	r3, [r7, #0]
 8005f64:	781b      	ldrb	r3, [r3, #0]
 8005f66:	009b      	lsls	r3, r3, #2
 8005f68:	441a      	add	r2, r3
 8005f6a:	897b      	ldrh	r3, [r7, #10]
 8005f6c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f70:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f74:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f78:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005f7c:	b29b      	uxth	r3, r3
 8005f7e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005f80:	687a      	ldr	r2, [r7, #4]
 8005f82:	683b      	ldr	r3, [r7, #0]
 8005f84:	781b      	ldrb	r3, [r3, #0]
 8005f86:	009b      	lsls	r3, r3, #2
 8005f88:	4413      	add	r3, r2
 8005f8a:	881b      	ldrh	r3, [r3, #0]
 8005f8c:	b29b      	uxth	r3, r3
 8005f8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f92:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f96:	813b      	strh	r3, [r7, #8]
 8005f98:	687a      	ldr	r2, [r7, #4]
 8005f9a:	683b      	ldr	r3, [r7, #0]
 8005f9c:	781b      	ldrb	r3, [r3, #0]
 8005f9e:	009b      	lsls	r3, r3, #2
 8005fa0:	441a      	add	r2, r3
 8005fa2:	893b      	ldrh	r3, [r7, #8]
 8005fa4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005fa8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005fac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005fb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005fb4:	b29b      	uxth	r3, r3
 8005fb6:	8013      	strh	r3, [r2, #0]
 8005fb8:	e192      	b.n	80062e0 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005fba:	687a      	ldr	r2, [r7, #4]
 8005fbc:	683b      	ldr	r3, [r7, #0]
 8005fbe:	781b      	ldrb	r3, [r3, #0]
 8005fc0:	009b      	lsls	r3, r3, #2
 8005fc2:	4413      	add	r3, r2
 8005fc4:	881b      	ldrh	r3, [r3, #0]
 8005fc6:	827b      	strh	r3, [r7, #18]
 8005fc8:	8a7b      	ldrh	r3, [r7, #18]
 8005fca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d01b      	beq.n	800600a <USB_DeactivateEndpoint+0xf6>
 8005fd2:	687a      	ldr	r2, [r7, #4]
 8005fd4:	683b      	ldr	r3, [r7, #0]
 8005fd6:	781b      	ldrb	r3, [r3, #0]
 8005fd8:	009b      	lsls	r3, r3, #2
 8005fda:	4413      	add	r3, r2
 8005fdc:	881b      	ldrh	r3, [r3, #0]
 8005fde:	b29b      	uxth	r3, r3
 8005fe0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005fe4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fe8:	823b      	strh	r3, [r7, #16]
 8005fea:	687a      	ldr	r2, [r7, #4]
 8005fec:	683b      	ldr	r3, [r7, #0]
 8005fee:	781b      	ldrb	r3, [r3, #0]
 8005ff0:	009b      	lsls	r3, r3, #2
 8005ff2:	441a      	add	r2, r3
 8005ff4:	8a3b      	ldrh	r3, [r7, #16]
 8005ff6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ffa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ffe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006002:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006006:	b29b      	uxth	r3, r3
 8006008:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800600a:	687a      	ldr	r2, [r7, #4]
 800600c:	683b      	ldr	r3, [r7, #0]
 800600e:	781b      	ldrb	r3, [r3, #0]
 8006010:	009b      	lsls	r3, r3, #2
 8006012:	4413      	add	r3, r2
 8006014:	881b      	ldrh	r3, [r3, #0]
 8006016:	b29b      	uxth	r3, r3
 8006018:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800601c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006020:	81fb      	strh	r3, [r7, #14]
 8006022:	687a      	ldr	r2, [r7, #4]
 8006024:	683b      	ldr	r3, [r7, #0]
 8006026:	781b      	ldrb	r3, [r3, #0]
 8006028:	009b      	lsls	r3, r3, #2
 800602a:	441a      	add	r2, r3
 800602c:	89fb      	ldrh	r3, [r7, #14]
 800602e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006032:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006036:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800603a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800603e:	b29b      	uxth	r3, r3
 8006040:	8013      	strh	r3, [r2, #0]
 8006042:	e14d      	b.n	80062e0 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8006044:	683b      	ldr	r3, [r7, #0]
 8006046:	785b      	ldrb	r3, [r3, #1]
 8006048:	2b00      	cmp	r3, #0
 800604a:	f040 80a5 	bne.w	8006198 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800604e:	687a      	ldr	r2, [r7, #4]
 8006050:	683b      	ldr	r3, [r7, #0]
 8006052:	781b      	ldrb	r3, [r3, #0]
 8006054:	009b      	lsls	r3, r3, #2
 8006056:	4413      	add	r3, r2
 8006058:	881b      	ldrh	r3, [r3, #0]
 800605a:	843b      	strh	r3, [r7, #32]
 800605c:	8c3b      	ldrh	r3, [r7, #32]
 800605e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006062:	2b00      	cmp	r3, #0
 8006064:	d01b      	beq.n	800609e <USB_DeactivateEndpoint+0x18a>
 8006066:	687a      	ldr	r2, [r7, #4]
 8006068:	683b      	ldr	r3, [r7, #0]
 800606a:	781b      	ldrb	r3, [r3, #0]
 800606c:	009b      	lsls	r3, r3, #2
 800606e:	4413      	add	r3, r2
 8006070:	881b      	ldrh	r3, [r3, #0]
 8006072:	b29b      	uxth	r3, r3
 8006074:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006078:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800607c:	83fb      	strh	r3, [r7, #30]
 800607e:	687a      	ldr	r2, [r7, #4]
 8006080:	683b      	ldr	r3, [r7, #0]
 8006082:	781b      	ldrb	r3, [r3, #0]
 8006084:	009b      	lsls	r3, r3, #2
 8006086:	441a      	add	r2, r3
 8006088:	8bfb      	ldrh	r3, [r7, #30]
 800608a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800608e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006092:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006096:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800609a:	b29b      	uxth	r3, r3
 800609c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800609e:	687a      	ldr	r2, [r7, #4]
 80060a0:	683b      	ldr	r3, [r7, #0]
 80060a2:	781b      	ldrb	r3, [r3, #0]
 80060a4:	009b      	lsls	r3, r3, #2
 80060a6:	4413      	add	r3, r2
 80060a8:	881b      	ldrh	r3, [r3, #0]
 80060aa:	83bb      	strh	r3, [r7, #28]
 80060ac:	8bbb      	ldrh	r3, [r7, #28]
 80060ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d01b      	beq.n	80060ee <USB_DeactivateEndpoint+0x1da>
 80060b6:	687a      	ldr	r2, [r7, #4]
 80060b8:	683b      	ldr	r3, [r7, #0]
 80060ba:	781b      	ldrb	r3, [r3, #0]
 80060bc:	009b      	lsls	r3, r3, #2
 80060be:	4413      	add	r3, r2
 80060c0:	881b      	ldrh	r3, [r3, #0]
 80060c2:	b29b      	uxth	r3, r3
 80060c4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80060c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060cc:	837b      	strh	r3, [r7, #26]
 80060ce:	687a      	ldr	r2, [r7, #4]
 80060d0:	683b      	ldr	r3, [r7, #0]
 80060d2:	781b      	ldrb	r3, [r3, #0]
 80060d4:	009b      	lsls	r3, r3, #2
 80060d6:	441a      	add	r2, r3
 80060d8:	8b7b      	ldrh	r3, [r7, #26]
 80060da:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80060de:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80060e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80060e6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80060ea:	b29b      	uxth	r3, r3
 80060ec:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80060ee:	687a      	ldr	r2, [r7, #4]
 80060f0:	683b      	ldr	r3, [r7, #0]
 80060f2:	781b      	ldrb	r3, [r3, #0]
 80060f4:	009b      	lsls	r3, r3, #2
 80060f6:	4413      	add	r3, r2
 80060f8:	881b      	ldrh	r3, [r3, #0]
 80060fa:	b29b      	uxth	r3, r3
 80060fc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006100:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006104:	833b      	strh	r3, [r7, #24]
 8006106:	687a      	ldr	r2, [r7, #4]
 8006108:	683b      	ldr	r3, [r7, #0]
 800610a:	781b      	ldrb	r3, [r3, #0]
 800610c:	009b      	lsls	r3, r3, #2
 800610e:	441a      	add	r2, r3
 8006110:	8b3b      	ldrh	r3, [r7, #24]
 8006112:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006116:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800611a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800611e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006122:	b29b      	uxth	r3, r3
 8006124:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006126:	687a      	ldr	r2, [r7, #4]
 8006128:	683b      	ldr	r3, [r7, #0]
 800612a:	781b      	ldrb	r3, [r3, #0]
 800612c:	009b      	lsls	r3, r3, #2
 800612e:	4413      	add	r3, r2
 8006130:	881b      	ldrh	r3, [r3, #0]
 8006132:	b29b      	uxth	r3, r3
 8006134:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006138:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800613c:	82fb      	strh	r3, [r7, #22]
 800613e:	687a      	ldr	r2, [r7, #4]
 8006140:	683b      	ldr	r3, [r7, #0]
 8006142:	781b      	ldrb	r3, [r3, #0]
 8006144:	009b      	lsls	r3, r3, #2
 8006146:	441a      	add	r2, r3
 8006148:	8afb      	ldrh	r3, [r7, #22]
 800614a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800614e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006152:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006156:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800615a:	b29b      	uxth	r3, r3
 800615c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800615e:	687a      	ldr	r2, [r7, #4]
 8006160:	683b      	ldr	r3, [r7, #0]
 8006162:	781b      	ldrb	r3, [r3, #0]
 8006164:	009b      	lsls	r3, r3, #2
 8006166:	4413      	add	r3, r2
 8006168:	881b      	ldrh	r3, [r3, #0]
 800616a:	b29b      	uxth	r3, r3
 800616c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006170:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006174:	82bb      	strh	r3, [r7, #20]
 8006176:	687a      	ldr	r2, [r7, #4]
 8006178:	683b      	ldr	r3, [r7, #0]
 800617a:	781b      	ldrb	r3, [r3, #0]
 800617c:	009b      	lsls	r3, r3, #2
 800617e:	441a      	add	r2, r3
 8006180:	8abb      	ldrh	r3, [r7, #20]
 8006182:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006186:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800618a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800618e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006192:	b29b      	uxth	r3, r3
 8006194:	8013      	strh	r3, [r2, #0]
 8006196:	e0a3      	b.n	80062e0 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006198:	687a      	ldr	r2, [r7, #4]
 800619a:	683b      	ldr	r3, [r7, #0]
 800619c:	781b      	ldrb	r3, [r3, #0]
 800619e:	009b      	lsls	r3, r3, #2
 80061a0:	4413      	add	r3, r2
 80061a2:	881b      	ldrh	r3, [r3, #0]
 80061a4:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80061a6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80061a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d01b      	beq.n	80061e8 <USB_DeactivateEndpoint+0x2d4>
 80061b0:	687a      	ldr	r2, [r7, #4]
 80061b2:	683b      	ldr	r3, [r7, #0]
 80061b4:	781b      	ldrb	r3, [r3, #0]
 80061b6:	009b      	lsls	r3, r3, #2
 80061b8:	4413      	add	r3, r2
 80061ba:	881b      	ldrh	r3, [r3, #0]
 80061bc:	b29b      	uxth	r3, r3
 80061be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80061c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061c6:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80061c8:	687a      	ldr	r2, [r7, #4]
 80061ca:	683b      	ldr	r3, [r7, #0]
 80061cc:	781b      	ldrb	r3, [r3, #0]
 80061ce:	009b      	lsls	r3, r3, #2
 80061d0:	441a      	add	r2, r3
 80061d2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80061d4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80061d8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80061dc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80061e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80061e4:	b29b      	uxth	r3, r3
 80061e6:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80061e8:	687a      	ldr	r2, [r7, #4]
 80061ea:	683b      	ldr	r3, [r7, #0]
 80061ec:	781b      	ldrb	r3, [r3, #0]
 80061ee:	009b      	lsls	r3, r3, #2
 80061f0:	4413      	add	r3, r2
 80061f2:	881b      	ldrh	r3, [r3, #0]
 80061f4:	857b      	strh	r3, [r7, #42]	; 0x2a
 80061f6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80061f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d01b      	beq.n	8006238 <USB_DeactivateEndpoint+0x324>
 8006200:	687a      	ldr	r2, [r7, #4]
 8006202:	683b      	ldr	r3, [r7, #0]
 8006204:	781b      	ldrb	r3, [r3, #0]
 8006206:	009b      	lsls	r3, r3, #2
 8006208:	4413      	add	r3, r2
 800620a:	881b      	ldrh	r3, [r3, #0]
 800620c:	b29b      	uxth	r3, r3
 800620e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006212:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006216:	853b      	strh	r3, [r7, #40]	; 0x28
 8006218:	687a      	ldr	r2, [r7, #4]
 800621a:	683b      	ldr	r3, [r7, #0]
 800621c:	781b      	ldrb	r3, [r3, #0]
 800621e:	009b      	lsls	r3, r3, #2
 8006220:	441a      	add	r2, r3
 8006222:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006224:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006228:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800622c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006230:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006234:	b29b      	uxth	r3, r3
 8006236:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8006238:	687a      	ldr	r2, [r7, #4]
 800623a:	683b      	ldr	r3, [r7, #0]
 800623c:	781b      	ldrb	r3, [r3, #0]
 800623e:	009b      	lsls	r3, r3, #2
 8006240:	4413      	add	r3, r2
 8006242:	881b      	ldrh	r3, [r3, #0]
 8006244:	b29b      	uxth	r3, r3
 8006246:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800624a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800624e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8006250:	687a      	ldr	r2, [r7, #4]
 8006252:	683b      	ldr	r3, [r7, #0]
 8006254:	781b      	ldrb	r3, [r3, #0]
 8006256:	009b      	lsls	r3, r3, #2
 8006258:	441a      	add	r2, r3
 800625a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800625c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006260:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006264:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006268:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800626c:	b29b      	uxth	r3, r3
 800626e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006270:	687a      	ldr	r2, [r7, #4]
 8006272:	683b      	ldr	r3, [r7, #0]
 8006274:	781b      	ldrb	r3, [r3, #0]
 8006276:	009b      	lsls	r3, r3, #2
 8006278:	4413      	add	r3, r2
 800627a:	881b      	ldrh	r3, [r3, #0]
 800627c:	b29b      	uxth	r3, r3
 800627e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006282:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006286:	84bb      	strh	r3, [r7, #36]	; 0x24
 8006288:	687a      	ldr	r2, [r7, #4]
 800628a:	683b      	ldr	r3, [r7, #0]
 800628c:	781b      	ldrb	r3, [r3, #0]
 800628e:	009b      	lsls	r3, r3, #2
 8006290:	441a      	add	r2, r3
 8006292:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006294:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006298:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800629c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80062a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80062a4:	b29b      	uxth	r3, r3
 80062a6:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80062a8:	687a      	ldr	r2, [r7, #4]
 80062aa:	683b      	ldr	r3, [r7, #0]
 80062ac:	781b      	ldrb	r3, [r3, #0]
 80062ae:	009b      	lsls	r3, r3, #2
 80062b0:	4413      	add	r3, r2
 80062b2:	881b      	ldrh	r3, [r3, #0]
 80062b4:	b29b      	uxth	r3, r3
 80062b6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80062ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062be:	847b      	strh	r3, [r7, #34]	; 0x22
 80062c0:	687a      	ldr	r2, [r7, #4]
 80062c2:	683b      	ldr	r3, [r7, #0]
 80062c4:	781b      	ldrb	r3, [r3, #0]
 80062c6:	009b      	lsls	r3, r3, #2
 80062c8:	441a      	add	r2, r3
 80062ca:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80062cc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80062d0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80062d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80062d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80062dc:	b29b      	uxth	r3, r3
 80062de:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80062e0:	2300      	movs	r3, #0
}
 80062e2:	4618      	mov	r0, r3
 80062e4:	3734      	adds	r7, #52	; 0x34
 80062e6:	46bd      	mov	sp, r7
 80062e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ec:	4770      	bx	lr

080062ee <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80062ee:	b580      	push	{r7, lr}
 80062f0:	b0c2      	sub	sp, #264	; 0x108
 80062f2:	af00      	add	r7, sp, #0
 80062f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062f8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80062fc:	6018      	str	r0, [r3, #0]
 80062fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006302:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006306:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006308:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800630c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	785b      	ldrb	r3, [r3, #1]
 8006314:	2b01      	cmp	r3, #1
 8006316:	f040 86b7 	bne.w	8007088 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800631a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800631e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	699a      	ldr	r2, [r3, #24]
 8006326:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800632a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	691b      	ldr	r3, [r3, #16]
 8006332:	429a      	cmp	r2, r3
 8006334:	d908      	bls.n	8006348 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8006336:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800633a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	691b      	ldr	r3, [r3, #16]
 8006342:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006346:	e007      	b.n	8006358 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8006348:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800634c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	699b      	ldr	r3, [r3, #24]
 8006354:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8006358:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800635c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	7b1b      	ldrb	r3, [r3, #12]
 8006364:	2b00      	cmp	r3, #0
 8006366:	d13a      	bne.n	80063de <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8006368:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800636c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	6959      	ldr	r1, [r3, #20]
 8006374:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006378:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	88da      	ldrh	r2, [r3, #6]
 8006380:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006384:	b29b      	uxth	r3, r3
 8006386:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800638a:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800638e:	6800      	ldr	r0, [r0, #0]
 8006390:	f001 fc8d 	bl	8007cae <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006394:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006398:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	613b      	str	r3, [r7, #16]
 80063a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063a4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80063ae:	b29b      	uxth	r3, r3
 80063b0:	461a      	mov	r2, r3
 80063b2:	693b      	ldr	r3, [r7, #16]
 80063b4:	4413      	add	r3, r2
 80063b6:	613b      	str	r3, [r7, #16]
 80063b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	781b      	ldrb	r3, [r3, #0]
 80063c4:	011a      	lsls	r2, r3, #4
 80063c6:	693b      	ldr	r3, [r7, #16]
 80063c8:	4413      	add	r3, r2
 80063ca:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80063ce:	60fb      	str	r3, [r7, #12]
 80063d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80063d4:	b29a      	uxth	r2, r3
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	801a      	strh	r2, [r3, #0]
 80063da:	f000 be1f 	b.w	800701c <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80063de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063e2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	78db      	ldrb	r3, [r3, #3]
 80063ea:	2b02      	cmp	r3, #2
 80063ec:	f040 8462 	bne.w	8006cb4 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80063f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	6a1a      	ldr	r2, [r3, #32]
 80063fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006400:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	691b      	ldr	r3, [r3, #16]
 8006408:	429a      	cmp	r2, r3
 800640a:	f240 83df 	bls.w	8006bcc <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800640e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006412:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006416:	681a      	ldr	r2, [r3, #0]
 8006418:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800641c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	781b      	ldrb	r3, [r3, #0]
 8006424:	009b      	lsls	r3, r3, #2
 8006426:	4413      	add	r3, r2
 8006428:	881b      	ldrh	r3, [r3, #0]
 800642a:	b29b      	uxth	r3, r3
 800642c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006430:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006434:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8006438:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800643c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006440:	681a      	ldr	r2, [r3, #0]
 8006442:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006446:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	781b      	ldrb	r3, [r3, #0]
 800644e:	009b      	lsls	r3, r3, #2
 8006450:	441a      	add	r2, r3
 8006452:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006456:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800645a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800645e:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8006462:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006466:	b29b      	uxth	r3, r3
 8006468:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800646a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800646e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	6a1a      	ldr	r2, [r3, #32]
 8006476:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800647a:	1ad2      	subs	r2, r2, r3
 800647c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006480:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006488:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800648c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006490:	681a      	ldr	r2, [r3, #0]
 8006492:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006496:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	781b      	ldrb	r3, [r3, #0]
 800649e:	009b      	lsls	r3, r3, #2
 80064a0:	4413      	add	r3, r2
 80064a2:	881b      	ldrh	r3, [r3, #0]
 80064a4:	b29b      	uxth	r3, r3
 80064a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	f000 81c7 	beq.w	800683e <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80064b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064b4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	633b      	str	r3, [r7, #48]	; 0x30
 80064bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	785b      	ldrb	r3, [r3, #1]
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d177      	bne.n	80065bc <USB_EPStartXfer+0x2ce>
 80064cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064d0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	62bb      	str	r3, [r7, #40]	; 0x28
 80064d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064dc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80064e6:	b29b      	uxth	r3, r3
 80064e8:	461a      	mov	r2, r3
 80064ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064ec:	4413      	add	r3, r2
 80064ee:	62bb      	str	r3, [r7, #40]	; 0x28
 80064f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	781b      	ldrb	r3, [r3, #0]
 80064fc:	011a      	lsls	r2, r3, #4
 80064fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006500:	4413      	add	r3, r2
 8006502:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006506:	627b      	str	r3, [r7, #36]	; 0x24
 8006508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800650a:	881b      	ldrh	r3, [r3, #0]
 800650c:	b29b      	uxth	r3, r3
 800650e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006512:	b29a      	uxth	r2, r3
 8006514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006516:	801a      	strh	r2, [r3, #0]
 8006518:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800651c:	2b00      	cmp	r3, #0
 800651e:	d10a      	bne.n	8006536 <USB_EPStartXfer+0x248>
 8006520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006522:	881b      	ldrh	r3, [r3, #0]
 8006524:	b29b      	uxth	r3, r3
 8006526:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800652a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800652e:	b29a      	uxth	r2, r3
 8006530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006532:	801a      	strh	r2, [r3, #0]
 8006534:	e067      	b.n	8006606 <USB_EPStartXfer+0x318>
 8006536:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800653a:	2b3e      	cmp	r3, #62	; 0x3e
 800653c:	d81c      	bhi.n	8006578 <USB_EPStartXfer+0x28a>
 800653e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006542:	085b      	lsrs	r3, r3, #1
 8006544:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006548:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800654c:	f003 0301 	and.w	r3, r3, #1
 8006550:	2b00      	cmp	r3, #0
 8006552:	d004      	beq.n	800655e <USB_EPStartXfer+0x270>
 8006554:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006558:	3301      	adds	r3, #1
 800655a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800655e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006560:	881b      	ldrh	r3, [r3, #0]
 8006562:	b29a      	uxth	r2, r3
 8006564:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006568:	b29b      	uxth	r3, r3
 800656a:	029b      	lsls	r3, r3, #10
 800656c:	b29b      	uxth	r3, r3
 800656e:	4313      	orrs	r3, r2
 8006570:	b29a      	uxth	r2, r3
 8006572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006574:	801a      	strh	r2, [r3, #0]
 8006576:	e046      	b.n	8006606 <USB_EPStartXfer+0x318>
 8006578:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800657c:	095b      	lsrs	r3, r3, #5
 800657e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006582:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006586:	f003 031f 	and.w	r3, r3, #31
 800658a:	2b00      	cmp	r3, #0
 800658c:	d104      	bne.n	8006598 <USB_EPStartXfer+0x2aa>
 800658e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006592:	3b01      	subs	r3, #1
 8006594:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800659a:	881b      	ldrh	r3, [r3, #0]
 800659c:	b29a      	uxth	r2, r3
 800659e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80065a2:	b29b      	uxth	r3, r3
 80065a4:	029b      	lsls	r3, r3, #10
 80065a6:	b29b      	uxth	r3, r3
 80065a8:	4313      	orrs	r3, r2
 80065aa:	b29b      	uxth	r3, r3
 80065ac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80065b0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80065b4:	b29a      	uxth	r2, r3
 80065b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065b8:	801a      	strh	r2, [r3, #0]
 80065ba:	e024      	b.n	8006606 <USB_EPStartXfer+0x318>
 80065bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	785b      	ldrb	r3, [r3, #1]
 80065c8:	2b01      	cmp	r3, #1
 80065ca:	d11c      	bne.n	8006606 <USB_EPStartXfer+0x318>
 80065cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065d0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80065da:	b29b      	uxth	r3, r3
 80065dc:	461a      	mov	r2, r3
 80065de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065e0:	4413      	add	r3, r2
 80065e2:	633b      	str	r3, [r7, #48]	; 0x30
 80065e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	781b      	ldrb	r3, [r3, #0]
 80065f0:	011a      	lsls	r2, r3, #4
 80065f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065f4:	4413      	add	r3, r2
 80065f6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80065fa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80065fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006600:	b29a      	uxth	r2, r3
 8006602:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006604:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006606:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800660a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	895b      	ldrh	r3, [r3, #10]
 8006612:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006616:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800661a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	6959      	ldr	r1, [r3, #20]
 8006622:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006626:	b29b      	uxth	r3, r3
 8006628:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800662c:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006630:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006634:	6800      	ldr	r0, [r0, #0]
 8006636:	f001 fb3a 	bl	8007cae <USB_WritePMA>
            ep->xfer_buff += len;
 800663a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800663e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	695a      	ldr	r2, [r3, #20]
 8006646:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800664a:	441a      	add	r2, r3
 800664c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006650:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006658:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800665c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	6a1a      	ldr	r2, [r3, #32]
 8006664:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006668:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	691b      	ldr	r3, [r3, #16]
 8006670:	429a      	cmp	r2, r3
 8006672:	d90f      	bls.n	8006694 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8006674:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006678:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	6a1a      	ldr	r2, [r3, #32]
 8006680:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006684:	1ad2      	subs	r2, r2, r3
 8006686:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800668a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	621a      	str	r2, [r3, #32]
 8006692:	e00e      	b.n	80066b2 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8006694:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006698:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	6a1b      	ldr	r3, [r3, #32]
 80066a0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 80066a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80066a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	2200      	movs	r2, #0
 80066b0:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80066b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80066b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	785b      	ldrb	r3, [r3, #1]
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d177      	bne.n	80067b2 <USB_EPStartXfer+0x4c4>
 80066c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80066c6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	61bb      	str	r3, [r7, #24]
 80066ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80066d2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80066dc:	b29b      	uxth	r3, r3
 80066de:	461a      	mov	r2, r3
 80066e0:	69bb      	ldr	r3, [r7, #24]
 80066e2:	4413      	add	r3, r2
 80066e4:	61bb      	str	r3, [r7, #24]
 80066e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80066ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	781b      	ldrb	r3, [r3, #0]
 80066f2:	011a      	lsls	r2, r3, #4
 80066f4:	69bb      	ldr	r3, [r7, #24]
 80066f6:	4413      	add	r3, r2
 80066f8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80066fc:	617b      	str	r3, [r7, #20]
 80066fe:	697b      	ldr	r3, [r7, #20]
 8006700:	881b      	ldrh	r3, [r3, #0]
 8006702:	b29b      	uxth	r3, r3
 8006704:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006708:	b29a      	uxth	r2, r3
 800670a:	697b      	ldr	r3, [r7, #20]
 800670c:	801a      	strh	r2, [r3, #0]
 800670e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006712:	2b00      	cmp	r3, #0
 8006714:	d10a      	bne.n	800672c <USB_EPStartXfer+0x43e>
 8006716:	697b      	ldr	r3, [r7, #20]
 8006718:	881b      	ldrh	r3, [r3, #0]
 800671a:	b29b      	uxth	r3, r3
 800671c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006720:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006724:	b29a      	uxth	r2, r3
 8006726:	697b      	ldr	r3, [r7, #20]
 8006728:	801a      	strh	r2, [r3, #0]
 800672a:	e06d      	b.n	8006808 <USB_EPStartXfer+0x51a>
 800672c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006730:	2b3e      	cmp	r3, #62	; 0x3e
 8006732:	d81c      	bhi.n	800676e <USB_EPStartXfer+0x480>
 8006734:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006738:	085b      	lsrs	r3, r3, #1
 800673a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800673e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006742:	f003 0301 	and.w	r3, r3, #1
 8006746:	2b00      	cmp	r3, #0
 8006748:	d004      	beq.n	8006754 <USB_EPStartXfer+0x466>
 800674a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800674e:	3301      	adds	r3, #1
 8006750:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006754:	697b      	ldr	r3, [r7, #20]
 8006756:	881b      	ldrh	r3, [r3, #0]
 8006758:	b29a      	uxth	r2, r3
 800675a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800675e:	b29b      	uxth	r3, r3
 8006760:	029b      	lsls	r3, r3, #10
 8006762:	b29b      	uxth	r3, r3
 8006764:	4313      	orrs	r3, r2
 8006766:	b29a      	uxth	r2, r3
 8006768:	697b      	ldr	r3, [r7, #20]
 800676a:	801a      	strh	r2, [r3, #0]
 800676c:	e04c      	b.n	8006808 <USB_EPStartXfer+0x51a>
 800676e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006772:	095b      	lsrs	r3, r3, #5
 8006774:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006778:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800677c:	f003 031f 	and.w	r3, r3, #31
 8006780:	2b00      	cmp	r3, #0
 8006782:	d104      	bne.n	800678e <USB_EPStartXfer+0x4a0>
 8006784:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006788:	3b01      	subs	r3, #1
 800678a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800678e:	697b      	ldr	r3, [r7, #20]
 8006790:	881b      	ldrh	r3, [r3, #0]
 8006792:	b29a      	uxth	r2, r3
 8006794:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006798:	b29b      	uxth	r3, r3
 800679a:	029b      	lsls	r3, r3, #10
 800679c:	b29b      	uxth	r3, r3
 800679e:	4313      	orrs	r3, r2
 80067a0:	b29b      	uxth	r3, r3
 80067a2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80067a6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80067aa:	b29a      	uxth	r2, r3
 80067ac:	697b      	ldr	r3, [r7, #20]
 80067ae:	801a      	strh	r2, [r3, #0]
 80067b0:	e02a      	b.n	8006808 <USB_EPStartXfer+0x51a>
 80067b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	785b      	ldrb	r3, [r3, #1]
 80067be:	2b01      	cmp	r3, #1
 80067c0:	d122      	bne.n	8006808 <USB_EPStartXfer+0x51a>
 80067c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067c6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	623b      	str	r3, [r7, #32]
 80067ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067d2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80067dc:	b29b      	uxth	r3, r3
 80067de:	461a      	mov	r2, r3
 80067e0:	6a3b      	ldr	r3, [r7, #32]
 80067e2:	4413      	add	r3, r2
 80067e4:	623b      	str	r3, [r7, #32]
 80067e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	781b      	ldrb	r3, [r3, #0]
 80067f2:	011a      	lsls	r2, r3, #4
 80067f4:	6a3b      	ldr	r3, [r7, #32]
 80067f6:	4413      	add	r3, r2
 80067f8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80067fc:	61fb      	str	r3, [r7, #28]
 80067fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006802:	b29a      	uxth	r2, r3
 8006804:	69fb      	ldr	r3, [r7, #28]
 8006806:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006808:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800680c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	891b      	ldrh	r3, [r3, #8]
 8006814:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006818:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800681c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	6959      	ldr	r1, [r3, #20]
 8006824:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006828:	b29b      	uxth	r3, r3
 800682a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800682e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006832:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006836:	6800      	ldr	r0, [r0, #0]
 8006838:	f001 fa39 	bl	8007cae <USB_WritePMA>
 800683c:	e3ee      	b.n	800701c <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800683e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006842:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	785b      	ldrb	r3, [r3, #1]
 800684a:	2b00      	cmp	r3, #0
 800684c:	d177      	bne.n	800693e <USB_EPStartXfer+0x650>
 800684e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006852:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	64bb      	str	r3, [r7, #72]	; 0x48
 800685a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800685e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006868:	b29b      	uxth	r3, r3
 800686a:	461a      	mov	r2, r3
 800686c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800686e:	4413      	add	r3, r2
 8006870:	64bb      	str	r3, [r7, #72]	; 0x48
 8006872:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006876:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	781b      	ldrb	r3, [r3, #0]
 800687e:	011a      	lsls	r2, r3, #4
 8006880:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006882:	4413      	add	r3, r2
 8006884:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006888:	647b      	str	r3, [r7, #68]	; 0x44
 800688a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800688c:	881b      	ldrh	r3, [r3, #0]
 800688e:	b29b      	uxth	r3, r3
 8006890:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006894:	b29a      	uxth	r2, r3
 8006896:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006898:	801a      	strh	r2, [r3, #0]
 800689a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d10a      	bne.n	80068b8 <USB_EPStartXfer+0x5ca>
 80068a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80068a4:	881b      	ldrh	r3, [r3, #0]
 80068a6:	b29b      	uxth	r3, r3
 80068a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80068ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80068b0:	b29a      	uxth	r2, r3
 80068b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80068b4:	801a      	strh	r2, [r3, #0]
 80068b6:	e06d      	b.n	8006994 <USB_EPStartXfer+0x6a6>
 80068b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80068bc:	2b3e      	cmp	r3, #62	; 0x3e
 80068be:	d81c      	bhi.n	80068fa <USB_EPStartXfer+0x60c>
 80068c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80068c4:	085b      	lsrs	r3, r3, #1
 80068c6:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80068ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80068ce:	f003 0301 	and.w	r3, r3, #1
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d004      	beq.n	80068e0 <USB_EPStartXfer+0x5f2>
 80068d6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80068da:	3301      	adds	r3, #1
 80068dc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80068e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80068e2:	881b      	ldrh	r3, [r3, #0]
 80068e4:	b29a      	uxth	r2, r3
 80068e6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80068ea:	b29b      	uxth	r3, r3
 80068ec:	029b      	lsls	r3, r3, #10
 80068ee:	b29b      	uxth	r3, r3
 80068f0:	4313      	orrs	r3, r2
 80068f2:	b29a      	uxth	r2, r3
 80068f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80068f6:	801a      	strh	r2, [r3, #0]
 80068f8:	e04c      	b.n	8006994 <USB_EPStartXfer+0x6a6>
 80068fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80068fe:	095b      	lsrs	r3, r3, #5
 8006900:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006904:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006908:	f003 031f 	and.w	r3, r3, #31
 800690c:	2b00      	cmp	r3, #0
 800690e:	d104      	bne.n	800691a <USB_EPStartXfer+0x62c>
 8006910:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006914:	3b01      	subs	r3, #1
 8006916:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800691a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800691c:	881b      	ldrh	r3, [r3, #0]
 800691e:	b29a      	uxth	r2, r3
 8006920:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006924:	b29b      	uxth	r3, r3
 8006926:	029b      	lsls	r3, r3, #10
 8006928:	b29b      	uxth	r3, r3
 800692a:	4313      	orrs	r3, r2
 800692c:	b29b      	uxth	r3, r3
 800692e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006932:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006936:	b29a      	uxth	r2, r3
 8006938:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800693a:	801a      	strh	r2, [r3, #0]
 800693c:	e02a      	b.n	8006994 <USB_EPStartXfer+0x6a6>
 800693e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006942:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	785b      	ldrb	r3, [r3, #1]
 800694a:	2b01      	cmp	r3, #1
 800694c:	d122      	bne.n	8006994 <USB_EPStartXfer+0x6a6>
 800694e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006952:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	653b      	str	r3, [r7, #80]	; 0x50
 800695a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800695e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006968:	b29b      	uxth	r3, r3
 800696a:	461a      	mov	r2, r3
 800696c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800696e:	4413      	add	r3, r2
 8006970:	653b      	str	r3, [r7, #80]	; 0x50
 8006972:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006976:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	781b      	ldrb	r3, [r3, #0]
 800697e:	011a      	lsls	r2, r3, #4
 8006980:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006982:	4413      	add	r3, r2
 8006984:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006988:	64fb      	str	r3, [r7, #76]	; 0x4c
 800698a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800698e:	b29a      	uxth	r2, r3
 8006990:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006992:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006994:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006998:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	891b      	ldrh	r3, [r3, #8]
 80069a0:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80069a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80069a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	6959      	ldr	r1, [r3, #20]
 80069b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80069b4:	b29b      	uxth	r3, r3
 80069b6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80069ba:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80069be:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80069c2:	6800      	ldr	r0, [r0, #0]
 80069c4:	f001 f973 	bl	8007cae <USB_WritePMA>
            ep->xfer_buff += len;
 80069c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80069cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	695a      	ldr	r2, [r3, #20]
 80069d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80069d8:	441a      	add	r2, r3
 80069da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80069de:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80069e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80069ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	6a1a      	ldr	r2, [r3, #32]
 80069f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80069f6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	691b      	ldr	r3, [r3, #16]
 80069fe:	429a      	cmp	r2, r3
 8006a00:	d90f      	bls.n	8006a22 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8006a02:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a06:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	6a1a      	ldr	r2, [r3, #32]
 8006a0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a12:	1ad2      	subs	r2, r2, r3
 8006a14:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a18:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	621a      	str	r2, [r3, #32]
 8006a20:	e00e      	b.n	8006a40 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8006a22:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a26:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	6a1b      	ldr	r3, [r3, #32]
 8006a2e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8006a32:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a36:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	2200      	movs	r2, #0
 8006a3e:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006a40:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a44:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	643b      	str	r3, [r7, #64]	; 0x40
 8006a4c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a50:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	785b      	ldrb	r3, [r3, #1]
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d177      	bne.n	8006b4c <USB_EPStartXfer+0x85e>
 8006a5c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a60:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	63bb      	str	r3, [r7, #56]	; 0x38
 8006a68:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a6c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006a76:	b29b      	uxth	r3, r3
 8006a78:	461a      	mov	r2, r3
 8006a7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a7c:	4413      	add	r3, r2
 8006a7e:	63bb      	str	r3, [r7, #56]	; 0x38
 8006a80:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a84:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	781b      	ldrb	r3, [r3, #0]
 8006a8c:	011a      	lsls	r2, r3, #4
 8006a8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a90:	4413      	add	r3, r2
 8006a92:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006a96:	637b      	str	r3, [r7, #52]	; 0x34
 8006a98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a9a:	881b      	ldrh	r3, [r3, #0]
 8006a9c:	b29b      	uxth	r3, r3
 8006a9e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006aa2:	b29a      	uxth	r2, r3
 8006aa4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006aa6:	801a      	strh	r2, [r3, #0]
 8006aa8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d10a      	bne.n	8006ac6 <USB_EPStartXfer+0x7d8>
 8006ab0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ab2:	881b      	ldrh	r3, [r3, #0]
 8006ab4:	b29b      	uxth	r3, r3
 8006ab6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006aba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006abe:	b29a      	uxth	r2, r3
 8006ac0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ac2:	801a      	strh	r2, [r3, #0]
 8006ac4:	e067      	b.n	8006b96 <USB_EPStartXfer+0x8a8>
 8006ac6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006aca:	2b3e      	cmp	r3, #62	; 0x3e
 8006acc:	d81c      	bhi.n	8006b08 <USB_EPStartXfer+0x81a>
 8006ace:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ad2:	085b      	lsrs	r3, r3, #1
 8006ad4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006ad8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006adc:	f003 0301 	and.w	r3, r3, #1
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d004      	beq.n	8006aee <USB_EPStartXfer+0x800>
 8006ae4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ae8:	3301      	adds	r3, #1
 8006aea:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006aee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006af0:	881b      	ldrh	r3, [r3, #0]
 8006af2:	b29a      	uxth	r2, r3
 8006af4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006af8:	b29b      	uxth	r3, r3
 8006afa:	029b      	lsls	r3, r3, #10
 8006afc:	b29b      	uxth	r3, r3
 8006afe:	4313      	orrs	r3, r2
 8006b00:	b29a      	uxth	r2, r3
 8006b02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b04:	801a      	strh	r2, [r3, #0]
 8006b06:	e046      	b.n	8006b96 <USB_EPStartXfer+0x8a8>
 8006b08:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b0c:	095b      	lsrs	r3, r3, #5
 8006b0e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006b12:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b16:	f003 031f 	and.w	r3, r3, #31
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d104      	bne.n	8006b28 <USB_EPStartXfer+0x83a>
 8006b1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b22:	3b01      	subs	r3, #1
 8006b24:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006b28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b2a:	881b      	ldrh	r3, [r3, #0]
 8006b2c:	b29a      	uxth	r2, r3
 8006b2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b32:	b29b      	uxth	r3, r3
 8006b34:	029b      	lsls	r3, r3, #10
 8006b36:	b29b      	uxth	r3, r3
 8006b38:	4313      	orrs	r3, r2
 8006b3a:	b29b      	uxth	r3, r3
 8006b3c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006b40:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006b44:	b29a      	uxth	r2, r3
 8006b46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b48:	801a      	strh	r2, [r3, #0]
 8006b4a:	e024      	b.n	8006b96 <USB_EPStartXfer+0x8a8>
 8006b4c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b50:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	785b      	ldrb	r3, [r3, #1]
 8006b58:	2b01      	cmp	r3, #1
 8006b5a:	d11c      	bne.n	8006b96 <USB_EPStartXfer+0x8a8>
 8006b5c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b60:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006b6a:	b29b      	uxth	r3, r3
 8006b6c:	461a      	mov	r2, r3
 8006b6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006b70:	4413      	add	r3, r2
 8006b72:	643b      	str	r3, [r7, #64]	; 0x40
 8006b74:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b78:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	781b      	ldrb	r3, [r3, #0]
 8006b80:	011a      	lsls	r2, r3, #4
 8006b82:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006b84:	4413      	add	r3, r2
 8006b86:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006b8a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006b8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b90:	b29a      	uxth	r2, r3
 8006b92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b94:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006b96:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b9a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	895b      	ldrh	r3, [r3, #10]
 8006ba2:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006ba6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006baa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	6959      	ldr	r1, [r3, #20]
 8006bb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006bb6:	b29b      	uxth	r3, r3
 8006bb8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006bbc:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006bc0:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006bc4:	6800      	ldr	r0, [r0, #0]
 8006bc6:	f001 f872 	bl	8007cae <USB_WritePMA>
 8006bca:	e227      	b.n	800701c <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8006bcc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006bd0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	6a1b      	ldr	r3, [r3, #32]
 8006bd8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8006bdc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006be0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006be4:	681a      	ldr	r2, [r3, #0]
 8006be6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006bea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	781b      	ldrb	r3, [r3, #0]
 8006bf2:	009b      	lsls	r3, r3, #2
 8006bf4:	4413      	add	r3, r2
 8006bf6:	881b      	ldrh	r3, [r3, #0]
 8006bf8:	b29b      	uxth	r3, r3
 8006bfa:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8006bfe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c02:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8006c06:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c0a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006c0e:	681a      	ldr	r2, [r3, #0]
 8006c10:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c14:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	781b      	ldrb	r3, [r3, #0]
 8006c1c:	009b      	lsls	r3, r3, #2
 8006c1e:	441a      	add	r2, r3
 8006c20:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8006c24:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006c28:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006c2c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c34:	b29b      	uxth	r3, r3
 8006c36:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006c38:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c3c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006c44:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c48:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006c52:	b29b      	uxth	r3, r3
 8006c54:	461a      	mov	r2, r3
 8006c56:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006c58:	4413      	add	r3, r2
 8006c5a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006c5c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c60:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	781b      	ldrb	r3, [r3, #0]
 8006c68:	011a      	lsls	r2, r3, #4
 8006c6a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006c6c:	4413      	add	r3, r2
 8006c6e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006c72:	65bb      	str	r3, [r7, #88]	; 0x58
 8006c74:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c78:	b29a      	uxth	r2, r3
 8006c7a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006c7c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006c7e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c82:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	891b      	ldrh	r3, [r3, #8]
 8006c8a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006c8e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c92:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	6959      	ldr	r1, [r3, #20]
 8006c9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c9e:	b29b      	uxth	r3, r3
 8006ca0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006ca4:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006ca8:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006cac:	6800      	ldr	r0, [r0, #0]
 8006cae:	f000 fffe 	bl	8007cae <USB_WritePMA>
 8006cb2:	e1b3      	b.n	800701c <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8006cb4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006cb8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	6a1a      	ldr	r2, [r3, #32]
 8006cc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006cc4:	1ad2      	subs	r2, r2, r3
 8006cc6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006cca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006cd2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006cd6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006cda:	681a      	ldr	r2, [r3, #0]
 8006cdc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ce0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	781b      	ldrb	r3, [r3, #0]
 8006ce8:	009b      	lsls	r3, r3, #2
 8006cea:	4413      	add	r3, r2
 8006cec:	881b      	ldrh	r3, [r3, #0]
 8006cee:	b29b      	uxth	r3, r3
 8006cf0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	f000 80c6 	beq.w	8006e86 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006cfa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006cfe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	673b      	str	r3, [r7, #112]	; 0x70
 8006d06:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d0a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	785b      	ldrb	r3, [r3, #1]
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d177      	bne.n	8006e06 <USB_EPStartXfer+0xb18>
 8006d16:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d1a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	66bb      	str	r3, [r7, #104]	; 0x68
 8006d22:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d26:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006d30:	b29b      	uxth	r3, r3
 8006d32:	461a      	mov	r2, r3
 8006d34:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006d36:	4413      	add	r3, r2
 8006d38:	66bb      	str	r3, [r7, #104]	; 0x68
 8006d3a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d3e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	781b      	ldrb	r3, [r3, #0]
 8006d46:	011a      	lsls	r2, r3, #4
 8006d48:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006d4a:	4413      	add	r3, r2
 8006d4c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006d50:	667b      	str	r3, [r7, #100]	; 0x64
 8006d52:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006d54:	881b      	ldrh	r3, [r3, #0]
 8006d56:	b29b      	uxth	r3, r3
 8006d58:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006d5c:	b29a      	uxth	r2, r3
 8006d5e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006d60:	801a      	strh	r2, [r3, #0]
 8006d62:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d10a      	bne.n	8006d80 <USB_EPStartXfer+0xa92>
 8006d6a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006d6c:	881b      	ldrh	r3, [r3, #0]
 8006d6e:	b29b      	uxth	r3, r3
 8006d70:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d74:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d78:	b29a      	uxth	r2, r3
 8006d7a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006d7c:	801a      	strh	r2, [r3, #0]
 8006d7e:	e067      	b.n	8006e50 <USB_EPStartXfer+0xb62>
 8006d80:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d84:	2b3e      	cmp	r3, #62	; 0x3e
 8006d86:	d81c      	bhi.n	8006dc2 <USB_EPStartXfer+0xad4>
 8006d88:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d8c:	085b      	lsrs	r3, r3, #1
 8006d8e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006d92:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d96:	f003 0301 	and.w	r3, r3, #1
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d004      	beq.n	8006da8 <USB_EPStartXfer+0xaba>
 8006d9e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006da2:	3301      	adds	r3, #1
 8006da4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006da8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006daa:	881b      	ldrh	r3, [r3, #0]
 8006dac:	b29a      	uxth	r2, r3
 8006dae:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006db2:	b29b      	uxth	r3, r3
 8006db4:	029b      	lsls	r3, r3, #10
 8006db6:	b29b      	uxth	r3, r3
 8006db8:	4313      	orrs	r3, r2
 8006dba:	b29a      	uxth	r2, r3
 8006dbc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006dbe:	801a      	strh	r2, [r3, #0]
 8006dc0:	e046      	b.n	8006e50 <USB_EPStartXfer+0xb62>
 8006dc2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006dc6:	095b      	lsrs	r3, r3, #5
 8006dc8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006dcc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006dd0:	f003 031f 	and.w	r3, r3, #31
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d104      	bne.n	8006de2 <USB_EPStartXfer+0xaf4>
 8006dd8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006ddc:	3b01      	subs	r3, #1
 8006dde:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006de2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006de4:	881b      	ldrh	r3, [r3, #0]
 8006de6:	b29a      	uxth	r2, r3
 8006de8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006dec:	b29b      	uxth	r3, r3
 8006dee:	029b      	lsls	r3, r3, #10
 8006df0:	b29b      	uxth	r3, r3
 8006df2:	4313      	orrs	r3, r2
 8006df4:	b29b      	uxth	r3, r3
 8006df6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006dfa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006dfe:	b29a      	uxth	r2, r3
 8006e00:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006e02:	801a      	strh	r2, [r3, #0]
 8006e04:	e024      	b.n	8006e50 <USB_EPStartXfer+0xb62>
 8006e06:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e0a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	785b      	ldrb	r3, [r3, #1]
 8006e12:	2b01      	cmp	r3, #1
 8006e14:	d11c      	bne.n	8006e50 <USB_EPStartXfer+0xb62>
 8006e16:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e1a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006e24:	b29b      	uxth	r3, r3
 8006e26:	461a      	mov	r2, r3
 8006e28:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006e2a:	4413      	add	r3, r2
 8006e2c:	673b      	str	r3, [r7, #112]	; 0x70
 8006e2e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e32:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	781b      	ldrb	r3, [r3, #0]
 8006e3a:	011a      	lsls	r2, r3, #4
 8006e3c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006e3e:	4413      	add	r3, r2
 8006e40:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006e44:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006e46:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e4a:	b29a      	uxth	r2, r3
 8006e4c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e4e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8006e50:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e54:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	895b      	ldrh	r3, [r3, #10]
 8006e5c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006e60:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e64:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	6959      	ldr	r1, [r3, #20]
 8006e6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e70:	b29b      	uxth	r3, r3
 8006e72:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006e76:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006e7a:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006e7e:	6800      	ldr	r0, [r0, #0]
 8006e80:	f000 ff15 	bl	8007cae <USB_WritePMA>
 8006e84:	e0ca      	b.n	800701c <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006e86:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e8a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	785b      	ldrb	r3, [r3, #1]
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d177      	bne.n	8006f86 <USB_EPStartXfer+0xc98>
 8006e96:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e9a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006ea2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ea6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006eb0:	b29b      	uxth	r3, r3
 8006eb2:	461a      	mov	r2, r3
 8006eb4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006eb6:	4413      	add	r3, r2
 8006eb8:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006eba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ebe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	781b      	ldrb	r3, [r3, #0]
 8006ec6:	011a      	lsls	r2, r3, #4
 8006ec8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006eca:	4413      	add	r3, r2
 8006ecc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006ed0:	67bb      	str	r3, [r7, #120]	; 0x78
 8006ed2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006ed4:	881b      	ldrh	r3, [r3, #0]
 8006ed6:	b29b      	uxth	r3, r3
 8006ed8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006edc:	b29a      	uxth	r2, r3
 8006ede:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006ee0:	801a      	strh	r2, [r3, #0]
 8006ee2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d10a      	bne.n	8006f00 <USB_EPStartXfer+0xc12>
 8006eea:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006eec:	881b      	ldrh	r3, [r3, #0]
 8006eee:	b29b      	uxth	r3, r3
 8006ef0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006ef4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006ef8:	b29a      	uxth	r2, r3
 8006efa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006efc:	801a      	strh	r2, [r3, #0]
 8006efe:	e073      	b.n	8006fe8 <USB_EPStartXfer+0xcfa>
 8006f00:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f04:	2b3e      	cmp	r3, #62	; 0x3e
 8006f06:	d81c      	bhi.n	8006f42 <USB_EPStartXfer+0xc54>
 8006f08:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f0c:	085b      	lsrs	r3, r3, #1
 8006f0e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006f12:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f16:	f003 0301 	and.w	r3, r3, #1
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d004      	beq.n	8006f28 <USB_EPStartXfer+0xc3a>
 8006f1e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006f22:	3301      	adds	r3, #1
 8006f24:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006f28:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006f2a:	881b      	ldrh	r3, [r3, #0]
 8006f2c:	b29a      	uxth	r2, r3
 8006f2e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006f32:	b29b      	uxth	r3, r3
 8006f34:	029b      	lsls	r3, r3, #10
 8006f36:	b29b      	uxth	r3, r3
 8006f38:	4313      	orrs	r3, r2
 8006f3a:	b29a      	uxth	r2, r3
 8006f3c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006f3e:	801a      	strh	r2, [r3, #0]
 8006f40:	e052      	b.n	8006fe8 <USB_EPStartXfer+0xcfa>
 8006f42:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f46:	095b      	lsrs	r3, r3, #5
 8006f48:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006f4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f50:	f003 031f 	and.w	r3, r3, #31
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d104      	bne.n	8006f62 <USB_EPStartXfer+0xc74>
 8006f58:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006f5c:	3b01      	subs	r3, #1
 8006f5e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006f62:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006f64:	881b      	ldrh	r3, [r3, #0]
 8006f66:	b29a      	uxth	r2, r3
 8006f68:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006f6c:	b29b      	uxth	r3, r3
 8006f6e:	029b      	lsls	r3, r3, #10
 8006f70:	b29b      	uxth	r3, r3
 8006f72:	4313      	orrs	r3, r2
 8006f74:	b29b      	uxth	r3, r3
 8006f76:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f7a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006f7e:	b29a      	uxth	r2, r3
 8006f80:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006f82:	801a      	strh	r2, [r3, #0]
 8006f84:	e030      	b.n	8006fe8 <USB_EPStartXfer+0xcfa>
 8006f86:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f8a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	785b      	ldrb	r3, [r3, #1]
 8006f92:	2b01      	cmp	r3, #1
 8006f94:	d128      	bne.n	8006fe8 <USB_EPStartXfer+0xcfa>
 8006f96:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f9a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006fa4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006fa8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006fb2:	b29b      	uxth	r3, r3
 8006fb4:	461a      	mov	r2, r3
 8006fb6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006fba:	4413      	add	r3, r2
 8006fbc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006fc0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006fc4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	781b      	ldrb	r3, [r3, #0]
 8006fcc:	011a      	lsls	r2, r3, #4
 8006fce:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006fd2:	4413      	add	r3, r2
 8006fd4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006fd8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006fdc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006fe0:	b29a      	uxth	r2, r3
 8006fe2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006fe6:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006fe8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006fec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	891b      	ldrh	r3, [r3, #8]
 8006ff4:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006ff8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ffc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	6959      	ldr	r1, [r3, #20]
 8007004:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007008:	b29b      	uxth	r3, r3
 800700a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800700e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8007012:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8007016:	6800      	ldr	r0, [r0, #0]
 8007018:	f000 fe49 	bl	8007cae <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800701c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007020:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007024:	681a      	ldr	r2, [r3, #0]
 8007026:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800702a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	781b      	ldrb	r3, [r3, #0]
 8007032:	009b      	lsls	r3, r3, #2
 8007034:	4413      	add	r3, r2
 8007036:	881b      	ldrh	r3, [r3, #0]
 8007038:	b29b      	uxth	r3, r3
 800703a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800703e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007042:	817b      	strh	r3, [r7, #10]
 8007044:	897b      	ldrh	r3, [r7, #10]
 8007046:	f083 0310 	eor.w	r3, r3, #16
 800704a:	817b      	strh	r3, [r7, #10]
 800704c:	897b      	ldrh	r3, [r7, #10]
 800704e:	f083 0320 	eor.w	r3, r3, #32
 8007052:	817b      	strh	r3, [r7, #10]
 8007054:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007058:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800705c:	681a      	ldr	r2, [r3, #0]
 800705e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007062:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	781b      	ldrb	r3, [r3, #0]
 800706a:	009b      	lsls	r3, r3, #2
 800706c:	441a      	add	r2, r3
 800706e:	897b      	ldrh	r3, [r7, #10]
 8007070:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007074:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007078:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800707c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007080:	b29b      	uxth	r3, r3
 8007082:	8013      	strh	r3, [r2, #0]
 8007084:	f000 bcdf 	b.w	8007a46 <USB_EPStartXfer+0x1758>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8007088:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800708c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	7b1b      	ldrb	r3, [r3, #12]
 8007094:	2b00      	cmp	r3, #0
 8007096:	f040 80bc 	bne.w	8007212 <USB_EPStartXfer+0xf24>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800709a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800709e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	699a      	ldr	r2, [r3, #24]
 80070a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80070aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	691b      	ldr	r3, [r3, #16]
 80070b2:	429a      	cmp	r2, r3
 80070b4:	d917      	bls.n	80070e6 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 80070b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80070ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	691b      	ldr	r3, [r3, #16]
 80070c2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 80070c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80070ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	699a      	ldr	r2, [r3, #24]
 80070d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80070d6:	1ad2      	subs	r2, r2, r3
 80070d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80070dc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	619a      	str	r2, [r3, #24]
 80070e4:	e00e      	b.n	8007104 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 80070e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80070ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	699b      	ldr	r3, [r3, #24]
 80070f2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 80070f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80070fa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	2200      	movs	r2, #0
 8007102:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8007104:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007108:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007112:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007116:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007120:	b29b      	uxth	r3, r3
 8007122:	461a      	mov	r2, r3
 8007124:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007128:	4413      	add	r3, r2
 800712a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800712e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007132:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	781b      	ldrb	r3, [r3, #0]
 800713a:	011a      	lsls	r2, r3, #4
 800713c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007140:	4413      	add	r3, r2
 8007142:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007146:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800714a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800714e:	881b      	ldrh	r3, [r3, #0]
 8007150:	b29b      	uxth	r3, r3
 8007152:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007156:	b29a      	uxth	r2, r3
 8007158:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800715c:	801a      	strh	r2, [r3, #0]
 800715e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007162:	2b00      	cmp	r3, #0
 8007164:	d10d      	bne.n	8007182 <USB_EPStartXfer+0xe94>
 8007166:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800716a:	881b      	ldrh	r3, [r3, #0]
 800716c:	b29b      	uxth	r3, r3
 800716e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007172:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007176:	b29a      	uxth	r2, r3
 8007178:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800717c:	801a      	strh	r2, [r3, #0]
 800717e:	f000 bc28 	b.w	80079d2 <USB_EPStartXfer+0x16e4>
 8007182:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007186:	2b3e      	cmp	r3, #62	; 0x3e
 8007188:	d81f      	bhi.n	80071ca <USB_EPStartXfer+0xedc>
 800718a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800718e:	085b      	lsrs	r3, r3, #1
 8007190:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007194:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007198:	f003 0301 	and.w	r3, r3, #1
 800719c:	2b00      	cmp	r3, #0
 800719e:	d004      	beq.n	80071aa <USB_EPStartXfer+0xebc>
 80071a0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80071a4:	3301      	adds	r3, #1
 80071a6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80071aa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80071ae:	881b      	ldrh	r3, [r3, #0]
 80071b0:	b29a      	uxth	r2, r3
 80071b2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80071b6:	b29b      	uxth	r3, r3
 80071b8:	029b      	lsls	r3, r3, #10
 80071ba:	b29b      	uxth	r3, r3
 80071bc:	4313      	orrs	r3, r2
 80071be:	b29a      	uxth	r2, r3
 80071c0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80071c4:	801a      	strh	r2, [r3, #0]
 80071c6:	f000 bc04 	b.w	80079d2 <USB_EPStartXfer+0x16e4>
 80071ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80071ce:	095b      	lsrs	r3, r3, #5
 80071d0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80071d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80071d8:	f003 031f 	and.w	r3, r3, #31
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d104      	bne.n	80071ea <USB_EPStartXfer+0xefc>
 80071e0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80071e4:	3b01      	subs	r3, #1
 80071e6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80071ea:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80071ee:	881b      	ldrh	r3, [r3, #0]
 80071f0:	b29a      	uxth	r2, r3
 80071f2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80071f6:	b29b      	uxth	r3, r3
 80071f8:	029b      	lsls	r3, r3, #10
 80071fa:	b29b      	uxth	r3, r3
 80071fc:	4313      	orrs	r3, r2
 80071fe:	b29b      	uxth	r3, r3
 8007200:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007204:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007208:	b29a      	uxth	r2, r3
 800720a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800720e:	801a      	strh	r2, [r3, #0]
 8007210:	e3df      	b.n	80079d2 <USB_EPStartXfer+0x16e4>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8007212:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007216:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	78db      	ldrb	r3, [r3, #3]
 800721e:	2b02      	cmp	r3, #2
 8007220:	f040 8218 	bne.w	8007654 <USB_EPStartXfer+0x1366>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8007224:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007228:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	785b      	ldrb	r3, [r3, #1]
 8007230:	2b00      	cmp	r3, #0
 8007232:	f040 809d 	bne.w	8007370 <USB_EPStartXfer+0x1082>
 8007236:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800723a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007244:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007248:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007252:	b29b      	uxth	r3, r3
 8007254:	461a      	mov	r2, r3
 8007256:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800725a:	4413      	add	r3, r2
 800725c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007260:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007264:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	781b      	ldrb	r3, [r3, #0]
 800726c:	011a      	lsls	r2, r3, #4
 800726e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007272:	4413      	add	r3, r2
 8007274:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007278:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800727c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007280:	881b      	ldrh	r3, [r3, #0]
 8007282:	b29b      	uxth	r3, r3
 8007284:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007288:	b29a      	uxth	r2, r3
 800728a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800728e:	801a      	strh	r2, [r3, #0]
 8007290:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007294:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	691b      	ldr	r3, [r3, #16]
 800729c:	2b00      	cmp	r3, #0
 800729e:	d10c      	bne.n	80072ba <USB_EPStartXfer+0xfcc>
 80072a0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80072a4:	881b      	ldrh	r3, [r3, #0]
 80072a6:	b29b      	uxth	r3, r3
 80072a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80072ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80072b0:	b29a      	uxth	r2, r3
 80072b2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80072b6:	801a      	strh	r2, [r3, #0]
 80072b8:	e08f      	b.n	80073da <USB_EPStartXfer+0x10ec>
 80072ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80072be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	691b      	ldr	r3, [r3, #16]
 80072c6:	2b3e      	cmp	r3, #62	; 0x3e
 80072c8:	d826      	bhi.n	8007318 <USB_EPStartXfer+0x102a>
 80072ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80072ce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	691b      	ldr	r3, [r3, #16]
 80072d6:	085b      	lsrs	r3, r3, #1
 80072d8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80072dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80072e0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	691b      	ldr	r3, [r3, #16]
 80072e8:	f003 0301 	and.w	r3, r3, #1
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d004      	beq.n	80072fa <USB_EPStartXfer+0x100c>
 80072f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80072f4:	3301      	adds	r3, #1
 80072f6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80072fa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80072fe:	881b      	ldrh	r3, [r3, #0]
 8007300:	b29a      	uxth	r2, r3
 8007302:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007306:	b29b      	uxth	r3, r3
 8007308:	029b      	lsls	r3, r3, #10
 800730a:	b29b      	uxth	r3, r3
 800730c:	4313      	orrs	r3, r2
 800730e:	b29a      	uxth	r2, r3
 8007310:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007314:	801a      	strh	r2, [r3, #0]
 8007316:	e060      	b.n	80073da <USB_EPStartXfer+0x10ec>
 8007318:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800731c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	691b      	ldr	r3, [r3, #16]
 8007324:	095b      	lsrs	r3, r3, #5
 8007326:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800732a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800732e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	691b      	ldr	r3, [r3, #16]
 8007336:	f003 031f 	and.w	r3, r3, #31
 800733a:	2b00      	cmp	r3, #0
 800733c:	d104      	bne.n	8007348 <USB_EPStartXfer+0x105a>
 800733e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007342:	3b01      	subs	r3, #1
 8007344:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007348:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800734c:	881b      	ldrh	r3, [r3, #0]
 800734e:	b29a      	uxth	r2, r3
 8007350:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007354:	b29b      	uxth	r3, r3
 8007356:	029b      	lsls	r3, r3, #10
 8007358:	b29b      	uxth	r3, r3
 800735a:	4313      	orrs	r3, r2
 800735c:	b29b      	uxth	r3, r3
 800735e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007362:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007366:	b29a      	uxth	r2, r3
 8007368:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800736c:	801a      	strh	r2, [r3, #0]
 800736e:	e034      	b.n	80073da <USB_EPStartXfer+0x10ec>
 8007370:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007374:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	785b      	ldrb	r3, [r3, #1]
 800737c:	2b01      	cmp	r3, #1
 800737e:	d12c      	bne.n	80073da <USB_EPStartXfer+0x10ec>
 8007380:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007384:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800738e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007392:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800739c:	b29b      	uxth	r3, r3
 800739e:	461a      	mov	r2, r3
 80073a0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80073a4:	4413      	add	r3, r2
 80073a6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80073aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80073ae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	781b      	ldrb	r3, [r3, #0]
 80073b6:	011a      	lsls	r2, r3, #4
 80073b8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80073bc:	4413      	add	r3, r2
 80073be:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80073c2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80073c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80073ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	691b      	ldr	r3, [r3, #16]
 80073d2:	b29a      	uxth	r2, r3
 80073d4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80073d8:	801a      	strh	r2, [r3, #0]
 80073da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80073de:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80073e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80073ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	785b      	ldrb	r3, [r3, #1]
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	f040 809d 	bne.w	8007534 <USB_EPStartXfer+0x1246>
 80073fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80073fe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007408:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800740c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007416:	b29b      	uxth	r3, r3
 8007418:	461a      	mov	r2, r3
 800741a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800741e:	4413      	add	r3, r2
 8007420:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007424:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007428:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	781b      	ldrb	r3, [r3, #0]
 8007430:	011a      	lsls	r2, r3, #4
 8007432:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007436:	4413      	add	r3, r2
 8007438:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800743c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007440:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007444:	881b      	ldrh	r3, [r3, #0]
 8007446:	b29b      	uxth	r3, r3
 8007448:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800744c:	b29a      	uxth	r2, r3
 800744e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007452:	801a      	strh	r2, [r3, #0]
 8007454:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007458:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	691b      	ldr	r3, [r3, #16]
 8007460:	2b00      	cmp	r3, #0
 8007462:	d10c      	bne.n	800747e <USB_EPStartXfer+0x1190>
 8007464:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007468:	881b      	ldrh	r3, [r3, #0]
 800746a:	b29b      	uxth	r3, r3
 800746c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007470:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007474:	b29a      	uxth	r2, r3
 8007476:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800747a:	801a      	strh	r2, [r3, #0]
 800747c:	e088      	b.n	8007590 <USB_EPStartXfer+0x12a2>
 800747e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007482:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	691b      	ldr	r3, [r3, #16]
 800748a:	2b3e      	cmp	r3, #62	; 0x3e
 800748c:	d826      	bhi.n	80074dc <USB_EPStartXfer+0x11ee>
 800748e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007492:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	691b      	ldr	r3, [r3, #16]
 800749a:	085b      	lsrs	r3, r3, #1
 800749c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80074a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80074a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	691b      	ldr	r3, [r3, #16]
 80074ac:	f003 0301 	and.w	r3, r3, #1
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d004      	beq.n	80074be <USB_EPStartXfer+0x11d0>
 80074b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80074b8:	3301      	adds	r3, #1
 80074ba:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80074be:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80074c2:	881b      	ldrh	r3, [r3, #0]
 80074c4:	b29a      	uxth	r2, r3
 80074c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80074ca:	b29b      	uxth	r3, r3
 80074cc:	029b      	lsls	r3, r3, #10
 80074ce:	b29b      	uxth	r3, r3
 80074d0:	4313      	orrs	r3, r2
 80074d2:	b29a      	uxth	r2, r3
 80074d4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80074d8:	801a      	strh	r2, [r3, #0]
 80074da:	e059      	b.n	8007590 <USB_EPStartXfer+0x12a2>
 80074dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80074e0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	691b      	ldr	r3, [r3, #16]
 80074e8:	095b      	lsrs	r3, r3, #5
 80074ea:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80074ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80074f2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	691b      	ldr	r3, [r3, #16]
 80074fa:	f003 031f 	and.w	r3, r3, #31
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d104      	bne.n	800750c <USB_EPStartXfer+0x121e>
 8007502:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007506:	3b01      	subs	r3, #1
 8007508:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800750c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007510:	881b      	ldrh	r3, [r3, #0]
 8007512:	b29a      	uxth	r2, r3
 8007514:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007518:	b29b      	uxth	r3, r3
 800751a:	029b      	lsls	r3, r3, #10
 800751c:	b29b      	uxth	r3, r3
 800751e:	4313      	orrs	r3, r2
 8007520:	b29b      	uxth	r3, r3
 8007522:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007526:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800752a:	b29a      	uxth	r2, r3
 800752c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007530:	801a      	strh	r2, [r3, #0]
 8007532:	e02d      	b.n	8007590 <USB_EPStartXfer+0x12a2>
 8007534:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007538:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	785b      	ldrb	r3, [r3, #1]
 8007540:	2b01      	cmp	r3, #1
 8007542:	d125      	bne.n	8007590 <USB_EPStartXfer+0x12a2>
 8007544:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007548:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007552:	b29b      	uxth	r3, r3
 8007554:	461a      	mov	r2, r3
 8007556:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800755a:	4413      	add	r3, r2
 800755c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007560:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007564:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	781b      	ldrb	r3, [r3, #0]
 800756c:	011a      	lsls	r2, r3, #4
 800756e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007572:	4413      	add	r3, r2
 8007574:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007578:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800757c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007580:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	691b      	ldr	r3, [r3, #16]
 8007588:	b29a      	uxth	r2, r3
 800758a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800758e:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8007590:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007594:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	69db      	ldr	r3, [r3, #28]
 800759c:	2b00      	cmp	r3, #0
 800759e:	f000 8218 	beq.w	80079d2 <USB_EPStartXfer+0x16e4>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80075a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80075a6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80075aa:	681a      	ldr	r2, [r3, #0]
 80075ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80075b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	781b      	ldrb	r3, [r3, #0]
 80075b8:	009b      	lsls	r3, r3, #2
 80075ba:	4413      	add	r3, r2
 80075bc:	881b      	ldrh	r3, [r3, #0]
 80075be:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80075c2:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80075c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d005      	beq.n	80075da <USB_EPStartXfer+0x12ec>
 80075ce:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80075d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d10d      	bne.n	80075f6 <USB_EPStartXfer+0x1308>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80075da:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80075de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	f040 81f5 	bne.w	80079d2 <USB_EPStartXfer+0x16e4>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80075e8:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80075ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	f040 81ee 	bne.w	80079d2 <USB_EPStartXfer+0x16e4>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 80075f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80075fa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80075fe:	681a      	ldr	r2, [r3, #0]
 8007600:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007604:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	781b      	ldrb	r3, [r3, #0]
 800760c:	009b      	lsls	r3, r3, #2
 800760e:	4413      	add	r3, r2
 8007610:	881b      	ldrh	r3, [r3, #0]
 8007612:	b29b      	uxth	r3, r3
 8007614:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007618:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800761c:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8007620:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007624:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007628:	681a      	ldr	r2, [r3, #0]
 800762a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800762e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	781b      	ldrb	r3, [r3, #0]
 8007636:	009b      	lsls	r3, r3, #2
 8007638:	441a      	add	r2, r3
 800763a:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 800763e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007642:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007646:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800764a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800764e:	b29b      	uxth	r3, r3
 8007650:	8013      	strh	r3, [r2, #0]
 8007652:	e1be      	b.n	80079d2 <USB_EPStartXfer+0x16e4>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8007654:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007658:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	78db      	ldrb	r3, [r3, #3]
 8007660:	2b01      	cmp	r3, #1
 8007662:	f040 81b4 	bne.w	80079ce <USB_EPStartXfer+0x16e0>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8007666:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800766a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	699a      	ldr	r2, [r3, #24]
 8007672:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007676:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	691b      	ldr	r3, [r3, #16]
 800767e:	429a      	cmp	r2, r3
 8007680:	d917      	bls.n	80076b2 <USB_EPStartXfer+0x13c4>
        {
          len = ep->maxpacket;
 8007682:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007686:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	691b      	ldr	r3, [r3, #16]
 800768e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 8007692:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007696:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	699a      	ldr	r2, [r3, #24]
 800769e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80076a2:	1ad2      	subs	r2, r2, r3
 80076a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80076a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	619a      	str	r2, [r3, #24]
 80076b0:	e00e      	b.n	80076d0 <USB_EPStartXfer+0x13e2>
        }
        else
        {
          len = ep->xfer_len;
 80076b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80076b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	699b      	ldr	r3, [r3, #24]
 80076be:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 80076c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80076c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	2200      	movs	r2, #0
 80076ce:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80076d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80076d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	785b      	ldrb	r3, [r3, #1]
 80076dc:	2b00      	cmp	r3, #0
 80076de:	f040 8085 	bne.w	80077ec <USB_EPStartXfer+0x14fe>
 80076e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80076e6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80076f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80076f4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80076fe:	b29b      	uxth	r3, r3
 8007700:	461a      	mov	r2, r3
 8007702:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007706:	4413      	add	r3, r2
 8007708:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800770c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007710:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	781b      	ldrb	r3, [r3, #0]
 8007718:	011a      	lsls	r2, r3, #4
 800771a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800771e:	4413      	add	r3, r2
 8007720:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007724:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007728:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800772c:	881b      	ldrh	r3, [r3, #0]
 800772e:	b29b      	uxth	r3, r3
 8007730:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007734:	b29a      	uxth	r2, r3
 8007736:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800773a:	801a      	strh	r2, [r3, #0]
 800773c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007740:	2b00      	cmp	r3, #0
 8007742:	d10c      	bne.n	800775e <USB_EPStartXfer+0x1470>
 8007744:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007748:	881b      	ldrh	r3, [r3, #0]
 800774a:	b29b      	uxth	r3, r3
 800774c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007750:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007754:	b29a      	uxth	r2, r3
 8007756:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800775a:	801a      	strh	r2, [r3, #0]
 800775c:	e077      	b.n	800784e <USB_EPStartXfer+0x1560>
 800775e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007762:	2b3e      	cmp	r3, #62	; 0x3e
 8007764:	d81e      	bhi.n	80077a4 <USB_EPStartXfer+0x14b6>
 8007766:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800776a:	085b      	lsrs	r3, r3, #1
 800776c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007770:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007774:	f003 0301 	and.w	r3, r3, #1
 8007778:	2b00      	cmp	r3, #0
 800777a:	d004      	beq.n	8007786 <USB_EPStartXfer+0x1498>
 800777c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007780:	3301      	adds	r3, #1
 8007782:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007786:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800778a:	881b      	ldrh	r3, [r3, #0]
 800778c:	b29a      	uxth	r2, r3
 800778e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007792:	b29b      	uxth	r3, r3
 8007794:	029b      	lsls	r3, r3, #10
 8007796:	b29b      	uxth	r3, r3
 8007798:	4313      	orrs	r3, r2
 800779a:	b29a      	uxth	r2, r3
 800779c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80077a0:	801a      	strh	r2, [r3, #0]
 80077a2:	e054      	b.n	800784e <USB_EPStartXfer+0x1560>
 80077a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80077a8:	095b      	lsrs	r3, r3, #5
 80077aa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80077ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80077b2:	f003 031f 	and.w	r3, r3, #31
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d104      	bne.n	80077c4 <USB_EPStartXfer+0x14d6>
 80077ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80077be:	3b01      	subs	r3, #1
 80077c0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80077c4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80077c8:	881b      	ldrh	r3, [r3, #0]
 80077ca:	b29a      	uxth	r2, r3
 80077cc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80077d0:	b29b      	uxth	r3, r3
 80077d2:	029b      	lsls	r3, r3, #10
 80077d4:	b29b      	uxth	r3, r3
 80077d6:	4313      	orrs	r3, r2
 80077d8:	b29b      	uxth	r3, r3
 80077da:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80077de:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80077e2:	b29a      	uxth	r2, r3
 80077e4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80077e8:	801a      	strh	r2, [r3, #0]
 80077ea:	e030      	b.n	800784e <USB_EPStartXfer+0x1560>
 80077ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80077f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	785b      	ldrb	r3, [r3, #1]
 80077f8:	2b01      	cmp	r3, #1
 80077fa:	d128      	bne.n	800784e <USB_EPStartXfer+0x1560>
 80077fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007800:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800780a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800780e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007818:	b29b      	uxth	r3, r3
 800781a:	461a      	mov	r2, r3
 800781c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007820:	4413      	add	r3, r2
 8007822:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8007826:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800782a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	781b      	ldrb	r3, [r3, #0]
 8007832:	011a      	lsls	r2, r3, #4
 8007834:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007838:	4413      	add	r3, r2
 800783a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800783e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007842:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007846:	b29a      	uxth	r2, r3
 8007848:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800784c:	801a      	strh	r2, [r3, #0]
 800784e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007852:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800785c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007860:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	785b      	ldrb	r3, [r3, #1]
 8007868:	2b00      	cmp	r3, #0
 800786a:	f040 8085 	bne.w	8007978 <USB_EPStartXfer+0x168a>
 800786e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007872:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800787c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007880:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800788a:	b29b      	uxth	r3, r3
 800788c:	461a      	mov	r2, r3
 800788e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007892:	4413      	add	r3, r2
 8007894:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8007898:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800789c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	781b      	ldrb	r3, [r3, #0]
 80078a4:	011a      	lsls	r2, r3, #4
 80078a6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80078aa:	4413      	add	r3, r2
 80078ac:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80078b0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80078b4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80078b8:	881b      	ldrh	r3, [r3, #0]
 80078ba:	b29b      	uxth	r3, r3
 80078bc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80078c0:	b29a      	uxth	r2, r3
 80078c2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80078c6:	801a      	strh	r2, [r3, #0]
 80078c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d10c      	bne.n	80078ea <USB_EPStartXfer+0x15fc>
 80078d0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80078d4:	881b      	ldrh	r3, [r3, #0]
 80078d6:	b29b      	uxth	r3, r3
 80078d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80078dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80078e0:	b29a      	uxth	r2, r3
 80078e2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80078e6:	801a      	strh	r2, [r3, #0]
 80078e8:	e073      	b.n	80079d2 <USB_EPStartXfer+0x16e4>
 80078ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80078ee:	2b3e      	cmp	r3, #62	; 0x3e
 80078f0:	d81e      	bhi.n	8007930 <USB_EPStartXfer+0x1642>
 80078f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80078f6:	085b      	lsrs	r3, r3, #1
 80078f8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80078fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007900:	f003 0301 	and.w	r3, r3, #1
 8007904:	2b00      	cmp	r3, #0
 8007906:	d004      	beq.n	8007912 <USB_EPStartXfer+0x1624>
 8007908:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800790c:	3301      	adds	r3, #1
 800790e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007912:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007916:	881b      	ldrh	r3, [r3, #0]
 8007918:	b29a      	uxth	r2, r3
 800791a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800791e:	b29b      	uxth	r3, r3
 8007920:	029b      	lsls	r3, r3, #10
 8007922:	b29b      	uxth	r3, r3
 8007924:	4313      	orrs	r3, r2
 8007926:	b29a      	uxth	r2, r3
 8007928:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800792c:	801a      	strh	r2, [r3, #0]
 800792e:	e050      	b.n	80079d2 <USB_EPStartXfer+0x16e4>
 8007930:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007934:	095b      	lsrs	r3, r3, #5
 8007936:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800793a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800793e:	f003 031f 	and.w	r3, r3, #31
 8007942:	2b00      	cmp	r3, #0
 8007944:	d104      	bne.n	8007950 <USB_EPStartXfer+0x1662>
 8007946:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800794a:	3b01      	subs	r3, #1
 800794c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007950:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007954:	881b      	ldrh	r3, [r3, #0]
 8007956:	b29a      	uxth	r2, r3
 8007958:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800795c:	b29b      	uxth	r3, r3
 800795e:	029b      	lsls	r3, r3, #10
 8007960:	b29b      	uxth	r3, r3
 8007962:	4313      	orrs	r3, r2
 8007964:	b29b      	uxth	r3, r3
 8007966:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800796a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800796e:	b29a      	uxth	r2, r3
 8007970:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007974:	801a      	strh	r2, [r3, #0]
 8007976:	e02c      	b.n	80079d2 <USB_EPStartXfer+0x16e4>
 8007978:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800797c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	785b      	ldrb	r3, [r3, #1]
 8007984:	2b01      	cmp	r3, #1
 8007986:	d124      	bne.n	80079d2 <USB_EPStartXfer+0x16e4>
 8007988:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800798c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007996:	b29b      	uxth	r3, r3
 8007998:	461a      	mov	r2, r3
 800799a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800799e:	4413      	add	r3, r2
 80079a0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80079a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80079a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	781b      	ldrb	r3, [r3, #0]
 80079b0:	011a      	lsls	r2, r3, #4
 80079b2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80079b6:	4413      	add	r3, r2
 80079b8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80079bc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80079c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80079c4:	b29a      	uxth	r2, r3
 80079c6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80079ca:	801a      	strh	r2, [r3, #0]
 80079cc:	e001      	b.n	80079d2 <USB_EPStartXfer+0x16e4>
      }
      else
      {
        return HAL_ERROR;
 80079ce:	2301      	movs	r3, #1
 80079d0:	e03a      	b.n	8007a48 <USB_EPStartXfer+0x175a>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80079d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80079d6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80079da:	681a      	ldr	r2, [r3, #0]
 80079dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80079e0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	781b      	ldrb	r3, [r3, #0]
 80079e8:	009b      	lsls	r3, r3, #2
 80079ea:	4413      	add	r3, r2
 80079ec:	881b      	ldrh	r3, [r3, #0]
 80079ee:	b29b      	uxth	r3, r3
 80079f0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80079f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80079f8:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 80079fc:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8007a00:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007a04:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8007a08:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8007a0c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007a10:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8007a14:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a18:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007a1c:	681a      	ldr	r2, [r3, #0]
 8007a1e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a22:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	781b      	ldrb	r3, [r3, #0]
 8007a2a:	009b      	lsls	r3, r3, #2
 8007a2c:	441a      	add	r2, r3
 8007a2e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8007a32:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007a36:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007a3a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007a3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a42:	b29b      	uxth	r3, r3
 8007a44:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007a46:	2300      	movs	r3, #0
}
 8007a48:	4618      	mov	r0, r3
 8007a4a:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8007a4e:	46bd      	mov	sp, r7
 8007a50:	bd80      	pop	{r7, pc}

08007a52 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007a52:	b480      	push	{r7}
 8007a54:	b085      	sub	sp, #20
 8007a56:	af00      	add	r7, sp, #0
 8007a58:	6078      	str	r0, [r7, #4]
 8007a5a:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8007a5c:	683b      	ldr	r3, [r7, #0]
 8007a5e:	785b      	ldrb	r3, [r3, #1]
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d020      	beq.n	8007aa6 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8007a64:	687a      	ldr	r2, [r7, #4]
 8007a66:	683b      	ldr	r3, [r7, #0]
 8007a68:	781b      	ldrb	r3, [r3, #0]
 8007a6a:	009b      	lsls	r3, r3, #2
 8007a6c:	4413      	add	r3, r2
 8007a6e:	881b      	ldrh	r3, [r3, #0]
 8007a70:	b29b      	uxth	r3, r3
 8007a72:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007a76:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007a7a:	81bb      	strh	r3, [r7, #12]
 8007a7c:	89bb      	ldrh	r3, [r7, #12]
 8007a7e:	f083 0310 	eor.w	r3, r3, #16
 8007a82:	81bb      	strh	r3, [r7, #12]
 8007a84:	687a      	ldr	r2, [r7, #4]
 8007a86:	683b      	ldr	r3, [r7, #0]
 8007a88:	781b      	ldrb	r3, [r3, #0]
 8007a8a:	009b      	lsls	r3, r3, #2
 8007a8c:	441a      	add	r2, r3
 8007a8e:	89bb      	ldrh	r3, [r7, #12]
 8007a90:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007a94:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007a98:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007a9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007aa0:	b29b      	uxth	r3, r3
 8007aa2:	8013      	strh	r3, [r2, #0]
 8007aa4:	e01f      	b.n	8007ae6 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8007aa6:	687a      	ldr	r2, [r7, #4]
 8007aa8:	683b      	ldr	r3, [r7, #0]
 8007aaa:	781b      	ldrb	r3, [r3, #0]
 8007aac:	009b      	lsls	r3, r3, #2
 8007aae:	4413      	add	r3, r2
 8007ab0:	881b      	ldrh	r3, [r3, #0]
 8007ab2:	b29b      	uxth	r3, r3
 8007ab4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007ab8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007abc:	81fb      	strh	r3, [r7, #14]
 8007abe:	89fb      	ldrh	r3, [r7, #14]
 8007ac0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007ac4:	81fb      	strh	r3, [r7, #14]
 8007ac6:	687a      	ldr	r2, [r7, #4]
 8007ac8:	683b      	ldr	r3, [r7, #0]
 8007aca:	781b      	ldrb	r3, [r3, #0]
 8007acc:	009b      	lsls	r3, r3, #2
 8007ace:	441a      	add	r2, r3
 8007ad0:	89fb      	ldrh	r3, [r7, #14]
 8007ad2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007ad6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007ada:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007ade:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ae2:	b29b      	uxth	r3, r3
 8007ae4:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007ae6:	2300      	movs	r3, #0
}
 8007ae8:	4618      	mov	r0, r3
 8007aea:	3714      	adds	r7, #20
 8007aec:	46bd      	mov	sp, r7
 8007aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007af2:	4770      	bx	lr

08007af4 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007af4:	b480      	push	{r7}
 8007af6:	b087      	sub	sp, #28
 8007af8:	af00      	add	r7, sp, #0
 8007afa:	6078      	str	r0, [r7, #4]
 8007afc:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8007afe:	683b      	ldr	r3, [r7, #0]
 8007b00:	7b1b      	ldrb	r3, [r3, #12]
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	f040 809d 	bne.w	8007c42 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8007b08:	683b      	ldr	r3, [r7, #0]
 8007b0a:	785b      	ldrb	r3, [r3, #1]
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d04c      	beq.n	8007baa <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007b10:	687a      	ldr	r2, [r7, #4]
 8007b12:	683b      	ldr	r3, [r7, #0]
 8007b14:	781b      	ldrb	r3, [r3, #0]
 8007b16:	009b      	lsls	r3, r3, #2
 8007b18:	4413      	add	r3, r2
 8007b1a:	881b      	ldrh	r3, [r3, #0]
 8007b1c:	823b      	strh	r3, [r7, #16]
 8007b1e:	8a3b      	ldrh	r3, [r7, #16]
 8007b20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d01b      	beq.n	8007b60 <USB_EPClearStall+0x6c>
 8007b28:	687a      	ldr	r2, [r7, #4]
 8007b2a:	683b      	ldr	r3, [r7, #0]
 8007b2c:	781b      	ldrb	r3, [r3, #0]
 8007b2e:	009b      	lsls	r3, r3, #2
 8007b30:	4413      	add	r3, r2
 8007b32:	881b      	ldrh	r3, [r3, #0]
 8007b34:	b29b      	uxth	r3, r3
 8007b36:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007b3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b3e:	81fb      	strh	r3, [r7, #14]
 8007b40:	687a      	ldr	r2, [r7, #4]
 8007b42:	683b      	ldr	r3, [r7, #0]
 8007b44:	781b      	ldrb	r3, [r3, #0]
 8007b46:	009b      	lsls	r3, r3, #2
 8007b48:	441a      	add	r2, r3
 8007b4a:	89fb      	ldrh	r3, [r7, #14]
 8007b4c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007b50:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007b54:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007b58:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007b5c:	b29b      	uxth	r3, r3
 8007b5e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007b60:	683b      	ldr	r3, [r7, #0]
 8007b62:	78db      	ldrb	r3, [r3, #3]
 8007b64:	2b01      	cmp	r3, #1
 8007b66:	d06c      	beq.n	8007c42 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007b68:	687a      	ldr	r2, [r7, #4]
 8007b6a:	683b      	ldr	r3, [r7, #0]
 8007b6c:	781b      	ldrb	r3, [r3, #0]
 8007b6e:	009b      	lsls	r3, r3, #2
 8007b70:	4413      	add	r3, r2
 8007b72:	881b      	ldrh	r3, [r3, #0]
 8007b74:	b29b      	uxth	r3, r3
 8007b76:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007b7a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007b7e:	81bb      	strh	r3, [r7, #12]
 8007b80:	89bb      	ldrh	r3, [r7, #12]
 8007b82:	f083 0320 	eor.w	r3, r3, #32
 8007b86:	81bb      	strh	r3, [r7, #12]
 8007b88:	687a      	ldr	r2, [r7, #4]
 8007b8a:	683b      	ldr	r3, [r7, #0]
 8007b8c:	781b      	ldrb	r3, [r3, #0]
 8007b8e:	009b      	lsls	r3, r3, #2
 8007b90:	441a      	add	r2, r3
 8007b92:	89bb      	ldrh	r3, [r7, #12]
 8007b94:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007b98:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007b9c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007ba0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ba4:	b29b      	uxth	r3, r3
 8007ba6:	8013      	strh	r3, [r2, #0]
 8007ba8:	e04b      	b.n	8007c42 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007baa:	687a      	ldr	r2, [r7, #4]
 8007bac:	683b      	ldr	r3, [r7, #0]
 8007bae:	781b      	ldrb	r3, [r3, #0]
 8007bb0:	009b      	lsls	r3, r3, #2
 8007bb2:	4413      	add	r3, r2
 8007bb4:	881b      	ldrh	r3, [r3, #0]
 8007bb6:	82fb      	strh	r3, [r7, #22]
 8007bb8:	8afb      	ldrh	r3, [r7, #22]
 8007bba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d01b      	beq.n	8007bfa <USB_EPClearStall+0x106>
 8007bc2:	687a      	ldr	r2, [r7, #4]
 8007bc4:	683b      	ldr	r3, [r7, #0]
 8007bc6:	781b      	ldrb	r3, [r3, #0]
 8007bc8:	009b      	lsls	r3, r3, #2
 8007bca:	4413      	add	r3, r2
 8007bcc:	881b      	ldrh	r3, [r3, #0]
 8007bce:	b29b      	uxth	r3, r3
 8007bd0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007bd4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007bd8:	82bb      	strh	r3, [r7, #20]
 8007bda:	687a      	ldr	r2, [r7, #4]
 8007bdc:	683b      	ldr	r3, [r7, #0]
 8007bde:	781b      	ldrb	r3, [r3, #0]
 8007be0:	009b      	lsls	r3, r3, #2
 8007be2:	441a      	add	r2, r3
 8007be4:	8abb      	ldrh	r3, [r7, #20]
 8007be6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007bea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007bee:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007bf2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007bf6:	b29b      	uxth	r3, r3
 8007bf8:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007bfa:	687a      	ldr	r2, [r7, #4]
 8007bfc:	683b      	ldr	r3, [r7, #0]
 8007bfe:	781b      	ldrb	r3, [r3, #0]
 8007c00:	009b      	lsls	r3, r3, #2
 8007c02:	4413      	add	r3, r2
 8007c04:	881b      	ldrh	r3, [r3, #0]
 8007c06:	b29b      	uxth	r3, r3
 8007c08:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007c0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c10:	827b      	strh	r3, [r7, #18]
 8007c12:	8a7b      	ldrh	r3, [r7, #18]
 8007c14:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007c18:	827b      	strh	r3, [r7, #18]
 8007c1a:	8a7b      	ldrh	r3, [r7, #18]
 8007c1c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007c20:	827b      	strh	r3, [r7, #18]
 8007c22:	687a      	ldr	r2, [r7, #4]
 8007c24:	683b      	ldr	r3, [r7, #0]
 8007c26:	781b      	ldrb	r3, [r3, #0]
 8007c28:	009b      	lsls	r3, r3, #2
 8007c2a:	441a      	add	r2, r3
 8007c2c:	8a7b      	ldrh	r3, [r7, #18]
 8007c2e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007c32:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007c36:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007c3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007c3e:	b29b      	uxth	r3, r3
 8007c40:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8007c42:	2300      	movs	r3, #0
}
 8007c44:	4618      	mov	r0, r3
 8007c46:	371c      	adds	r7, #28
 8007c48:	46bd      	mov	sp, r7
 8007c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c4e:	4770      	bx	lr

08007c50 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8007c50:	b480      	push	{r7}
 8007c52:	b083      	sub	sp, #12
 8007c54:	af00      	add	r7, sp, #0
 8007c56:	6078      	str	r0, [r7, #4]
 8007c58:	460b      	mov	r3, r1
 8007c5a:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8007c5c:	78fb      	ldrb	r3, [r7, #3]
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d103      	bne.n	8007c6a <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	2280      	movs	r2, #128	; 0x80
 8007c66:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8007c6a:	2300      	movs	r3, #0
}
 8007c6c:	4618      	mov	r0, r3
 8007c6e:	370c      	adds	r7, #12
 8007c70:	46bd      	mov	sp, r7
 8007c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c76:	4770      	bx	lr

08007c78 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8007c78:	b480      	push	{r7}
 8007c7a:	b083      	sub	sp, #12
 8007c7c:	af00      	add	r7, sp, #0
 8007c7e:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8007c80:	2300      	movs	r3, #0
}
 8007c82:	4618      	mov	r0, r3
 8007c84:	370c      	adds	r7, #12
 8007c86:	46bd      	mov	sp, r7
 8007c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c8c:	4770      	bx	lr

08007c8e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8007c8e:	b480      	push	{r7}
 8007c90:	b085      	sub	sp, #20
 8007c92:	af00      	add	r7, sp, #0
 8007c94:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8007c9c:	b29b      	uxth	r3, r3
 8007c9e:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8007ca0:	68fb      	ldr	r3, [r7, #12]
}
 8007ca2:	4618      	mov	r0, r3
 8007ca4:	3714      	adds	r7, #20
 8007ca6:	46bd      	mov	sp, r7
 8007ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cac:	4770      	bx	lr

08007cae <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007cae:	b480      	push	{r7}
 8007cb0:	b08b      	sub	sp, #44	; 0x2c
 8007cb2:	af00      	add	r7, sp, #0
 8007cb4:	60f8      	str	r0, [r7, #12]
 8007cb6:	60b9      	str	r1, [r7, #8]
 8007cb8:	4611      	mov	r1, r2
 8007cba:	461a      	mov	r2, r3
 8007cbc:	460b      	mov	r3, r1
 8007cbe:	80fb      	strh	r3, [r7, #6]
 8007cc0:	4613      	mov	r3, r2
 8007cc2:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8007cc4:	88bb      	ldrh	r3, [r7, #4]
 8007cc6:	3301      	adds	r3, #1
 8007cc8:	085b      	lsrs	r3, r3, #1
 8007cca:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007cd0:	68bb      	ldr	r3, [r7, #8]
 8007cd2:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007cd4:	88fb      	ldrh	r3, [r7, #6]
 8007cd6:	005a      	lsls	r2, r3, #1
 8007cd8:	697b      	ldr	r3, [r7, #20]
 8007cda:	4413      	add	r3, r2
 8007cdc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007ce0:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8007ce2:	69bb      	ldr	r3, [r7, #24]
 8007ce4:	627b      	str	r3, [r7, #36]	; 0x24
 8007ce6:	e01e      	b.n	8007d26 <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 8007ce8:	69fb      	ldr	r3, [r7, #28]
 8007cea:	781b      	ldrb	r3, [r3, #0]
 8007cec:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8007cee:	69fb      	ldr	r3, [r7, #28]
 8007cf0:	3301      	adds	r3, #1
 8007cf2:	781b      	ldrb	r3, [r3, #0]
 8007cf4:	021b      	lsls	r3, r3, #8
 8007cf6:	b21a      	sxth	r2, r3
 8007cf8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007cfc:	4313      	orrs	r3, r2
 8007cfe:	b21b      	sxth	r3, r3
 8007d00:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8007d02:	6a3b      	ldr	r3, [r7, #32]
 8007d04:	8a7a      	ldrh	r2, [r7, #18]
 8007d06:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8007d08:	6a3b      	ldr	r3, [r7, #32]
 8007d0a:	3302      	adds	r3, #2
 8007d0c:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 8007d0e:	6a3b      	ldr	r3, [r7, #32]
 8007d10:	3302      	adds	r3, #2
 8007d12:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 8007d14:	69fb      	ldr	r3, [r7, #28]
 8007d16:	3301      	adds	r3, #1
 8007d18:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8007d1a:	69fb      	ldr	r3, [r7, #28]
 8007d1c:	3301      	adds	r3, #1
 8007d1e:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8007d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d22:	3b01      	subs	r3, #1
 8007d24:	627b      	str	r3, [r7, #36]	; 0x24
 8007d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d1dd      	bne.n	8007ce8 <USB_WritePMA+0x3a>
  }
}
 8007d2c:	bf00      	nop
 8007d2e:	bf00      	nop
 8007d30:	372c      	adds	r7, #44	; 0x2c
 8007d32:	46bd      	mov	sp, r7
 8007d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d38:	4770      	bx	lr

08007d3a <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007d3a:	b480      	push	{r7}
 8007d3c:	b08b      	sub	sp, #44	; 0x2c
 8007d3e:	af00      	add	r7, sp, #0
 8007d40:	60f8      	str	r0, [r7, #12]
 8007d42:	60b9      	str	r1, [r7, #8]
 8007d44:	4611      	mov	r1, r2
 8007d46:	461a      	mov	r2, r3
 8007d48:	460b      	mov	r3, r1
 8007d4a:	80fb      	strh	r3, [r7, #6]
 8007d4c:	4613      	mov	r3, r2
 8007d4e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8007d50:	88bb      	ldrh	r3, [r7, #4]
 8007d52:	085b      	lsrs	r3, r3, #1
 8007d54:	b29b      	uxth	r3, r3
 8007d56:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007d5c:	68bb      	ldr	r3, [r7, #8]
 8007d5e:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007d60:	88fb      	ldrh	r3, [r7, #6]
 8007d62:	005a      	lsls	r2, r3, #1
 8007d64:	697b      	ldr	r3, [r7, #20]
 8007d66:	4413      	add	r3, r2
 8007d68:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007d6c:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8007d6e:	69bb      	ldr	r3, [r7, #24]
 8007d70:	627b      	str	r3, [r7, #36]	; 0x24
 8007d72:	e01b      	b.n	8007dac <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8007d74:	6a3b      	ldr	r3, [r7, #32]
 8007d76:	881b      	ldrh	r3, [r3, #0]
 8007d78:	b29b      	uxth	r3, r3
 8007d7a:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8007d7c:	6a3b      	ldr	r3, [r7, #32]
 8007d7e:	3302      	adds	r3, #2
 8007d80:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8007d82:	693b      	ldr	r3, [r7, #16]
 8007d84:	b2da      	uxtb	r2, r3
 8007d86:	69fb      	ldr	r3, [r7, #28]
 8007d88:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007d8a:	69fb      	ldr	r3, [r7, #28]
 8007d8c:	3301      	adds	r3, #1
 8007d8e:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8007d90:	693b      	ldr	r3, [r7, #16]
 8007d92:	0a1b      	lsrs	r3, r3, #8
 8007d94:	b2da      	uxtb	r2, r3
 8007d96:	69fb      	ldr	r3, [r7, #28]
 8007d98:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007d9a:	69fb      	ldr	r3, [r7, #28]
 8007d9c:	3301      	adds	r3, #1
 8007d9e:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8007da0:	6a3b      	ldr	r3, [r7, #32]
 8007da2:	3302      	adds	r3, #2
 8007da4:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 8007da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007da8:	3b01      	subs	r3, #1
 8007daa:	627b      	str	r3, [r7, #36]	; 0x24
 8007dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d1e0      	bne.n	8007d74 <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8007db2:	88bb      	ldrh	r3, [r7, #4]
 8007db4:	f003 0301 	and.w	r3, r3, #1
 8007db8:	b29b      	uxth	r3, r3
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d007      	beq.n	8007dce <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 8007dbe:	6a3b      	ldr	r3, [r7, #32]
 8007dc0:	881b      	ldrh	r3, [r3, #0]
 8007dc2:	b29b      	uxth	r3, r3
 8007dc4:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8007dc6:	693b      	ldr	r3, [r7, #16]
 8007dc8:	b2da      	uxtb	r2, r3
 8007dca:	69fb      	ldr	r3, [r7, #28]
 8007dcc:	701a      	strb	r2, [r3, #0]
  }
}
 8007dce:	bf00      	nop
 8007dd0:	372c      	adds	r7, #44	; 0x2c
 8007dd2:	46bd      	mov	sp, r7
 8007dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd8:	4770      	bx	lr

08007dda <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007dda:	b580      	push	{r7, lr}
 8007ddc:	b084      	sub	sp, #16
 8007dde:	af00      	add	r7, sp, #0
 8007de0:	6078      	str	r0, [r7, #4]
 8007de2:	460b      	mov	r3, r1
 8007de4:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8007de6:	2300      	movs	r3, #0
 8007de8:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	7c1b      	ldrb	r3, [r3, #16]
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d115      	bne.n	8007e1e <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007df2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007df6:	2202      	movs	r2, #2
 8007df8:	2181      	movs	r1, #129	; 0x81
 8007dfa:	6878      	ldr	r0, [r7, #4]
 8007dfc:	f001 feef 	bl	8009bde <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	2201      	movs	r2, #1
 8007e04:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007e06:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007e0a:	2202      	movs	r2, #2
 8007e0c:	2101      	movs	r1, #1
 8007e0e:	6878      	ldr	r0, [r7, #4]
 8007e10:	f001 fee5 	bl	8009bde <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	2201      	movs	r2, #1
 8007e18:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8007e1c:	e012      	b.n	8007e44 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007e1e:	2340      	movs	r3, #64	; 0x40
 8007e20:	2202      	movs	r2, #2
 8007e22:	2181      	movs	r1, #129	; 0x81
 8007e24:	6878      	ldr	r0, [r7, #4]
 8007e26:	f001 feda 	bl	8009bde <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	2201      	movs	r2, #1
 8007e2e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007e30:	2340      	movs	r3, #64	; 0x40
 8007e32:	2202      	movs	r2, #2
 8007e34:	2101      	movs	r1, #1
 8007e36:	6878      	ldr	r0, [r7, #4]
 8007e38:	f001 fed1 	bl	8009bde <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	2201      	movs	r2, #1
 8007e40:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007e44:	2308      	movs	r3, #8
 8007e46:	2203      	movs	r2, #3
 8007e48:	2182      	movs	r1, #130	; 0x82
 8007e4a:	6878      	ldr	r0, [r7, #4]
 8007e4c:	f001 fec7 	bl	8009bde <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	2201      	movs	r2, #1
 8007e54:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007e56:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8007e5a:	f001 ffe7 	bl	8009e2c <USBD_static_malloc>
 8007e5e:	4602      	mov	r2, r0
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d102      	bne.n	8007e76 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8007e70:	2301      	movs	r3, #1
 8007e72:	73fb      	strb	r3, [r7, #15]
 8007e74:	e026      	b.n	8007ec4 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e7c:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8007e88:	68bb      	ldr	r3, [r7, #8]
 8007e8a:	2200      	movs	r2, #0
 8007e8c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8007e90:	68bb      	ldr	r3, [r7, #8]
 8007e92:	2200      	movs	r2, #0
 8007e94:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	7c1b      	ldrb	r3, [r3, #16]
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d109      	bne.n	8007eb4 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007ea0:	68bb      	ldr	r3, [r7, #8]
 8007ea2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007ea6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007eaa:	2101      	movs	r1, #1
 8007eac:	6878      	ldr	r0, [r7, #4]
 8007eae:	f001 ff87 	bl	8009dc0 <USBD_LL_PrepareReceive>
 8007eb2:	e007      	b.n	8007ec4 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007eb4:	68bb      	ldr	r3, [r7, #8]
 8007eb6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007eba:	2340      	movs	r3, #64	; 0x40
 8007ebc:	2101      	movs	r1, #1
 8007ebe:	6878      	ldr	r0, [r7, #4]
 8007ec0:	f001 ff7e 	bl	8009dc0 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8007ec4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ec6:	4618      	mov	r0, r3
 8007ec8:	3710      	adds	r7, #16
 8007eca:	46bd      	mov	sp, r7
 8007ecc:	bd80      	pop	{r7, pc}

08007ece <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007ece:	b580      	push	{r7, lr}
 8007ed0:	b084      	sub	sp, #16
 8007ed2:	af00      	add	r7, sp, #0
 8007ed4:	6078      	str	r0, [r7, #4]
 8007ed6:	460b      	mov	r3, r1
 8007ed8:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8007eda:	2300      	movs	r3, #0
 8007edc:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8007ede:	2181      	movs	r1, #129	; 0x81
 8007ee0:	6878      	ldr	r0, [r7, #4]
 8007ee2:	f001 fea2 	bl	8009c2a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	2200      	movs	r2, #0
 8007eea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8007eec:	2101      	movs	r1, #1
 8007eee:	6878      	ldr	r0, [r7, #4]
 8007ef0:	f001 fe9b 	bl	8009c2a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	2200      	movs	r2, #0
 8007ef8:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8007efc:	2182      	movs	r1, #130	; 0x82
 8007efe:	6878      	ldr	r0, [r7, #4]
 8007f00:	f001 fe93 	bl	8009c2a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	2200      	movs	r2, #0
 8007f08:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d00e      	beq.n	8007f32 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007f1a:	685b      	ldr	r3, [r3, #4]
 8007f1c:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f24:	4618      	mov	r0, r3
 8007f26:	f001 ff8f 	bl	8009e48 <USBD_static_free>
    pdev->pClassData = NULL;
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	2200      	movs	r2, #0
 8007f2e:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8007f32:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f34:	4618      	mov	r0, r3
 8007f36:	3710      	adds	r7, #16
 8007f38:	46bd      	mov	sp, r7
 8007f3a:	bd80      	pop	{r7, pc}

08007f3c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8007f3c:	b580      	push	{r7, lr}
 8007f3e:	b086      	sub	sp, #24
 8007f40:	af00      	add	r7, sp, #0
 8007f42:	6078      	str	r0, [r7, #4]
 8007f44:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f4c:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8007f4e:	2300      	movs	r3, #0
 8007f50:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8007f52:	2300      	movs	r3, #0
 8007f54:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8007f56:	2300      	movs	r3, #0
 8007f58:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007f5a:	683b      	ldr	r3, [r7, #0]
 8007f5c:	781b      	ldrb	r3, [r3, #0]
 8007f5e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d039      	beq.n	8007fda <USBD_CDC_Setup+0x9e>
 8007f66:	2b20      	cmp	r3, #32
 8007f68:	d17f      	bne.n	800806a <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8007f6a:	683b      	ldr	r3, [r7, #0]
 8007f6c:	88db      	ldrh	r3, [r3, #6]
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d029      	beq.n	8007fc6 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8007f72:	683b      	ldr	r3, [r7, #0]
 8007f74:	781b      	ldrb	r3, [r3, #0]
 8007f76:	b25b      	sxtb	r3, r3
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	da11      	bge.n	8007fa0 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007f82:	689b      	ldr	r3, [r3, #8]
 8007f84:	683a      	ldr	r2, [r7, #0]
 8007f86:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8007f88:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007f8a:	683a      	ldr	r2, [r7, #0]
 8007f8c:	88d2      	ldrh	r2, [r2, #6]
 8007f8e:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8007f90:	6939      	ldr	r1, [r7, #16]
 8007f92:	683b      	ldr	r3, [r7, #0]
 8007f94:	88db      	ldrh	r3, [r3, #6]
 8007f96:	461a      	mov	r2, r3
 8007f98:	6878      	ldr	r0, [r7, #4]
 8007f9a:	f001 fa2c 	bl	80093f6 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8007f9e:	e06b      	b.n	8008078 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8007fa0:	683b      	ldr	r3, [r7, #0]
 8007fa2:	785a      	ldrb	r2, [r3, #1]
 8007fa4:	693b      	ldr	r3, [r7, #16]
 8007fa6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8007faa:	683b      	ldr	r3, [r7, #0]
 8007fac:	88db      	ldrh	r3, [r3, #6]
 8007fae:	b2da      	uxtb	r2, r3
 8007fb0:	693b      	ldr	r3, [r7, #16]
 8007fb2:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8007fb6:	6939      	ldr	r1, [r7, #16]
 8007fb8:	683b      	ldr	r3, [r7, #0]
 8007fba:	88db      	ldrh	r3, [r3, #6]
 8007fbc:	461a      	mov	r2, r3
 8007fbe:	6878      	ldr	r0, [r7, #4]
 8007fc0:	f001 fa47 	bl	8009452 <USBD_CtlPrepareRx>
      break;
 8007fc4:	e058      	b.n	8008078 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007fcc:	689b      	ldr	r3, [r3, #8]
 8007fce:	683a      	ldr	r2, [r7, #0]
 8007fd0:	7850      	ldrb	r0, [r2, #1]
 8007fd2:	2200      	movs	r2, #0
 8007fd4:	6839      	ldr	r1, [r7, #0]
 8007fd6:	4798      	blx	r3
      break;
 8007fd8:	e04e      	b.n	8008078 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007fda:	683b      	ldr	r3, [r7, #0]
 8007fdc:	785b      	ldrb	r3, [r3, #1]
 8007fde:	2b0b      	cmp	r3, #11
 8007fe0:	d02e      	beq.n	8008040 <USBD_CDC_Setup+0x104>
 8007fe2:	2b0b      	cmp	r3, #11
 8007fe4:	dc38      	bgt.n	8008058 <USBD_CDC_Setup+0x11c>
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d002      	beq.n	8007ff0 <USBD_CDC_Setup+0xb4>
 8007fea:	2b0a      	cmp	r3, #10
 8007fec:	d014      	beq.n	8008018 <USBD_CDC_Setup+0xdc>
 8007fee:	e033      	b.n	8008058 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ff6:	2b03      	cmp	r3, #3
 8007ff8:	d107      	bne.n	800800a <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8007ffa:	f107 030c 	add.w	r3, r7, #12
 8007ffe:	2202      	movs	r2, #2
 8008000:	4619      	mov	r1, r3
 8008002:	6878      	ldr	r0, [r7, #4]
 8008004:	f001 f9f7 	bl	80093f6 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008008:	e02e      	b.n	8008068 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800800a:	6839      	ldr	r1, [r7, #0]
 800800c:	6878      	ldr	r0, [r7, #4]
 800800e:	f001 f987 	bl	8009320 <USBD_CtlError>
            ret = USBD_FAIL;
 8008012:	2302      	movs	r3, #2
 8008014:	75fb      	strb	r3, [r7, #23]
          break;
 8008016:	e027      	b.n	8008068 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800801e:	2b03      	cmp	r3, #3
 8008020:	d107      	bne.n	8008032 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8008022:	f107 030f 	add.w	r3, r7, #15
 8008026:	2201      	movs	r2, #1
 8008028:	4619      	mov	r1, r3
 800802a:	6878      	ldr	r0, [r7, #4]
 800802c:	f001 f9e3 	bl	80093f6 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008030:	e01a      	b.n	8008068 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8008032:	6839      	ldr	r1, [r7, #0]
 8008034:	6878      	ldr	r0, [r7, #4]
 8008036:	f001 f973 	bl	8009320 <USBD_CtlError>
            ret = USBD_FAIL;
 800803a:	2302      	movs	r3, #2
 800803c:	75fb      	strb	r3, [r7, #23]
          break;
 800803e:	e013      	b.n	8008068 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008046:	2b03      	cmp	r3, #3
 8008048:	d00d      	beq.n	8008066 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 800804a:	6839      	ldr	r1, [r7, #0]
 800804c:	6878      	ldr	r0, [r7, #4]
 800804e:	f001 f967 	bl	8009320 <USBD_CtlError>
            ret = USBD_FAIL;
 8008052:	2302      	movs	r3, #2
 8008054:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8008056:	e006      	b.n	8008066 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8008058:	6839      	ldr	r1, [r7, #0]
 800805a:	6878      	ldr	r0, [r7, #4]
 800805c:	f001 f960 	bl	8009320 <USBD_CtlError>
          ret = USBD_FAIL;
 8008060:	2302      	movs	r3, #2
 8008062:	75fb      	strb	r3, [r7, #23]
          break;
 8008064:	e000      	b.n	8008068 <USBD_CDC_Setup+0x12c>
          break;
 8008066:	bf00      	nop
      }
      break;
 8008068:	e006      	b.n	8008078 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800806a:	6839      	ldr	r1, [r7, #0]
 800806c:	6878      	ldr	r0, [r7, #4]
 800806e:	f001 f957 	bl	8009320 <USBD_CtlError>
      ret = USBD_FAIL;
 8008072:	2302      	movs	r3, #2
 8008074:	75fb      	strb	r3, [r7, #23]
      break;
 8008076:	bf00      	nop
  }

  return ret;
 8008078:	7dfb      	ldrb	r3, [r7, #23]
}
 800807a:	4618      	mov	r0, r3
 800807c:	3718      	adds	r7, #24
 800807e:	46bd      	mov	sp, r7
 8008080:	bd80      	pop	{r7, pc}

08008082 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008082:	b580      	push	{r7, lr}
 8008084:	b084      	sub	sp, #16
 8008086:	af00      	add	r7, sp, #0
 8008088:	6078      	str	r0, [r7, #4]
 800808a:	460b      	mov	r3, r1
 800808c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008094:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800809c:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d03a      	beq.n	800811e <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80080a8:	78fa      	ldrb	r2, [r7, #3]
 80080aa:	6879      	ldr	r1, [r7, #4]
 80080ac:	4613      	mov	r3, r2
 80080ae:	009b      	lsls	r3, r3, #2
 80080b0:	4413      	add	r3, r2
 80080b2:	009b      	lsls	r3, r3, #2
 80080b4:	440b      	add	r3, r1
 80080b6:	331c      	adds	r3, #28
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d029      	beq.n	8008112 <USBD_CDC_DataIn+0x90>
 80080be:	78fa      	ldrb	r2, [r7, #3]
 80080c0:	6879      	ldr	r1, [r7, #4]
 80080c2:	4613      	mov	r3, r2
 80080c4:	009b      	lsls	r3, r3, #2
 80080c6:	4413      	add	r3, r2
 80080c8:	009b      	lsls	r3, r3, #2
 80080ca:	440b      	add	r3, r1
 80080cc:	331c      	adds	r3, #28
 80080ce:	681a      	ldr	r2, [r3, #0]
 80080d0:	78f9      	ldrb	r1, [r7, #3]
 80080d2:	68b8      	ldr	r0, [r7, #8]
 80080d4:	460b      	mov	r3, r1
 80080d6:	009b      	lsls	r3, r3, #2
 80080d8:	440b      	add	r3, r1
 80080da:	00db      	lsls	r3, r3, #3
 80080dc:	4403      	add	r3, r0
 80080de:	3320      	adds	r3, #32
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	fbb2 f1f3 	udiv	r1, r2, r3
 80080e6:	fb01 f303 	mul.w	r3, r1, r3
 80080ea:	1ad3      	subs	r3, r2, r3
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d110      	bne.n	8008112 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 80080f0:	78fa      	ldrb	r2, [r7, #3]
 80080f2:	6879      	ldr	r1, [r7, #4]
 80080f4:	4613      	mov	r3, r2
 80080f6:	009b      	lsls	r3, r3, #2
 80080f8:	4413      	add	r3, r2
 80080fa:	009b      	lsls	r3, r3, #2
 80080fc:	440b      	add	r3, r1
 80080fe:	331c      	adds	r3, #28
 8008100:	2200      	movs	r2, #0
 8008102:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8008104:	78f9      	ldrb	r1, [r7, #3]
 8008106:	2300      	movs	r3, #0
 8008108:	2200      	movs	r2, #0
 800810a:	6878      	ldr	r0, [r7, #4]
 800810c:	f001 fe35 	bl	8009d7a <USBD_LL_Transmit>
 8008110:	e003      	b.n	800811a <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	2200      	movs	r2, #0
 8008116:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 800811a:	2300      	movs	r3, #0
 800811c:	e000      	b.n	8008120 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 800811e:	2302      	movs	r3, #2
  }
}
 8008120:	4618      	mov	r0, r3
 8008122:	3710      	adds	r7, #16
 8008124:	46bd      	mov	sp, r7
 8008126:	bd80      	pop	{r7, pc}

08008128 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008128:	b580      	push	{r7, lr}
 800812a:	b084      	sub	sp, #16
 800812c:	af00      	add	r7, sp, #0
 800812e:	6078      	str	r0, [r7, #4]
 8008130:	460b      	mov	r3, r1
 8008132:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800813a:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800813c:	78fb      	ldrb	r3, [r7, #3]
 800813e:	4619      	mov	r1, r3
 8008140:	6878      	ldr	r0, [r7, #4]
 8008142:	f001 fe60 	bl	8009e06 <USBD_LL_GetRxDataSize>
 8008146:	4602      	mov	r2, r0
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008154:	2b00      	cmp	r3, #0
 8008156:	d00d      	beq.n	8008174 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800815e:	68db      	ldr	r3, [r3, #12]
 8008160:	68fa      	ldr	r2, [r7, #12]
 8008162:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8008166:	68fa      	ldr	r2, [r7, #12]
 8008168:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800816c:	4611      	mov	r1, r2
 800816e:	4798      	blx	r3

    return USBD_OK;
 8008170:	2300      	movs	r3, #0
 8008172:	e000      	b.n	8008176 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8008174:	2302      	movs	r3, #2
  }
}
 8008176:	4618      	mov	r0, r3
 8008178:	3710      	adds	r7, #16
 800817a:	46bd      	mov	sp, r7
 800817c:	bd80      	pop	{r7, pc}

0800817e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800817e:	b580      	push	{r7, lr}
 8008180:	b084      	sub	sp, #16
 8008182:	af00      	add	r7, sp, #0
 8008184:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800818c:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008194:	2b00      	cmp	r3, #0
 8008196:	d015      	beq.n	80081c4 <USBD_CDC_EP0_RxReady+0x46>
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800819e:	2bff      	cmp	r3, #255	; 0xff
 80081a0:	d010      	beq.n	80081c4 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80081a8:	689b      	ldr	r3, [r3, #8]
 80081aa:	68fa      	ldr	r2, [r7, #12]
 80081ac:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 80081b0:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80081b2:	68fa      	ldr	r2, [r7, #12]
 80081b4:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80081b8:	b292      	uxth	r2, r2
 80081ba:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	22ff      	movs	r2, #255	; 0xff
 80081c0:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 80081c4:	2300      	movs	r3, #0
}
 80081c6:	4618      	mov	r0, r3
 80081c8:	3710      	adds	r7, #16
 80081ca:	46bd      	mov	sp, r7
 80081cc:	bd80      	pop	{r7, pc}
	...

080081d0 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80081d0:	b480      	push	{r7}
 80081d2:	b083      	sub	sp, #12
 80081d4:	af00      	add	r7, sp, #0
 80081d6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	2243      	movs	r2, #67	; 0x43
 80081dc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 80081de:	4b03      	ldr	r3, [pc, #12]	; (80081ec <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80081e0:	4618      	mov	r0, r3
 80081e2:	370c      	adds	r7, #12
 80081e4:	46bd      	mov	sp, r7
 80081e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ea:	4770      	bx	lr
 80081ec:	20000094 	.word	0x20000094

080081f0 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80081f0:	b480      	push	{r7}
 80081f2:	b083      	sub	sp, #12
 80081f4:	af00      	add	r7, sp, #0
 80081f6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	2243      	movs	r2, #67	; 0x43
 80081fc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 80081fe:	4b03      	ldr	r3, [pc, #12]	; (800820c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8008200:	4618      	mov	r0, r3
 8008202:	370c      	adds	r7, #12
 8008204:	46bd      	mov	sp, r7
 8008206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800820a:	4770      	bx	lr
 800820c:	20000050 	.word	0x20000050

08008210 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008210:	b480      	push	{r7}
 8008212:	b083      	sub	sp, #12
 8008214:	af00      	add	r7, sp, #0
 8008216:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	2243      	movs	r2, #67	; 0x43
 800821c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800821e:	4b03      	ldr	r3, [pc, #12]	; (800822c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8008220:	4618      	mov	r0, r3
 8008222:	370c      	adds	r7, #12
 8008224:	46bd      	mov	sp, r7
 8008226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800822a:	4770      	bx	lr
 800822c:	200000d8 	.word	0x200000d8

08008230 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008230:	b480      	push	{r7}
 8008232:	b083      	sub	sp, #12
 8008234:	af00      	add	r7, sp, #0
 8008236:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	220a      	movs	r2, #10
 800823c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800823e:	4b03      	ldr	r3, [pc, #12]	; (800824c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008240:	4618      	mov	r0, r3
 8008242:	370c      	adds	r7, #12
 8008244:	46bd      	mov	sp, r7
 8008246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800824a:	4770      	bx	lr
 800824c:	2000000c 	.word	0x2000000c

08008250 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8008250:	b480      	push	{r7}
 8008252:	b085      	sub	sp, #20
 8008254:	af00      	add	r7, sp, #0
 8008256:	6078      	str	r0, [r7, #4]
 8008258:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800825a:	2302      	movs	r3, #2
 800825c:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 800825e:	683b      	ldr	r3, [r7, #0]
 8008260:	2b00      	cmp	r3, #0
 8008262:	d005      	beq.n	8008270 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	683a      	ldr	r2, [r7, #0]
 8008268:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 800826c:	2300      	movs	r3, #0
 800826e:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8008270:	7bfb      	ldrb	r3, [r7, #15]
}
 8008272:	4618      	mov	r0, r3
 8008274:	3714      	adds	r7, #20
 8008276:	46bd      	mov	sp, r7
 8008278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800827c:	4770      	bx	lr

0800827e <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 800827e:	b480      	push	{r7}
 8008280:	b087      	sub	sp, #28
 8008282:	af00      	add	r7, sp, #0
 8008284:	60f8      	str	r0, [r7, #12]
 8008286:	60b9      	str	r1, [r7, #8]
 8008288:	4613      	mov	r3, r2
 800828a:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008292:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8008294:	697b      	ldr	r3, [r7, #20]
 8008296:	68ba      	ldr	r2, [r7, #8]
 8008298:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800829c:	88fa      	ldrh	r2, [r7, #6]
 800829e:	697b      	ldr	r3, [r7, #20]
 80082a0:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 80082a4:	2300      	movs	r3, #0
}
 80082a6:	4618      	mov	r0, r3
 80082a8:	371c      	adds	r7, #28
 80082aa:	46bd      	mov	sp, r7
 80082ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b0:	4770      	bx	lr

080082b2 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 80082b2:	b480      	push	{r7}
 80082b4:	b085      	sub	sp, #20
 80082b6:	af00      	add	r7, sp, #0
 80082b8:	6078      	str	r0, [r7, #4]
 80082ba:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80082c2:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	683a      	ldr	r2, [r7, #0]
 80082c8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 80082cc:	2300      	movs	r3, #0
}
 80082ce:	4618      	mov	r0, r3
 80082d0:	3714      	adds	r7, #20
 80082d2:	46bd      	mov	sp, r7
 80082d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d8:	4770      	bx	lr

080082da <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80082da:	b580      	push	{r7, lr}
 80082dc:	b084      	sub	sp, #16
 80082de:	af00      	add	r7, sp, #0
 80082e0:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80082e8:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d01c      	beq.n	800832e <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d115      	bne.n	800832a <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	2201      	movs	r2, #1
 8008302:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800831c:	b29b      	uxth	r3, r3
 800831e:	2181      	movs	r1, #129	; 0x81
 8008320:	6878      	ldr	r0, [r7, #4]
 8008322:	f001 fd2a 	bl	8009d7a <USBD_LL_Transmit>

      return USBD_OK;
 8008326:	2300      	movs	r3, #0
 8008328:	e002      	b.n	8008330 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 800832a:	2301      	movs	r3, #1
 800832c:	e000      	b.n	8008330 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 800832e:	2302      	movs	r3, #2
  }
}
 8008330:	4618      	mov	r0, r3
 8008332:	3710      	adds	r7, #16
 8008334:	46bd      	mov	sp, r7
 8008336:	bd80      	pop	{r7, pc}

08008338 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008338:	b580      	push	{r7, lr}
 800833a:	b084      	sub	sp, #16
 800833c:	af00      	add	r7, sp, #0
 800833e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008346:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800834e:	2b00      	cmp	r3, #0
 8008350:	d017      	beq.n	8008382 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	7c1b      	ldrb	r3, [r3, #16]
 8008356:	2b00      	cmp	r3, #0
 8008358:	d109      	bne.n	800836e <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008360:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008364:	2101      	movs	r1, #1
 8008366:	6878      	ldr	r0, [r7, #4]
 8008368:	f001 fd2a 	bl	8009dc0 <USBD_LL_PrepareReceive>
 800836c:	e007      	b.n	800837e <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008374:	2340      	movs	r3, #64	; 0x40
 8008376:	2101      	movs	r1, #1
 8008378:	6878      	ldr	r0, [r7, #4]
 800837a:	f001 fd21 	bl	8009dc0 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800837e:	2300      	movs	r3, #0
 8008380:	e000      	b.n	8008384 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8008382:	2302      	movs	r3, #2
  }
}
 8008384:	4618      	mov	r0, r3
 8008386:	3710      	adds	r7, #16
 8008388:	46bd      	mov	sp, r7
 800838a:	bd80      	pop	{r7, pc}

0800838c <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800838c:	b580      	push	{r7, lr}
 800838e:	b084      	sub	sp, #16
 8008390:	af00      	add	r7, sp, #0
 8008392:	60f8      	str	r0, [r7, #12]
 8008394:	60b9      	str	r1, [r7, #8]
 8008396:	4613      	mov	r3, r2
 8008398:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	2b00      	cmp	r3, #0
 800839e:	d10a      	bne.n	80083b6 <USBD_Init+0x2a>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
 80083a0:	4814      	ldr	r0, [pc, #80]	; (80083f4 <USBD_Init+0x68>)
 80083a2:	f001 fecf 	bl	800a144 <iprintf>
 80083a6:	4814      	ldr	r0, [pc, #80]	; (80083f8 <USBD_Init+0x6c>)
 80083a8:	f001 fecc 	bl	800a144 <iprintf>
 80083ac:	200a      	movs	r0, #10
 80083ae:	f001 fedb 	bl	800a168 <putchar>
#endif
    return USBD_FAIL;
 80083b2:	2302      	movs	r3, #2
 80083b4:	e01a      	b.n	80083ec <USBD_Init+0x60>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d003      	beq.n	80083c8 <USBD_Init+0x3c>
  {
    pdev->pClass = NULL;
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	2200      	movs	r2, #0
 80083c4:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80083c8:	68bb      	ldr	r3, [r7, #8]
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d003      	beq.n	80083d6 <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	68ba      	ldr	r2, [r7, #8]
 80083d2:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	2201      	movs	r2, #1
 80083da:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	79fa      	ldrb	r2, [r7, #7]
 80083e2:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80083e4:	68f8      	ldr	r0, [r7, #12]
 80083e6:	f001 fb85 	bl	8009af4 <USBD_LL_Init>

  return USBD_OK;
 80083ea:	2300      	movs	r3, #0
}
 80083ec:	4618      	mov	r0, r3
 80083ee:	3710      	adds	r7, #16
 80083f0:	46bd      	mov	sp, r7
 80083f2:	bd80      	pop	{r7, pc}
 80083f4:	0800b2a4 	.word	0x0800b2a4
 80083f8:	0800b2ac 	.word	0x0800b2ac

080083fc <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80083fc:	b580      	push	{r7, lr}
 80083fe:	b084      	sub	sp, #16
 8008400:	af00      	add	r7, sp, #0
 8008402:	6078      	str	r0, [r7, #4]
 8008404:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8008406:	2300      	movs	r3, #0
 8008408:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 800840a:	683b      	ldr	r3, [r7, #0]
 800840c:	2b00      	cmp	r3, #0
 800840e:	d006      	beq.n	800841e <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	683a      	ldr	r2, [r7, #0]
 8008414:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8008418:	2300      	movs	r3, #0
 800841a:	73fb      	strb	r3, [r7, #15]
 800841c:	e00a      	b.n	8008434 <USBD_RegisterClass+0x38>
  }
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
 800841e:	4808      	ldr	r0, [pc, #32]	; (8008440 <USBD_RegisterClass+0x44>)
 8008420:	f001 fe90 	bl	800a144 <iprintf>
 8008424:	4807      	ldr	r0, [pc, #28]	; (8008444 <USBD_RegisterClass+0x48>)
 8008426:	f001 fe8d 	bl	800a144 <iprintf>
 800842a:	200a      	movs	r0, #10
 800842c:	f001 fe9c 	bl	800a168 <putchar>
#endif
    status = USBD_FAIL;
 8008430:	2302      	movs	r3, #2
 8008432:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008434:	7bfb      	ldrb	r3, [r7, #15]
}
 8008436:	4618      	mov	r0, r3
 8008438:	3710      	adds	r7, #16
 800843a:	46bd      	mov	sp, r7
 800843c:	bd80      	pop	{r7, pc}
 800843e:	bf00      	nop
 8008440:	0800b2a4 	.word	0x0800b2a4
 8008444:	0800b2c4 	.word	0x0800b2c4

08008448 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008448:	b580      	push	{r7, lr}
 800844a:	b082      	sub	sp, #8
 800844c:	af00      	add	r7, sp, #0
 800844e:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8008450:	6878      	ldr	r0, [r7, #4]
 8008452:	f001 fba9 	bl	8009ba8 <USBD_LL_Start>

  return USBD_OK;
 8008456:	2300      	movs	r3, #0
}
 8008458:	4618      	mov	r0, r3
 800845a:	3708      	adds	r7, #8
 800845c:	46bd      	mov	sp, r7
 800845e:	bd80      	pop	{r7, pc}

08008460 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8008460:	b480      	push	{r7}
 8008462:	b083      	sub	sp, #12
 8008464:	af00      	add	r7, sp, #0
 8008466:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008468:	2300      	movs	r3, #0
}
 800846a:	4618      	mov	r0, r3
 800846c:	370c      	adds	r7, #12
 800846e:	46bd      	mov	sp, r7
 8008470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008474:	4770      	bx	lr

08008476 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8008476:	b580      	push	{r7, lr}
 8008478:	b084      	sub	sp, #16
 800847a:	af00      	add	r7, sp, #0
 800847c:	6078      	str	r0, [r7, #4]
 800847e:	460b      	mov	r3, r1
 8008480:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8008482:	2302      	movs	r3, #2
 8008484:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800848c:	2b00      	cmp	r3, #0
 800848e:	d00c      	beq.n	80084aa <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	78fa      	ldrb	r2, [r7, #3]
 800849a:	4611      	mov	r1, r2
 800849c:	6878      	ldr	r0, [r7, #4]
 800849e:	4798      	blx	r3
 80084a0:	4603      	mov	r3, r0
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d101      	bne.n	80084aa <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 80084a6:	2300      	movs	r3, #0
 80084a8:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 80084aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80084ac:	4618      	mov	r0, r3
 80084ae:	3710      	adds	r7, #16
 80084b0:	46bd      	mov	sp, r7
 80084b2:	bd80      	pop	{r7, pc}

080084b4 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80084b4:	b580      	push	{r7, lr}
 80084b6:	b082      	sub	sp, #8
 80084b8:	af00      	add	r7, sp, #0
 80084ba:	6078      	str	r0, [r7, #4]
 80084bc:	460b      	mov	r3, r1
 80084be:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80084c6:	685b      	ldr	r3, [r3, #4]
 80084c8:	78fa      	ldrb	r2, [r7, #3]
 80084ca:	4611      	mov	r1, r2
 80084cc:	6878      	ldr	r0, [r7, #4]
 80084ce:	4798      	blx	r3

  return USBD_OK;
 80084d0:	2300      	movs	r3, #0
}
 80084d2:	4618      	mov	r0, r3
 80084d4:	3708      	adds	r7, #8
 80084d6:	46bd      	mov	sp, r7
 80084d8:	bd80      	pop	{r7, pc}

080084da <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80084da:	b580      	push	{r7, lr}
 80084dc:	b082      	sub	sp, #8
 80084de:	af00      	add	r7, sp, #0
 80084e0:	6078      	str	r0, [r7, #4]
 80084e2:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80084ea:	6839      	ldr	r1, [r7, #0]
 80084ec:	4618      	mov	r0, r3
 80084ee:	f000 feda 	bl	80092a6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	2201      	movs	r2, #1
 80084f6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8008500:	461a      	mov	r2, r3
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800850e:	f003 031f 	and.w	r3, r3, #31
 8008512:	2b02      	cmp	r3, #2
 8008514:	d016      	beq.n	8008544 <USBD_LL_SetupStage+0x6a>
 8008516:	2b02      	cmp	r3, #2
 8008518:	d81c      	bhi.n	8008554 <USBD_LL_SetupStage+0x7a>
 800851a:	2b00      	cmp	r3, #0
 800851c:	d002      	beq.n	8008524 <USBD_LL_SetupStage+0x4a>
 800851e:	2b01      	cmp	r3, #1
 8008520:	d008      	beq.n	8008534 <USBD_LL_SetupStage+0x5a>
 8008522:	e017      	b.n	8008554 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800852a:	4619      	mov	r1, r3
 800852c:	6878      	ldr	r0, [r7, #4]
 800852e:	f000 f9cd 	bl	80088cc <USBD_StdDevReq>
      break;
 8008532:	e01a      	b.n	800856a <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800853a:	4619      	mov	r1, r3
 800853c:	6878      	ldr	r0, [r7, #4]
 800853e:	f000 fa2f 	bl	80089a0 <USBD_StdItfReq>
      break;
 8008542:	e012      	b.n	800856a <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800854a:	4619      	mov	r1, r3
 800854c:	6878      	ldr	r0, [r7, #4]
 800854e:	f000 fa6f 	bl	8008a30 <USBD_StdEPReq>
      break;
 8008552:	e00a      	b.n	800856a <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800855a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800855e:	b2db      	uxtb	r3, r3
 8008560:	4619      	mov	r1, r3
 8008562:	6878      	ldr	r0, [r7, #4]
 8008564:	f001 fb80 	bl	8009c68 <USBD_LL_StallEP>
      break;
 8008568:	bf00      	nop
  }

  return USBD_OK;
 800856a:	2300      	movs	r3, #0
}
 800856c:	4618      	mov	r0, r3
 800856e:	3708      	adds	r7, #8
 8008570:	46bd      	mov	sp, r7
 8008572:	bd80      	pop	{r7, pc}

08008574 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008574:	b580      	push	{r7, lr}
 8008576:	b086      	sub	sp, #24
 8008578:	af00      	add	r7, sp, #0
 800857a:	60f8      	str	r0, [r7, #12]
 800857c:	460b      	mov	r3, r1
 800857e:	607a      	str	r2, [r7, #4]
 8008580:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8008582:	7afb      	ldrb	r3, [r7, #11]
 8008584:	2b00      	cmp	r3, #0
 8008586:	d14b      	bne.n	8008620 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800858e:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008596:	2b03      	cmp	r3, #3
 8008598:	d134      	bne.n	8008604 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800859a:	697b      	ldr	r3, [r7, #20]
 800859c:	68da      	ldr	r2, [r3, #12]
 800859e:	697b      	ldr	r3, [r7, #20]
 80085a0:	691b      	ldr	r3, [r3, #16]
 80085a2:	429a      	cmp	r2, r3
 80085a4:	d919      	bls.n	80085da <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 80085a6:	697b      	ldr	r3, [r7, #20]
 80085a8:	68da      	ldr	r2, [r3, #12]
 80085aa:	697b      	ldr	r3, [r7, #20]
 80085ac:	691b      	ldr	r3, [r3, #16]
 80085ae:	1ad2      	subs	r2, r2, r3
 80085b0:	697b      	ldr	r3, [r7, #20]
 80085b2:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80085b4:	697b      	ldr	r3, [r7, #20]
 80085b6:	68da      	ldr	r2, [r3, #12]
 80085b8:	697b      	ldr	r3, [r7, #20]
 80085ba:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80085bc:	429a      	cmp	r2, r3
 80085be:	d203      	bcs.n	80085c8 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80085c0:	697b      	ldr	r3, [r7, #20]
 80085c2:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 80085c4:	b29b      	uxth	r3, r3
 80085c6:	e002      	b.n	80085ce <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80085c8:	697b      	ldr	r3, [r7, #20]
 80085ca:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80085cc:	b29b      	uxth	r3, r3
 80085ce:	461a      	mov	r2, r3
 80085d0:	6879      	ldr	r1, [r7, #4]
 80085d2:	68f8      	ldr	r0, [r7, #12]
 80085d4:	f000 ff5b 	bl	800948e <USBD_CtlContinueRx>
 80085d8:	e038      	b.n	800864c <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80085e0:	691b      	ldr	r3, [r3, #16]
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d00a      	beq.n	80085fc <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80085ec:	2b03      	cmp	r3, #3
 80085ee:	d105      	bne.n	80085fc <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80085f6:	691b      	ldr	r3, [r3, #16]
 80085f8:	68f8      	ldr	r0, [r7, #12]
 80085fa:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 80085fc:	68f8      	ldr	r0, [r7, #12]
 80085fe:	f000 ff58 	bl	80094b2 <USBD_CtlSendStatus>
 8008602:	e023      	b.n	800864c <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800860a:	2b05      	cmp	r3, #5
 800860c:	d11e      	bne.n	800864c <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	2200      	movs	r2, #0
 8008612:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8008616:	2100      	movs	r1, #0
 8008618:	68f8      	ldr	r0, [r7, #12]
 800861a:	f001 fb25 	bl	8009c68 <USBD_LL_StallEP>
 800861e:	e015      	b.n	800864c <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008626:	699b      	ldr	r3, [r3, #24]
 8008628:	2b00      	cmp	r3, #0
 800862a:	d00d      	beq.n	8008648 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8008632:	2b03      	cmp	r3, #3
 8008634:	d108      	bne.n	8008648 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800863c:	699b      	ldr	r3, [r3, #24]
 800863e:	7afa      	ldrb	r2, [r7, #11]
 8008640:	4611      	mov	r1, r2
 8008642:	68f8      	ldr	r0, [r7, #12]
 8008644:	4798      	blx	r3
 8008646:	e001      	b.n	800864c <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008648:	2302      	movs	r3, #2
 800864a:	e000      	b.n	800864e <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800864c:	2300      	movs	r3, #0
}
 800864e:	4618      	mov	r0, r3
 8008650:	3718      	adds	r7, #24
 8008652:	46bd      	mov	sp, r7
 8008654:	bd80      	pop	{r7, pc}

08008656 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008656:	b580      	push	{r7, lr}
 8008658:	b086      	sub	sp, #24
 800865a:	af00      	add	r7, sp, #0
 800865c:	60f8      	str	r0, [r7, #12]
 800865e:	460b      	mov	r3, r1
 8008660:	607a      	str	r2, [r7, #4]
 8008662:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8008664:	7afb      	ldrb	r3, [r7, #11]
 8008666:	2b00      	cmp	r3, #0
 8008668:	d17f      	bne.n	800876a <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	3314      	adds	r3, #20
 800866e:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008676:	2b02      	cmp	r3, #2
 8008678:	d15c      	bne.n	8008734 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800867a:	697b      	ldr	r3, [r7, #20]
 800867c:	68da      	ldr	r2, [r3, #12]
 800867e:	697b      	ldr	r3, [r7, #20]
 8008680:	691b      	ldr	r3, [r3, #16]
 8008682:	429a      	cmp	r2, r3
 8008684:	d915      	bls.n	80086b2 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8008686:	697b      	ldr	r3, [r7, #20]
 8008688:	68da      	ldr	r2, [r3, #12]
 800868a:	697b      	ldr	r3, [r7, #20]
 800868c:	691b      	ldr	r3, [r3, #16]
 800868e:	1ad2      	subs	r2, r2, r3
 8008690:	697b      	ldr	r3, [r7, #20]
 8008692:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8008694:	697b      	ldr	r3, [r7, #20]
 8008696:	68db      	ldr	r3, [r3, #12]
 8008698:	b29b      	uxth	r3, r3
 800869a:	461a      	mov	r2, r3
 800869c:	6879      	ldr	r1, [r7, #4]
 800869e:	68f8      	ldr	r0, [r7, #12]
 80086a0:	f000 fec5 	bl	800942e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80086a4:	2300      	movs	r3, #0
 80086a6:	2200      	movs	r2, #0
 80086a8:	2100      	movs	r1, #0
 80086aa:	68f8      	ldr	r0, [r7, #12]
 80086ac:	f001 fb88 	bl	8009dc0 <USBD_LL_PrepareReceive>
 80086b0:	e04e      	b.n	8008750 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80086b2:	697b      	ldr	r3, [r7, #20]
 80086b4:	689b      	ldr	r3, [r3, #8]
 80086b6:	697a      	ldr	r2, [r7, #20]
 80086b8:	6912      	ldr	r2, [r2, #16]
 80086ba:	fbb3 f1f2 	udiv	r1, r3, r2
 80086be:	fb01 f202 	mul.w	r2, r1, r2
 80086c2:	1a9b      	subs	r3, r3, r2
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d11c      	bne.n	8008702 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 80086c8:	697b      	ldr	r3, [r7, #20]
 80086ca:	689a      	ldr	r2, [r3, #8]
 80086cc:	697b      	ldr	r3, [r7, #20]
 80086ce:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80086d0:	429a      	cmp	r2, r3
 80086d2:	d316      	bcc.n	8008702 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 80086d4:	697b      	ldr	r3, [r7, #20]
 80086d6:	689a      	ldr	r2, [r3, #8]
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80086de:	429a      	cmp	r2, r3
 80086e0:	d20f      	bcs.n	8008702 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80086e2:	2200      	movs	r2, #0
 80086e4:	2100      	movs	r1, #0
 80086e6:	68f8      	ldr	r0, [r7, #12]
 80086e8:	f000 fea1 	bl	800942e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	2200      	movs	r2, #0
 80086f0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80086f4:	2300      	movs	r3, #0
 80086f6:	2200      	movs	r2, #0
 80086f8:	2100      	movs	r1, #0
 80086fa:	68f8      	ldr	r0, [r7, #12]
 80086fc:	f001 fb60 	bl	8009dc0 <USBD_LL_PrepareReceive>
 8008700:	e026      	b.n	8008750 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008708:	68db      	ldr	r3, [r3, #12]
 800870a:	2b00      	cmp	r3, #0
 800870c:	d00a      	beq.n	8008724 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008714:	2b03      	cmp	r3, #3
 8008716:	d105      	bne.n	8008724 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800871e:	68db      	ldr	r3, [r3, #12]
 8008720:	68f8      	ldr	r0, [r7, #12]
 8008722:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8008724:	2180      	movs	r1, #128	; 0x80
 8008726:	68f8      	ldr	r0, [r7, #12]
 8008728:	f001 fa9e 	bl	8009c68 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800872c:	68f8      	ldr	r0, [r7, #12]
 800872e:	f000 fed3 	bl	80094d8 <USBD_CtlReceiveStatus>
 8008732:	e00d      	b.n	8008750 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800873a:	2b04      	cmp	r3, #4
 800873c:	d004      	beq.n	8008748 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8008744:	2b00      	cmp	r3, #0
 8008746:	d103      	bne.n	8008750 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8008748:	2180      	movs	r1, #128	; 0x80
 800874a:	68f8      	ldr	r0, [r7, #12]
 800874c:	f001 fa8c 	bl	8009c68 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8008756:	2b01      	cmp	r3, #1
 8008758:	d11d      	bne.n	8008796 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800875a:	68f8      	ldr	r0, [r7, #12]
 800875c:	f7ff fe80 	bl	8008460 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	2200      	movs	r2, #0
 8008764:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8008768:	e015      	b.n	8008796 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008770:	695b      	ldr	r3, [r3, #20]
 8008772:	2b00      	cmp	r3, #0
 8008774:	d00d      	beq.n	8008792 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800877c:	2b03      	cmp	r3, #3
 800877e:	d108      	bne.n	8008792 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008786:	695b      	ldr	r3, [r3, #20]
 8008788:	7afa      	ldrb	r2, [r7, #11]
 800878a:	4611      	mov	r1, r2
 800878c:	68f8      	ldr	r0, [r7, #12]
 800878e:	4798      	blx	r3
 8008790:	e001      	b.n	8008796 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008792:	2302      	movs	r3, #2
 8008794:	e000      	b.n	8008798 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8008796:	2300      	movs	r3, #0
}
 8008798:	4618      	mov	r0, r3
 800879a:	3718      	adds	r7, #24
 800879c:	46bd      	mov	sp, r7
 800879e:	bd80      	pop	{r7, pc}

080087a0 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80087a0:	b580      	push	{r7, lr}
 80087a2:	b082      	sub	sp, #8
 80087a4:	af00      	add	r7, sp, #0
 80087a6:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80087a8:	2340      	movs	r3, #64	; 0x40
 80087aa:	2200      	movs	r2, #0
 80087ac:	2100      	movs	r1, #0
 80087ae:	6878      	ldr	r0, [r7, #4]
 80087b0:	f001 fa15 	bl	8009bde <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	2201      	movs	r2, #1
 80087b8:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	2240      	movs	r2, #64	; 0x40
 80087c0:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80087c4:	2340      	movs	r3, #64	; 0x40
 80087c6:	2200      	movs	r2, #0
 80087c8:	2180      	movs	r1, #128	; 0x80
 80087ca:	6878      	ldr	r0, [r7, #4]
 80087cc:	f001 fa07 	bl	8009bde <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	2201      	movs	r2, #1
 80087d4:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	2240      	movs	r2, #64	; 0x40
 80087da:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	2201      	movs	r2, #1
 80087e0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	2200      	movs	r2, #0
 80087e8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	2200      	movs	r2, #0
 80087f0:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	2200      	movs	r2, #0
 80087f6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008800:	2b00      	cmp	r3, #0
 8008802:	d009      	beq.n	8008818 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800880a:	685b      	ldr	r3, [r3, #4]
 800880c:	687a      	ldr	r2, [r7, #4]
 800880e:	6852      	ldr	r2, [r2, #4]
 8008810:	b2d2      	uxtb	r2, r2
 8008812:	4611      	mov	r1, r2
 8008814:	6878      	ldr	r0, [r7, #4]
 8008816:	4798      	blx	r3
  }

  return USBD_OK;
 8008818:	2300      	movs	r3, #0
}
 800881a:	4618      	mov	r0, r3
 800881c:	3708      	adds	r7, #8
 800881e:	46bd      	mov	sp, r7
 8008820:	bd80      	pop	{r7, pc}

08008822 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008822:	b480      	push	{r7}
 8008824:	b083      	sub	sp, #12
 8008826:	af00      	add	r7, sp, #0
 8008828:	6078      	str	r0, [r7, #4]
 800882a:	460b      	mov	r3, r1
 800882c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	78fa      	ldrb	r2, [r7, #3]
 8008832:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008834:	2300      	movs	r3, #0
}
 8008836:	4618      	mov	r0, r3
 8008838:	370c      	adds	r7, #12
 800883a:	46bd      	mov	sp, r7
 800883c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008840:	4770      	bx	lr

08008842 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008842:	b480      	push	{r7}
 8008844:	b083      	sub	sp, #12
 8008846:	af00      	add	r7, sp, #0
 8008848:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	2204      	movs	r2, #4
 800885a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800885e:	2300      	movs	r3, #0
}
 8008860:	4618      	mov	r0, r3
 8008862:	370c      	adds	r7, #12
 8008864:	46bd      	mov	sp, r7
 8008866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800886a:	4770      	bx	lr

0800886c <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800886c:	b480      	push	{r7}
 800886e:	b083      	sub	sp, #12
 8008870:	af00      	add	r7, sp, #0
 8008872:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800887a:	2b04      	cmp	r3, #4
 800887c:	d105      	bne.n	800888a <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800888a:	2300      	movs	r3, #0
}
 800888c:	4618      	mov	r0, r3
 800888e:	370c      	adds	r7, #12
 8008890:	46bd      	mov	sp, r7
 8008892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008896:	4770      	bx	lr

08008898 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008898:	b580      	push	{r7, lr}
 800889a:	b082      	sub	sp, #8
 800889c:	af00      	add	r7, sp, #0
 800889e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80088a6:	2b03      	cmp	r3, #3
 80088a8:	d10b      	bne.n	80088c2 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80088b0:	69db      	ldr	r3, [r3, #28]
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d005      	beq.n	80088c2 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80088bc:	69db      	ldr	r3, [r3, #28]
 80088be:	6878      	ldr	r0, [r7, #4]
 80088c0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80088c2:	2300      	movs	r3, #0
}
 80088c4:	4618      	mov	r0, r3
 80088c6:	3708      	adds	r7, #8
 80088c8:	46bd      	mov	sp, r7
 80088ca:	bd80      	pop	{r7, pc}

080088cc <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 80088cc:	b580      	push	{r7, lr}
 80088ce:	b084      	sub	sp, #16
 80088d0:	af00      	add	r7, sp, #0
 80088d2:	6078      	str	r0, [r7, #4]
 80088d4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80088d6:	2300      	movs	r3, #0
 80088d8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80088da:	683b      	ldr	r3, [r7, #0]
 80088dc:	781b      	ldrb	r3, [r3, #0]
 80088de:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80088e2:	2b40      	cmp	r3, #64	; 0x40
 80088e4:	d005      	beq.n	80088f2 <USBD_StdDevReq+0x26>
 80088e6:	2b40      	cmp	r3, #64	; 0x40
 80088e8:	d84f      	bhi.n	800898a <USBD_StdDevReq+0xbe>
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d009      	beq.n	8008902 <USBD_StdDevReq+0x36>
 80088ee:	2b20      	cmp	r3, #32
 80088f0:	d14b      	bne.n	800898a <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80088f8:	689b      	ldr	r3, [r3, #8]
 80088fa:	6839      	ldr	r1, [r7, #0]
 80088fc:	6878      	ldr	r0, [r7, #4]
 80088fe:	4798      	blx	r3
      break;
 8008900:	e048      	b.n	8008994 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008902:	683b      	ldr	r3, [r7, #0]
 8008904:	785b      	ldrb	r3, [r3, #1]
 8008906:	2b09      	cmp	r3, #9
 8008908:	d839      	bhi.n	800897e <USBD_StdDevReq+0xb2>
 800890a:	a201      	add	r2, pc, #4	; (adr r2, 8008910 <USBD_StdDevReq+0x44>)
 800890c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008910:	08008961 	.word	0x08008961
 8008914:	08008975 	.word	0x08008975
 8008918:	0800897f 	.word	0x0800897f
 800891c:	0800896b 	.word	0x0800896b
 8008920:	0800897f 	.word	0x0800897f
 8008924:	08008943 	.word	0x08008943
 8008928:	08008939 	.word	0x08008939
 800892c:	0800897f 	.word	0x0800897f
 8008930:	08008957 	.word	0x08008957
 8008934:	0800894d 	.word	0x0800894d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008938:	6839      	ldr	r1, [r7, #0]
 800893a:	6878      	ldr	r0, [r7, #4]
 800893c:	f000 f9dc 	bl	8008cf8 <USBD_GetDescriptor>
          break;
 8008940:	e022      	b.n	8008988 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008942:	6839      	ldr	r1, [r7, #0]
 8008944:	6878      	ldr	r0, [r7, #4]
 8008946:	f000 fb3f 	bl	8008fc8 <USBD_SetAddress>
          break;
 800894a:	e01d      	b.n	8008988 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800894c:	6839      	ldr	r1, [r7, #0]
 800894e:	6878      	ldr	r0, [r7, #4]
 8008950:	f000 fb7e 	bl	8009050 <USBD_SetConfig>
          break;
 8008954:	e018      	b.n	8008988 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008956:	6839      	ldr	r1, [r7, #0]
 8008958:	6878      	ldr	r0, [r7, #4]
 800895a:	f000 fc07 	bl	800916c <USBD_GetConfig>
          break;
 800895e:	e013      	b.n	8008988 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008960:	6839      	ldr	r1, [r7, #0]
 8008962:	6878      	ldr	r0, [r7, #4]
 8008964:	f000 fc37 	bl	80091d6 <USBD_GetStatus>
          break;
 8008968:	e00e      	b.n	8008988 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800896a:	6839      	ldr	r1, [r7, #0]
 800896c:	6878      	ldr	r0, [r7, #4]
 800896e:	f000 fc65 	bl	800923c <USBD_SetFeature>
          break;
 8008972:	e009      	b.n	8008988 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008974:	6839      	ldr	r1, [r7, #0]
 8008976:	6878      	ldr	r0, [r7, #4]
 8008978:	f000 fc74 	bl	8009264 <USBD_ClrFeature>
          break;
 800897c:	e004      	b.n	8008988 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800897e:	6839      	ldr	r1, [r7, #0]
 8008980:	6878      	ldr	r0, [r7, #4]
 8008982:	f000 fccd 	bl	8009320 <USBD_CtlError>
          break;
 8008986:	bf00      	nop
      }
      break;
 8008988:	e004      	b.n	8008994 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800898a:	6839      	ldr	r1, [r7, #0]
 800898c:	6878      	ldr	r0, [r7, #4]
 800898e:	f000 fcc7 	bl	8009320 <USBD_CtlError>
      break;
 8008992:	bf00      	nop
  }

  return ret;
 8008994:	7bfb      	ldrb	r3, [r7, #15]
}
 8008996:	4618      	mov	r0, r3
 8008998:	3710      	adds	r7, #16
 800899a:	46bd      	mov	sp, r7
 800899c:	bd80      	pop	{r7, pc}
 800899e:	bf00      	nop

080089a0 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 80089a0:	b580      	push	{r7, lr}
 80089a2:	b084      	sub	sp, #16
 80089a4:	af00      	add	r7, sp, #0
 80089a6:	6078      	str	r0, [r7, #4]
 80089a8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80089aa:	2300      	movs	r3, #0
 80089ac:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80089ae:	683b      	ldr	r3, [r7, #0]
 80089b0:	781b      	ldrb	r3, [r3, #0]
 80089b2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80089b6:	2b40      	cmp	r3, #64	; 0x40
 80089b8:	d005      	beq.n	80089c6 <USBD_StdItfReq+0x26>
 80089ba:	2b40      	cmp	r3, #64	; 0x40
 80089bc:	d82e      	bhi.n	8008a1c <USBD_StdItfReq+0x7c>
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d001      	beq.n	80089c6 <USBD_StdItfReq+0x26>
 80089c2:	2b20      	cmp	r3, #32
 80089c4:	d12a      	bne.n	8008a1c <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80089cc:	3b01      	subs	r3, #1
 80089ce:	2b02      	cmp	r3, #2
 80089d0:	d81d      	bhi.n	8008a0e <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80089d2:	683b      	ldr	r3, [r7, #0]
 80089d4:	889b      	ldrh	r3, [r3, #4]
 80089d6:	b2db      	uxtb	r3, r3
 80089d8:	2b01      	cmp	r3, #1
 80089da:	d813      	bhi.n	8008a04 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80089e2:	689b      	ldr	r3, [r3, #8]
 80089e4:	6839      	ldr	r1, [r7, #0]
 80089e6:	6878      	ldr	r0, [r7, #4]
 80089e8:	4798      	blx	r3
 80089ea:	4603      	mov	r3, r0
 80089ec:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80089ee:	683b      	ldr	r3, [r7, #0]
 80089f0:	88db      	ldrh	r3, [r3, #6]
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d110      	bne.n	8008a18 <USBD_StdItfReq+0x78>
 80089f6:	7bfb      	ldrb	r3, [r7, #15]
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d10d      	bne.n	8008a18 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 80089fc:	6878      	ldr	r0, [r7, #4]
 80089fe:	f000 fd58 	bl	80094b2 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008a02:	e009      	b.n	8008a18 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8008a04:	6839      	ldr	r1, [r7, #0]
 8008a06:	6878      	ldr	r0, [r7, #4]
 8008a08:	f000 fc8a 	bl	8009320 <USBD_CtlError>
          break;
 8008a0c:	e004      	b.n	8008a18 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8008a0e:	6839      	ldr	r1, [r7, #0]
 8008a10:	6878      	ldr	r0, [r7, #4]
 8008a12:	f000 fc85 	bl	8009320 <USBD_CtlError>
          break;
 8008a16:	e000      	b.n	8008a1a <USBD_StdItfReq+0x7a>
          break;
 8008a18:	bf00      	nop
      }
      break;
 8008a1a:	e004      	b.n	8008a26 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8008a1c:	6839      	ldr	r1, [r7, #0]
 8008a1e:	6878      	ldr	r0, [r7, #4]
 8008a20:	f000 fc7e 	bl	8009320 <USBD_CtlError>
      break;
 8008a24:	bf00      	nop
  }

  return USBD_OK;
 8008a26:	2300      	movs	r3, #0
}
 8008a28:	4618      	mov	r0, r3
 8008a2a:	3710      	adds	r7, #16
 8008a2c:	46bd      	mov	sp, r7
 8008a2e:	bd80      	pop	{r7, pc}

08008a30 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8008a30:	b580      	push	{r7, lr}
 8008a32:	b084      	sub	sp, #16
 8008a34:	af00      	add	r7, sp, #0
 8008a36:	6078      	str	r0, [r7, #4]
 8008a38:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8008a3a:	2300      	movs	r3, #0
 8008a3c:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8008a3e:	683b      	ldr	r3, [r7, #0]
 8008a40:	889b      	ldrh	r3, [r3, #4]
 8008a42:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008a44:	683b      	ldr	r3, [r7, #0]
 8008a46:	781b      	ldrb	r3, [r3, #0]
 8008a48:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008a4c:	2b40      	cmp	r3, #64	; 0x40
 8008a4e:	d007      	beq.n	8008a60 <USBD_StdEPReq+0x30>
 8008a50:	2b40      	cmp	r3, #64	; 0x40
 8008a52:	f200 8146 	bhi.w	8008ce2 <USBD_StdEPReq+0x2b2>
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d00a      	beq.n	8008a70 <USBD_StdEPReq+0x40>
 8008a5a:	2b20      	cmp	r3, #32
 8008a5c:	f040 8141 	bne.w	8008ce2 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a66:	689b      	ldr	r3, [r3, #8]
 8008a68:	6839      	ldr	r1, [r7, #0]
 8008a6a:	6878      	ldr	r0, [r7, #4]
 8008a6c:	4798      	blx	r3
      break;
 8008a6e:	e13d      	b.n	8008cec <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8008a70:	683b      	ldr	r3, [r7, #0]
 8008a72:	781b      	ldrb	r3, [r3, #0]
 8008a74:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008a78:	2b20      	cmp	r3, #32
 8008a7a:	d10a      	bne.n	8008a92 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a82:	689b      	ldr	r3, [r3, #8]
 8008a84:	6839      	ldr	r1, [r7, #0]
 8008a86:	6878      	ldr	r0, [r7, #4]
 8008a88:	4798      	blx	r3
 8008a8a:	4603      	mov	r3, r0
 8008a8c:	73fb      	strb	r3, [r7, #15]

        return ret;
 8008a8e:	7bfb      	ldrb	r3, [r7, #15]
 8008a90:	e12d      	b.n	8008cee <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8008a92:	683b      	ldr	r3, [r7, #0]
 8008a94:	785b      	ldrb	r3, [r3, #1]
 8008a96:	2b03      	cmp	r3, #3
 8008a98:	d007      	beq.n	8008aaa <USBD_StdEPReq+0x7a>
 8008a9a:	2b03      	cmp	r3, #3
 8008a9c:	f300 811b 	bgt.w	8008cd6 <USBD_StdEPReq+0x2a6>
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d072      	beq.n	8008b8a <USBD_StdEPReq+0x15a>
 8008aa4:	2b01      	cmp	r3, #1
 8008aa6:	d03a      	beq.n	8008b1e <USBD_StdEPReq+0xee>
 8008aa8:	e115      	b.n	8008cd6 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ab0:	2b02      	cmp	r3, #2
 8008ab2:	d002      	beq.n	8008aba <USBD_StdEPReq+0x8a>
 8008ab4:	2b03      	cmp	r3, #3
 8008ab6:	d015      	beq.n	8008ae4 <USBD_StdEPReq+0xb4>
 8008ab8:	e02b      	b.n	8008b12 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008aba:	7bbb      	ldrb	r3, [r7, #14]
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d00c      	beq.n	8008ada <USBD_StdEPReq+0xaa>
 8008ac0:	7bbb      	ldrb	r3, [r7, #14]
 8008ac2:	2b80      	cmp	r3, #128	; 0x80
 8008ac4:	d009      	beq.n	8008ada <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8008ac6:	7bbb      	ldrb	r3, [r7, #14]
 8008ac8:	4619      	mov	r1, r3
 8008aca:	6878      	ldr	r0, [r7, #4]
 8008acc:	f001 f8cc 	bl	8009c68 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8008ad0:	2180      	movs	r1, #128	; 0x80
 8008ad2:	6878      	ldr	r0, [r7, #4]
 8008ad4:	f001 f8c8 	bl	8009c68 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008ad8:	e020      	b.n	8008b1c <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8008ada:	6839      	ldr	r1, [r7, #0]
 8008adc:	6878      	ldr	r0, [r7, #4]
 8008ade:	f000 fc1f 	bl	8009320 <USBD_CtlError>
              break;
 8008ae2:	e01b      	b.n	8008b1c <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008ae4:	683b      	ldr	r3, [r7, #0]
 8008ae6:	885b      	ldrh	r3, [r3, #2]
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d10e      	bne.n	8008b0a <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8008aec:	7bbb      	ldrb	r3, [r7, #14]
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d00b      	beq.n	8008b0a <USBD_StdEPReq+0xda>
 8008af2:	7bbb      	ldrb	r3, [r7, #14]
 8008af4:	2b80      	cmp	r3, #128	; 0x80
 8008af6:	d008      	beq.n	8008b0a <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008af8:	683b      	ldr	r3, [r7, #0]
 8008afa:	88db      	ldrh	r3, [r3, #6]
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d104      	bne.n	8008b0a <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8008b00:	7bbb      	ldrb	r3, [r7, #14]
 8008b02:	4619      	mov	r1, r3
 8008b04:	6878      	ldr	r0, [r7, #4]
 8008b06:	f001 f8af 	bl	8009c68 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8008b0a:	6878      	ldr	r0, [r7, #4]
 8008b0c:	f000 fcd1 	bl	80094b2 <USBD_CtlSendStatus>

              break;
 8008b10:	e004      	b.n	8008b1c <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8008b12:	6839      	ldr	r1, [r7, #0]
 8008b14:	6878      	ldr	r0, [r7, #4]
 8008b16:	f000 fc03 	bl	8009320 <USBD_CtlError>
              break;
 8008b1a:	bf00      	nop
          }
          break;
 8008b1c:	e0e0      	b.n	8008ce0 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b24:	2b02      	cmp	r3, #2
 8008b26:	d002      	beq.n	8008b2e <USBD_StdEPReq+0xfe>
 8008b28:	2b03      	cmp	r3, #3
 8008b2a:	d015      	beq.n	8008b58 <USBD_StdEPReq+0x128>
 8008b2c:	e026      	b.n	8008b7c <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008b2e:	7bbb      	ldrb	r3, [r7, #14]
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d00c      	beq.n	8008b4e <USBD_StdEPReq+0x11e>
 8008b34:	7bbb      	ldrb	r3, [r7, #14]
 8008b36:	2b80      	cmp	r3, #128	; 0x80
 8008b38:	d009      	beq.n	8008b4e <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8008b3a:	7bbb      	ldrb	r3, [r7, #14]
 8008b3c:	4619      	mov	r1, r3
 8008b3e:	6878      	ldr	r0, [r7, #4]
 8008b40:	f001 f892 	bl	8009c68 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8008b44:	2180      	movs	r1, #128	; 0x80
 8008b46:	6878      	ldr	r0, [r7, #4]
 8008b48:	f001 f88e 	bl	8009c68 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008b4c:	e01c      	b.n	8008b88 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8008b4e:	6839      	ldr	r1, [r7, #0]
 8008b50:	6878      	ldr	r0, [r7, #4]
 8008b52:	f000 fbe5 	bl	8009320 <USBD_CtlError>
              break;
 8008b56:	e017      	b.n	8008b88 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008b58:	683b      	ldr	r3, [r7, #0]
 8008b5a:	885b      	ldrh	r3, [r3, #2]
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d112      	bne.n	8008b86 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008b60:	7bbb      	ldrb	r3, [r7, #14]
 8008b62:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d004      	beq.n	8008b74 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8008b6a:	7bbb      	ldrb	r3, [r7, #14]
 8008b6c:	4619      	mov	r1, r3
 8008b6e:	6878      	ldr	r0, [r7, #4]
 8008b70:	f001 f899 	bl	8009ca6 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8008b74:	6878      	ldr	r0, [r7, #4]
 8008b76:	f000 fc9c 	bl	80094b2 <USBD_CtlSendStatus>
              }
              break;
 8008b7a:	e004      	b.n	8008b86 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8008b7c:	6839      	ldr	r1, [r7, #0]
 8008b7e:	6878      	ldr	r0, [r7, #4]
 8008b80:	f000 fbce 	bl	8009320 <USBD_CtlError>
              break;
 8008b84:	e000      	b.n	8008b88 <USBD_StdEPReq+0x158>
              break;
 8008b86:	bf00      	nop
          }
          break;
 8008b88:	e0aa      	b.n	8008ce0 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b90:	2b02      	cmp	r3, #2
 8008b92:	d002      	beq.n	8008b9a <USBD_StdEPReq+0x16a>
 8008b94:	2b03      	cmp	r3, #3
 8008b96:	d032      	beq.n	8008bfe <USBD_StdEPReq+0x1ce>
 8008b98:	e097      	b.n	8008cca <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008b9a:	7bbb      	ldrb	r3, [r7, #14]
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d007      	beq.n	8008bb0 <USBD_StdEPReq+0x180>
 8008ba0:	7bbb      	ldrb	r3, [r7, #14]
 8008ba2:	2b80      	cmp	r3, #128	; 0x80
 8008ba4:	d004      	beq.n	8008bb0 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8008ba6:	6839      	ldr	r1, [r7, #0]
 8008ba8:	6878      	ldr	r0, [r7, #4]
 8008baa:	f000 fbb9 	bl	8009320 <USBD_CtlError>
                break;
 8008bae:	e091      	b.n	8008cd4 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008bb0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	da0b      	bge.n	8008bd0 <USBD_StdEPReq+0x1a0>
 8008bb8:	7bbb      	ldrb	r3, [r7, #14]
 8008bba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008bbe:	4613      	mov	r3, r2
 8008bc0:	009b      	lsls	r3, r3, #2
 8008bc2:	4413      	add	r3, r2
 8008bc4:	009b      	lsls	r3, r3, #2
 8008bc6:	3310      	adds	r3, #16
 8008bc8:	687a      	ldr	r2, [r7, #4]
 8008bca:	4413      	add	r3, r2
 8008bcc:	3304      	adds	r3, #4
 8008bce:	e00b      	b.n	8008be8 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008bd0:	7bbb      	ldrb	r3, [r7, #14]
 8008bd2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008bd6:	4613      	mov	r3, r2
 8008bd8:	009b      	lsls	r3, r3, #2
 8008bda:	4413      	add	r3, r2
 8008bdc:	009b      	lsls	r3, r3, #2
 8008bde:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008be2:	687a      	ldr	r2, [r7, #4]
 8008be4:	4413      	add	r3, r2
 8008be6:	3304      	adds	r3, #4
 8008be8:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008bea:	68bb      	ldr	r3, [r7, #8]
 8008bec:	2200      	movs	r2, #0
 8008bee:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008bf0:	68bb      	ldr	r3, [r7, #8]
 8008bf2:	2202      	movs	r2, #2
 8008bf4:	4619      	mov	r1, r3
 8008bf6:	6878      	ldr	r0, [r7, #4]
 8008bf8:	f000 fbfd 	bl	80093f6 <USBD_CtlSendData>
              break;
 8008bfc:	e06a      	b.n	8008cd4 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008bfe:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	da11      	bge.n	8008c2a <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008c06:	7bbb      	ldrb	r3, [r7, #14]
 8008c08:	f003 020f 	and.w	r2, r3, #15
 8008c0c:	6879      	ldr	r1, [r7, #4]
 8008c0e:	4613      	mov	r3, r2
 8008c10:	009b      	lsls	r3, r3, #2
 8008c12:	4413      	add	r3, r2
 8008c14:	009b      	lsls	r3, r3, #2
 8008c16:	440b      	add	r3, r1
 8008c18:	3318      	adds	r3, #24
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d117      	bne.n	8008c50 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8008c20:	6839      	ldr	r1, [r7, #0]
 8008c22:	6878      	ldr	r0, [r7, #4]
 8008c24:	f000 fb7c 	bl	8009320 <USBD_CtlError>
                  break;
 8008c28:	e054      	b.n	8008cd4 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008c2a:	7bbb      	ldrb	r3, [r7, #14]
 8008c2c:	f003 020f 	and.w	r2, r3, #15
 8008c30:	6879      	ldr	r1, [r7, #4]
 8008c32:	4613      	mov	r3, r2
 8008c34:	009b      	lsls	r3, r3, #2
 8008c36:	4413      	add	r3, r2
 8008c38:	009b      	lsls	r3, r3, #2
 8008c3a:	440b      	add	r3, r1
 8008c3c:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d104      	bne.n	8008c50 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8008c46:	6839      	ldr	r1, [r7, #0]
 8008c48:	6878      	ldr	r0, [r7, #4]
 8008c4a:	f000 fb69 	bl	8009320 <USBD_CtlError>
                  break;
 8008c4e:	e041      	b.n	8008cd4 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008c50:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	da0b      	bge.n	8008c70 <USBD_StdEPReq+0x240>
 8008c58:	7bbb      	ldrb	r3, [r7, #14]
 8008c5a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008c5e:	4613      	mov	r3, r2
 8008c60:	009b      	lsls	r3, r3, #2
 8008c62:	4413      	add	r3, r2
 8008c64:	009b      	lsls	r3, r3, #2
 8008c66:	3310      	adds	r3, #16
 8008c68:	687a      	ldr	r2, [r7, #4]
 8008c6a:	4413      	add	r3, r2
 8008c6c:	3304      	adds	r3, #4
 8008c6e:	e00b      	b.n	8008c88 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008c70:	7bbb      	ldrb	r3, [r7, #14]
 8008c72:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008c76:	4613      	mov	r3, r2
 8008c78:	009b      	lsls	r3, r3, #2
 8008c7a:	4413      	add	r3, r2
 8008c7c:	009b      	lsls	r3, r3, #2
 8008c7e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008c82:	687a      	ldr	r2, [r7, #4]
 8008c84:	4413      	add	r3, r2
 8008c86:	3304      	adds	r3, #4
 8008c88:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008c8a:	7bbb      	ldrb	r3, [r7, #14]
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d002      	beq.n	8008c96 <USBD_StdEPReq+0x266>
 8008c90:	7bbb      	ldrb	r3, [r7, #14]
 8008c92:	2b80      	cmp	r3, #128	; 0x80
 8008c94:	d103      	bne.n	8008c9e <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8008c96:	68bb      	ldr	r3, [r7, #8]
 8008c98:	2200      	movs	r2, #0
 8008c9a:	601a      	str	r2, [r3, #0]
 8008c9c:	e00e      	b.n	8008cbc <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8008c9e:	7bbb      	ldrb	r3, [r7, #14]
 8008ca0:	4619      	mov	r1, r3
 8008ca2:	6878      	ldr	r0, [r7, #4]
 8008ca4:	f001 f81e 	bl	8009ce4 <USBD_LL_IsStallEP>
 8008ca8:	4603      	mov	r3, r0
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d003      	beq.n	8008cb6 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8008cae:	68bb      	ldr	r3, [r7, #8]
 8008cb0:	2201      	movs	r2, #1
 8008cb2:	601a      	str	r2, [r3, #0]
 8008cb4:	e002      	b.n	8008cbc <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8008cb6:	68bb      	ldr	r3, [r7, #8]
 8008cb8:	2200      	movs	r2, #0
 8008cba:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008cbc:	68bb      	ldr	r3, [r7, #8]
 8008cbe:	2202      	movs	r2, #2
 8008cc0:	4619      	mov	r1, r3
 8008cc2:	6878      	ldr	r0, [r7, #4]
 8008cc4:	f000 fb97 	bl	80093f6 <USBD_CtlSendData>
              break;
 8008cc8:	e004      	b.n	8008cd4 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8008cca:	6839      	ldr	r1, [r7, #0]
 8008ccc:	6878      	ldr	r0, [r7, #4]
 8008cce:	f000 fb27 	bl	8009320 <USBD_CtlError>
              break;
 8008cd2:	bf00      	nop
          }
          break;
 8008cd4:	e004      	b.n	8008ce0 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8008cd6:	6839      	ldr	r1, [r7, #0]
 8008cd8:	6878      	ldr	r0, [r7, #4]
 8008cda:	f000 fb21 	bl	8009320 <USBD_CtlError>
          break;
 8008cde:	bf00      	nop
      }
      break;
 8008ce0:	e004      	b.n	8008cec <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8008ce2:	6839      	ldr	r1, [r7, #0]
 8008ce4:	6878      	ldr	r0, [r7, #4]
 8008ce6:	f000 fb1b 	bl	8009320 <USBD_CtlError>
      break;
 8008cea:	bf00      	nop
  }

  return ret;
 8008cec:	7bfb      	ldrb	r3, [r7, #15]
}
 8008cee:	4618      	mov	r0, r3
 8008cf0:	3710      	adds	r7, #16
 8008cf2:	46bd      	mov	sp, r7
 8008cf4:	bd80      	pop	{r7, pc}
	...

08008cf8 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8008cf8:	b580      	push	{r7, lr}
 8008cfa:	b084      	sub	sp, #16
 8008cfc:	af00      	add	r7, sp, #0
 8008cfe:	6078      	str	r0, [r7, #4]
 8008d00:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008d02:	2300      	movs	r3, #0
 8008d04:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008d06:	2300      	movs	r3, #0
 8008d08:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008d0a:	2300      	movs	r3, #0
 8008d0c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008d0e:	683b      	ldr	r3, [r7, #0]
 8008d10:	885b      	ldrh	r3, [r3, #2]
 8008d12:	0a1b      	lsrs	r3, r3, #8
 8008d14:	b29b      	uxth	r3, r3
 8008d16:	3b01      	subs	r3, #1
 8008d18:	2b06      	cmp	r3, #6
 8008d1a:	f200 8128 	bhi.w	8008f6e <USBD_GetDescriptor+0x276>
 8008d1e:	a201      	add	r2, pc, #4	; (adr r2, 8008d24 <USBD_GetDescriptor+0x2c>)
 8008d20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d24:	08008d41 	.word	0x08008d41
 8008d28:	08008d59 	.word	0x08008d59
 8008d2c:	08008d99 	.word	0x08008d99
 8008d30:	08008f6f 	.word	0x08008f6f
 8008d34:	08008f6f 	.word	0x08008f6f
 8008d38:	08008f0f 	.word	0x08008f0f
 8008d3c:	08008f3b 	.word	0x08008f3b
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	687a      	ldr	r2, [r7, #4]
 8008d4a:	7c12      	ldrb	r2, [r2, #16]
 8008d4c:	f107 0108 	add.w	r1, r7, #8
 8008d50:	4610      	mov	r0, r2
 8008d52:	4798      	blx	r3
 8008d54:	60f8      	str	r0, [r7, #12]
      break;
 8008d56:	e112      	b.n	8008f7e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	7c1b      	ldrb	r3, [r3, #16]
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d10d      	bne.n	8008d7c <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008d66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d68:	f107 0208 	add.w	r2, r7, #8
 8008d6c:	4610      	mov	r0, r2
 8008d6e:	4798      	blx	r3
 8008d70:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	3301      	adds	r3, #1
 8008d76:	2202      	movs	r2, #2
 8008d78:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008d7a:	e100      	b.n	8008f7e <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008d82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d84:	f107 0208 	add.w	r2, r7, #8
 8008d88:	4610      	mov	r0, r2
 8008d8a:	4798      	blx	r3
 8008d8c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	3301      	adds	r3, #1
 8008d92:	2202      	movs	r2, #2
 8008d94:	701a      	strb	r2, [r3, #0]
      break;
 8008d96:	e0f2      	b.n	8008f7e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008d98:	683b      	ldr	r3, [r7, #0]
 8008d9a:	885b      	ldrh	r3, [r3, #2]
 8008d9c:	b2db      	uxtb	r3, r3
 8008d9e:	2b05      	cmp	r3, #5
 8008da0:	f200 80ac 	bhi.w	8008efc <USBD_GetDescriptor+0x204>
 8008da4:	a201      	add	r2, pc, #4	; (adr r2, 8008dac <USBD_GetDescriptor+0xb4>)
 8008da6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008daa:	bf00      	nop
 8008dac:	08008dc5 	.word	0x08008dc5
 8008db0:	08008df9 	.word	0x08008df9
 8008db4:	08008e2d 	.word	0x08008e2d
 8008db8:	08008e61 	.word	0x08008e61
 8008dbc:	08008e95 	.word	0x08008e95
 8008dc0:	08008ec9 	.word	0x08008ec9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008dca:	685b      	ldr	r3, [r3, #4]
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d00b      	beq.n	8008de8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008dd6:	685b      	ldr	r3, [r3, #4]
 8008dd8:	687a      	ldr	r2, [r7, #4]
 8008dda:	7c12      	ldrb	r2, [r2, #16]
 8008ddc:	f107 0108 	add.w	r1, r7, #8
 8008de0:	4610      	mov	r0, r2
 8008de2:	4798      	blx	r3
 8008de4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008de6:	e091      	b.n	8008f0c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008de8:	6839      	ldr	r1, [r7, #0]
 8008dea:	6878      	ldr	r0, [r7, #4]
 8008dec:	f000 fa98 	bl	8009320 <USBD_CtlError>
            err++;
 8008df0:	7afb      	ldrb	r3, [r7, #11]
 8008df2:	3301      	adds	r3, #1
 8008df4:	72fb      	strb	r3, [r7, #11]
          break;
 8008df6:	e089      	b.n	8008f0c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008dfe:	689b      	ldr	r3, [r3, #8]
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d00b      	beq.n	8008e1c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008e0a:	689b      	ldr	r3, [r3, #8]
 8008e0c:	687a      	ldr	r2, [r7, #4]
 8008e0e:	7c12      	ldrb	r2, [r2, #16]
 8008e10:	f107 0108 	add.w	r1, r7, #8
 8008e14:	4610      	mov	r0, r2
 8008e16:	4798      	blx	r3
 8008e18:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008e1a:	e077      	b.n	8008f0c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008e1c:	6839      	ldr	r1, [r7, #0]
 8008e1e:	6878      	ldr	r0, [r7, #4]
 8008e20:	f000 fa7e 	bl	8009320 <USBD_CtlError>
            err++;
 8008e24:	7afb      	ldrb	r3, [r7, #11]
 8008e26:	3301      	adds	r3, #1
 8008e28:	72fb      	strb	r3, [r7, #11]
          break;
 8008e2a:	e06f      	b.n	8008f0c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008e32:	68db      	ldr	r3, [r3, #12]
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d00b      	beq.n	8008e50 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008e3e:	68db      	ldr	r3, [r3, #12]
 8008e40:	687a      	ldr	r2, [r7, #4]
 8008e42:	7c12      	ldrb	r2, [r2, #16]
 8008e44:	f107 0108 	add.w	r1, r7, #8
 8008e48:	4610      	mov	r0, r2
 8008e4a:	4798      	blx	r3
 8008e4c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008e4e:	e05d      	b.n	8008f0c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008e50:	6839      	ldr	r1, [r7, #0]
 8008e52:	6878      	ldr	r0, [r7, #4]
 8008e54:	f000 fa64 	bl	8009320 <USBD_CtlError>
            err++;
 8008e58:	7afb      	ldrb	r3, [r7, #11]
 8008e5a:	3301      	adds	r3, #1
 8008e5c:	72fb      	strb	r3, [r7, #11]
          break;
 8008e5e:	e055      	b.n	8008f0c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008e66:	691b      	ldr	r3, [r3, #16]
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d00b      	beq.n	8008e84 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008e72:	691b      	ldr	r3, [r3, #16]
 8008e74:	687a      	ldr	r2, [r7, #4]
 8008e76:	7c12      	ldrb	r2, [r2, #16]
 8008e78:	f107 0108 	add.w	r1, r7, #8
 8008e7c:	4610      	mov	r0, r2
 8008e7e:	4798      	blx	r3
 8008e80:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008e82:	e043      	b.n	8008f0c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008e84:	6839      	ldr	r1, [r7, #0]
 8008e86:	6878      	ldr	r0, [r7, #4]
 8008e88:	f000 fa4a 	bl	8009320 <USBD_CtlError>
            err++;
 8008e8c:	7afb      	ldrb	r3, [r7, #11]
 8008e8e:	3301      	adds	r3, #1
 8008e90:	72fb      	strb	r3, [r7, #11]
          break;
 8008e92:	e03b      	b.n	8008f0c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008e9a:	695b      	ldr	r3, [r3, #20]
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d00b      	beq.n	8008eb8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008ea6:	695b      	ldr	r3, [r3, #20]
 8008ea8:	687a      	ldr	r2, [r7, #4]
 8008eaa:	7c12      	ldrb	r2, [r2, #16]
 8008eac:	f107 0108 	add.w	r1, r7, #8
 8008eb0:	4610      	mov	r0, r2
 8008eb2:	4798      	blx	r3
 8008eb4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008eb6:	e029      	b.n	8008f0c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008eb8:	6839      	ldr	r1, [r7, #0]
 8008eba:	6878      	ldr	r0, [r7, #4]
 8008ebc:	f000 fa30 	bl	8009320 <USBD_CtlError>
            err++;
 8008ec0:	7afb      	ldrb	r3, [r7, #11]
 8008ec2:	3301      	adds	r3, #1
 8008ec4:	72fb      	strb	r3, [r7, #11]
          break;
 8008ec6:	e021      	b.n	8008f0c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008ece:	699b      	ldr	r3, [r3, #24]
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d00b      	beq.n	8008eec <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008eda:	699b      	ldr	r3, [r3, #24]
 8008edc:	687a      	ldr	r2, [r7, #4]
 8008ede:	7c12      	ldrb	r2, [r2, #16]
 8008ee0:	f107 0108 	add.w	r1, r7, #8
 8008ee4:	4610      	mov	r0, r2
 8008ee6:	4798      	blx	r3
 8008ee8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008eea:	e00f      	b.n	8008f0c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008eec:	6839      	ldr	r1, [r7, #0]
 8008eee:	6878      	ldr	r0, [r7, #4]
 8008ef0:	f000 fa16 	bl	8009320 <USBD_CtlError>
            err++;
 8008ef4:	7afb      	ldrb	r3, [r7, #11]
 8008ef6:	3301      	adds	r3, #1
 8008ef8:	72fb      	strb	r3, [r7, #11]
          break;
 8008efa:	e007      	b.n	8008f0c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8008efc:	6839      	ldr	r1, [r7, #0]
 8008efe:	6878      	ldr	r0, [r7, #4]
 8008f00:	f000 fa0e 	bl	8009320 <USBD_CtlError>
          err++;
 8008f04:	7afb      	ldrb	r3, [r7, #11]
 8008f06:	3301      	adds	r3, #1
 8008f08:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8008f0a:	e038      	b.n	8008f7e <USBD_GetDescriptor+0x286>
 8008f0c:	e037      	b.n	8008f7e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	7c1b      	ldrb	r3, [r3, #16]
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d109      	bne.n	8008f2a <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008f1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f1e:	f107 0208 	add.w	r2, r7, #8
 8008f22:	4610      	mov	r0, r2
 8008f24:	4798      	blx	r3
 8008f26:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008f28:	e029      	b.n	8008f7e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008f2a:	6839      	ldr	r1, [r7, #0]
 8008f2c:	6878      	ldr	r0, [r7, #4]
 8008f2e:	f000 f9f7 	bl	8009320 <USBD_CtlError>
        err++;
 8008f32:	7afb      	ldrb	r3, [r7, #11]
 8008f34:	3301      	adds	r3, #1
 8008f36:	72fb      	strb	r3, [r7, #11]
      break;
 8008f38:	e021      	b.n	8008f7e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	7c1b      	ldrb	r3, [r3, #16]
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d10d      	bne.n	8008f5e <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f4a:	f107 0208 	add.w	r2, r7, #8
 8008f4e:	4610      	mov	r0, r2
 8008f50:	4798      	blx	r3
 8008f52:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	3301      	adds	r3, #1
 8008f58:	2207      	movs	r2, #7
 8008f5a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008f5c:	e00f      	b.n	8008f7e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008f5e:	6839      	ldr	r1, [r7, #0]
 8008f60:	6878      	ldr	r0, [r7, #4]
 8008f62:	f000 f9dd 	bl	8009320 <USBD_CtlError>
        err++;
 8008f66:	7afb      	ldrb	r3, [r7, #11]
 8008f68:	3301      	adds	r3, #1
 8008f6a:	72fb      	strb	r3, [r7, #11]
      break;
 8008f6c:	e007      	b.n	8008f7e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8008f6e:	6839      	ldr	r1, [r7, #0]
 8008f70:	6878      	ldr	r0, [r7, #4]
 8008f72:	f000 f9d5 	bl	8009320 <USBD_CtlError>
      err++;
 8008f76:	7afb      	ldrb	r3, [r7, #11]
 8008f78:	3301      	adds	r3, #1
 8008f7a:	72fb      	strb	r3, [r7, #11]
      break;
 8008f7c:	bf00      	nop
  }

  if (err != 0U)
 8008f7e:	7afb      	ldrb	r3, [r7, #11]
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d11c      	bne.n	8008fbe <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8008f84:	893b      	ldrh	r3, [r7, #8]
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d011      	beq.n	8008fae <USBD_GetDescriptor+0x2b6>
 8008f8a:	683b      	ldr	r3, [r7, #0]
 8008f8c:	88db      	ldrh	r3, [r3, #6]
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d00d      	beq.n	8008fae <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8008f92:	683b      	ldr	r3, [r7, #0]
 8008f94:	88da      	ldrh	r2, [r3, #6]
 8008f96:	893b      	ldrh	r3, [r7, #8]
 8008f98:	4293      	cmp	r3, r2
 8008f9a:	bf28      	it	cs
 8008f9c:	4613      	movcs	r3, r2
 8008f9e:	b29b      	uxth	r3, r3
 8008fa0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008fa2:	893b      	ldrh	r3, [r7, #8]
 8008fa4:	461a      	mov	r2, r3
 8008fa6:	68f9      	ldr	r1, [r7, #12]
 8008fa8:	6878      	ldr	r0, [r7, #4]
 8008faa:	f000 fa24 	bl	80093f6 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8008fae:	683b      	ldr	r3, [r7, #0]
 8008fb0:	88db      	ldrh	r3, [r3, #6]
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d104      	bne.n	8008fc0 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8008fb6:	6878      	ldr	r0, [r7, #4]
 8008fb8:	f000 fa7b 	bl	80094b2 <USBD_CtlSendStatus>
 8008fbc:	e000      	b.n	8008fc0 <USBD_GetDescriptor+0x2c8>
    return;
 8008fbe:	bf00      	nop
    }
  }
}
 8008fc0:	3710      	adds	r7, #16
 8008fc2:	46bd      	mov	sp, r7
 8008fc4:	bd80      	pop	{r7, pc}
 8008fc6:	bf00      	nop

08008fc8 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008fc8:	b580      	push	{r7, lr}
 8008fca:	b084      	sub	sp, #16
 8008fcc:	af00      	add	r7, sp, #0
 8008fce:	6078      	str	r0, [r7, #4]
 8008fd0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008fd2:	683b      	ldr	r3, [r7, #0]
 8008fd4:	889b      	ldrh	r3, [r3, #4]
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d130      	bne.n	800903c <USBD_SetAddress+0x74>
 8008fda:	683b      	ldr	r3, [r7, #0]
 8008fdc:	88db      	ldrh	r3, [r3, #6]
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d12c      	bne.n	800903c <USBD_SetAddress+0x74>
 8008fe2:	683b      	ldr	r3, [r7, #0]
 8008fe4:	885b      	ldrh	r3, [r3, #2]
 8008fe6:	2b7f      	cmp	r3, #127	; 0x7f
 8008fe8:	d828      	bhi.n	800903c <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008fea:	683b      	ldr	r3, [r7, #0]
 8008fec:	885b      	ldrh	r3, [r3, #2]
 8008fee:	b2db      	uxtb	r3, r3
 8008ff0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008ff4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ffc:	2b03      	cmp	r3, #3
 8008ffe:	d104      	bne.n	800900a <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8009000:	6839      	ldr	r1, [r7, #0]
 8009002:	6878      	ldr	r0, [r7, #4]
 8009004:	f000 f98c 	bl	8009320 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009008:	e01d      	b.n	8009046 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	7bfa      	ldrb	r2, [r7, #15]
 800900e:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009012:	7bfb      	ldrb	r3, [r7, #15]
 8009014:	4619      	mov	r1, r3
 8009016:	6878      	ldr	r0, [r7, #4]
 8009018:	f000 fe90 	bl	8009d3c <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800901c:	6878      	ldr	r0, [r7, #4]
 800901e:	f000 fa48 	bl	80094b2 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009022:	7bfb      	ldrb	r3, [r7, #15]
 8009024:	2b00      	cmp	r3, #0
 8009026:	d004      	beq.n	8009032 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	2202      	movs	r2, #2
 800902c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009030:	e009      	b.n	8009046 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	2201      	movs	r2, #1
 8009036:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800903a:	e004      	b.n	8009046 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800903c:	6839      	ldr	r1, [r7, #0]
 800903e:	6878      	ldr	r0, [r7, #4]
 8009040:	f000 f96e 	bl	8009320 <USBD_CtlError>
  }
}
 8009044:	bf00      	nop
 8009046:	bf00      	nop
 8009048:	3710      	adds	r7, #16
 800904a:	46bd      	mov	sp, r7
 800904c:	bd80      	pop	{r7, pc}
	...

08009050 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009050:	b580      	push	{r7, lr}
 8009052:	b082      	sub	sp, #8
 8009054:	af00      	add	r7, sp, #0
 8009056:	6078      	str	r0, [r7, #4]
 8009058:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800905a:	683b      	ldr	r3, [r7, #0]
 800905c:	885b      	ldrh	r3, [r3, #2]
 800905e:	b2da      	uxtb	r2, r3
 8009060:	4b41      	ldr	r3, [pc, #260]	; (8009168 <USBD_SetConfig+0x118>)
 8009062:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009064:	4b40      	ldr	r3, [pc, #256]	; (8009168 <USBD_SetConfig+0x118>)
 8009066:	781b      	ldrb	r3, [r3, #0]
 8009068:	2b01      	cmp	r3, #1
 800906a:	d904      	bls.n	8009076 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800906c:	6839      	ldr	r1, [r7, #0]
 800906e:	6878      	ldr	r0, [r7, #4]
 8009070:	f000 f956 	bl	8009320 <USBD_CtlError>
 8009074:	e075      	b.n	8009162 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800907c:	2b02      	cmp	r3, #2
 800907e:	d002      	beq.n	8009086 <USBD_SetConfig+0x36>
 8009080:	2b03      	cmp	r3, #3
 8009082:	d023      	beq.n	80090cc <USBD_SetConfig+0x7c>
 8009084:	e062      	b.n	800914c <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8009086:	4b38      	ldr	r3, [pc, #224]	; (8009168 <USBD_SetConfig+0x118>)
 8009088:	781b      	ldrb	r3, [r3, #0]
 800908a:	2b00      	cmp	r3, #0
 800908c:	d01a      	beq.n	80090c4 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800908e:	4b36      	ldr	r3, [pc, #216]	; (8009168 <USBD_SetConfig+0x118>)
 8009090:	781b      	ldrb	r3, [r3, #0]
 8009092:	461a      	mov	r2, r3
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	2203      	movs	r2, #3
 800909c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80090a0:	4b31      	ldr	r3, [pc, #196]	; (8009168 <USBD_SetConfig+0x118>)
 80090a2:	781b      	ldrb	r3, [r3, #0]
 80090a4:	4619      	mov	r1, r3
 80090a6:	6878      	ldr	r0, [r7, #4]
 80090a8:	f7ff f9e5 	bl	8008476 <USBD_SetClassConfig>
 80090ac:	4603      	mov	r3, r0
 80090ae:	2b02      	cmp	r3, #2
 80090b0:	d104      	bne.n	80090bc <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 80090b2:	6839      	ldr	r1, [r7, #0]
 80090b4:	6878      	ldr	r0, [r7, #4]
 80090b6:	f000 f933 	bl	8009320 <USBD_CtlError>
            return;
 80090ba:	e052      	b.n	8009162 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 80090bc:	6878      	ldr	r0, [r7, #4]
 80090be:	f000 f9f8 	bl	80094b2 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80090c2:	e04e      	b.n	8009162 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80090c4:	6878      	ldr	r0, [r7, #4]
 80090c6:	f000 f9f4 	bl	80094b2 <USBD_CtlSendStatus>
        break;
 80090ca:	e04a      	b.n	8009162 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 80090cc:	4b26      	ldr	r3, [pc, #152]	; (8009168 <USBD_SetConfig+0x118>)
 80090ce:	781b      	ldrb	r3, [r3, #0]
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	d112      	bne.n	80090fa <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	2202      	movs	r2, #2
 80090d8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 80090dc:	4b22      	ldr	r3, [pc, #136]	; (8009168 <USBD_SetConfig+0x118>)
 80090de:	781b      	ldrb	r3, [r3, #0]
 80090e0:	461a      	mov	r2, r3
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 80090e6:	4b20      	ldr	r3, [pc, #128]	; (8009168 <USBD_SetConfig+0x118>)
 80090e8:	781b      	ldrb	r3, [r3, #0]
 80090ea:	4619      	mov	r1, r3
 80090ec:	6878      	ldr	r0, [r7, #4]
 80090ee:	f7ff f9e1 	bl	80084b4 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 80090f2:	6878      	ldr	r0, [r7, #4]
 80090f4:	f000 f9dd 	bl	80094b2 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80090f8:	e033      	b.n	8009162 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 80090fa:	4b1b      	ldr	r3, [pc, #108]	; (8009168 <USBD_SetConfig+0x118>)
 80090fc:	781b      	ldrb	r3, [r3, #0]
 80090fe:	461a      	mov	r2, r3
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	685b      	ldr	r3, [r3, #4]
 8009104:	429a      	cmp	r2, r3
 8009106:	d01d      	beq.n	8009144 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	685b      	ldr	r3, [r3, #4]
 800910c:	b2db      	uxtb	r3, r3
 800910e:	4619      	mov	r1, r3
 8009110:	6878      	ldr	r0, [r7, #4]
 8009112:	f7ff f9cf 	bl	80084b4 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8009116:	4b14      	ldr	r3, [pc, #80]	; (8009168 <USBD_SetConfig+0x118>)
 8009118:	781b      	ldrb	r3, [r3, #0]
 800911a:	461a      	mov	r2, r3
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009120:	4b11      	ldr	r3, [pc, #68]	; (8009168 <USBD_SetConfig+0x118>)
 8009122:	781b      	ldrb	r3, [r3, #0]
 8009124:	4619      	mov	r1, r3
 8009126:	6878      	ldr	r0, [r7, #4]
 8009128:	f7ff f9a5 	bl	8008476 <USBD_SetClassConfig>
 800912c:	4603      	mov	r3, r0
 800912e:	2b02      	cmp	r3, #2
 8009130:	d104      	bne.n	800913c <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8009132:	6839      	ldr	r1, [r7, #0]
 8009134:	6878      	ldr	r0, [r7, #4]
 8009136:	f000 f8f3 	bl	8009320 <USBD_CtlError>
            return;
 800913a:	e012      	b.n	8009162 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800913c:	6878      	ldr	r0, [r7, #4]
 800913e:	f000 f9b8 	bl	80094b2 <USBD_CtlSendStatus>
        break;
 8009142:	e00e      	b.n	8009162 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009144:	6878      	ldr	r0, [r7, #4]
 8009146:	f000 f9b4 	bl	80094b2 <USBD_CtlSendStatus>
        break;
 800914a:	e00a      	b.n	8009162 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800914c:	6839      	ldr	r1, [r7, #0]
 800914e:	6878      	ldr	r0, [r7, #4]
 8009150:	f000 f8e6 	bl	8009320 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8009154:	4b04      	ldr	r3, [pc, #16]	; (8009168 <USBD_SetConfig+0x118>)
 8009156:	781b      	ldrb	r3, [r3, #0]
 8009158:	4619      	mov	r1, r3
 800915a:	6878      	ldr	r0, [r7, #4]
 800915c:	f7ff f9aa 	bl	80084b4 <USBD_ClrClassConfig>
        break;
 8009160:	bf00      	nop
    }
  }
}
 8009162:	3708      	adds	r7, #8
 8009164:	46bd      	mov	sp, r7
 8009166:	bd80      	pop	{r7, pc}
 8009168:	20000270 	.word	0x20000270

0800916c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800916c:	b580      	push	{r7, lr}
 800916e:	b082      	sub	sp, #8
 8009170:	af00      	add	r7, sp, #0
 8009172:	6078      	str	r0, [r7, #4]
 8009174:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009176:	683b      	ldr	r3, [r7, #0]
 8009178:	88db      	ldrh	r3, [r3, #6]
 800917a:	2b01      	cmp	r3, #1
 800917c:	d004      	beq.n	8009188 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800917e:	6839      	ldr	r1, [r7, #0]
 8009180:	6878      	ldr	r0, [r7, #4]
 8009182:	f000 f8cd 	bl	8009320 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8009186:	e022      	b.n	80091ce <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800918e:	2b02      	cmp	r3, #2
 8009190:	dc02      	bgt.n	8009198 <USBD_GetConfig+0x2c>
 8009192:	2b00      	cmp	r3, #0
 8009194:	dc03      	bgt.n	800919e <USBD_GetConfig+0x32>
 8009196:	e015      	b.n	80091c4 <USBD_GetConfig+0x58>
 8009198:	2b03      	cmp	r3, #3
 800919a:	d00b      	beq.n	80091b4 <USBD_GetConfig+0x48>
 800919c:	e012      	b.n	80091c4 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	2200      	movs	r2, #0
 80091a2:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	3308      	adds	r3, #8
 80091a8:	2201      	movs	r2, #1
 80091aa:	4619      	mov	r1, r3
 80091ac:	6878      	ldr	r0, [r7, #4]
 80091ae:	f000 f922 	bl	80093f6 <USBD_CtlSendData>
        break;
 80091b2:	e00c      	b.n	80091ce <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	3304      	adds	r3, #4
 80091b8:	2201      	movs	r2, #1
 80091ba:	4619      	mov	r1, r3
 80091bc:	6878      	ldr	r0, [r7, #4]
 80091be:	f000 f91a 	bl	80093f6 <USBD_CtlSendData>
        break;
 80091c2:	e004      	b.n	80091ce <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 80091c4:	6839      	ldr	r1, [r7, #0]
 80091c6:	6878      	ldr	r0, [r7, #4]
 80091c8:	f000 f8aa 	bl	8009320 <USBD_CtlError>
        break;
 80091cc:	bf00      	nop
}
 80091ce:	bf00      	nop
 80091d0:	3708      	adds	r7, #8
 80091d2:	46bd      	mov	sp, r7
 80091d4:	bd80      	pop	{r7, pc}

080091d6 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80091d6:	b580      	push	{r7, lr}
 80091d8:	b082      	sub	sp, #8
 80091da:	af00      	add	r7, sp, #0
 80091dc:	6078      	str	r0, [r7, #4]
 80091de:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80091e6:	3b01      	subs	r3, #1
 80091e8:	2b02      	cmp	r3, #2
 80091ea:	d81e      	bhi.n	800922a <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80091ec:	683b      	ldr	r3, [r7, #0]
 80091ee:	88db      	ldrh	r3, [r3, #6]
 80091f0:	2b02      	cmp	r3, #2
 80091f2:	d004      	beq.n	80091fe <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 80091f4:	6839      	ldr	r1, [r7, #0]
 80091f6:	6878      	ldr	r0, [r7, #4]
 80091f8:	f000 f892 	bl	8009320 <USBD_CtlError>
        break;
 80091fc:	e01a      	b.n	8009234 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	2201      	movs	r2, #1
 8009202:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800920a:	2b00      	cmp	r3, #0
 800920c:	d005      	beq.n	800921a <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	68db      	ldr	r3, [r3, #12]
 8009212:	f043 0202 	orr.w	r2, r3, #2
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	330c      	adds	r3, #12
 800921e:	2202      	movs	r2, #2
 8009220:	4619      	mov	r1, r3
 8009222:	6878      	ldr	r0, [r7, #4]
 8009224:	f000 f8e7 	bl	80093f6 <USBD_CtlSendData>
      break;
 8009228:	e004      	b.n	8009234 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800922a:	6839      	ldr	r1, [r7, #0]
 800922c:	6878      	ldr	r0, [r7, #4]
 800922e:	f000 f877 	bl	8009320 <USBD_CtlError>
      break;
 8009232:	bf00      	nop
  }
}
 8009234:	bf00      	nop
 8009236:	3708      	adds	r7, #8
 8009238:	46bd      	mov	sp, r7
 800923a:	bd80      	pop	{r7, pc}

0800923c <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800923c:	b580      	push	{r7, lr}
 800923e:	b082      	sub	sp, #8
 8009240:	af00      	add	r7, sp, #0
 8009242:	6078      	str	r0, [r7, #4]
 8009244:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009246:	683b      	ldr	r3, [r7, #0]
 8009248:	885b      	ldrh	r3, [r3, #2]
 800924a:	2b01      	cmp	r3, #1
 800924c:	d106      	bne.n	800925c <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	2201      	movs	r2, #1
 8009252:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8009256:	6878      	ldr	r0, [r7, #4]
 8009258:	f000 f92b 	bl	80094b2 <USBD_CtlSendStatus>
  }
}
 800925c:	bf00      	nop
 800925e:	3708      	adds	r7, #8
 8009260:	46bd      	mov	sp, r7
 8009262:	bd80      	pop	{r7, pc}

08009264 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009264:	b580      	push	{r7, lr}
 8009266:	b082      	sub	sp, #8
 8009268:	af00      	add	r7, sp, #0
 800926a:	6078      	str	r0, [r7, #4]
 800926c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009274:	3b01      	subs	r3, #1
 8009276:	2b02      	cmp	r3, #2
 8009278:	d80b      	bhi.n	8009292 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800927a:	683b      	ldr	r3, [r7, #0]
 800927c:	885b      	ldrh	r3, [r3, #2]
 800927e:	2b01      	cmp	r3, #1
 8009280:	d10c      	bne.n	800929c <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	2200      	movs	r2, #0
 8009286:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800928a:	6878      	ldr	r0, [r7, #4]
 800928c:	f000 f911 	bl	80094b2 <USBD_CtlSendStatus>
      }
      break;
 8009290:	e004      	b.n	800929c <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8009292:	6839      	ldr	r1, [r7, #0]
 8009294:	6878      	ldr	r0, [r7, #4]
 8009296:	f000 f843 	bl	8009320 <USBD_CtlError>
      break;
 800929a:	e000      	b.n	800929e <USBD_ClrFeature+0x3a>
      break;
 800929c:	bf00      	nop
  }
}
 800929e:	bf00      	nop
 80092a0:	3708      	adds	r7, #8
 80092a2:	46bd      	mov	sp, r7
 80092a4:	bd80      	pop	{r7, pc}

080092a6 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80092a6:	b480      	push	{r7}
 80092a8:	b083      	sub	sp, #12
 80092aa:	af00      	add	r7, sp, #0
 80092ac:	6078      	str	r0, [r7, #4]
 80092ae:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 80092b0:	683b      	ldr	r3, [r7, #0]
 80092b2:	781a      	ldrb	r2, [r3, #0]
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 80092b8:	683b      	ldr	r3, [r7, #0]
 80092ba:	785a      	ldrb	r2, [r3, #1]
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 80092c0:	683b      	ldr	r3, [r7, #0]
 80092c2:	3302      	adds	r3, #2
 80092c4:	781b      	ldrb	r3, [r3, #0]
 80092c6:	b29a      	uxth	r2, r3
 80092c8:	683b      	ldr	r3, [r7, #0]
 80092ca:	3303      	adds	r3, #3
 80092cc:	781b      	ldrb	r3, [r3, #0]
 80092ce:	b29b      	uxth	r3, r3
 80092d0:	021b      	lsls	r3, r3, #8
 80092d2:	b29b      	uxth	r3, r3
 80092d4:	4413      	add	r3, r2
 80092d6:	b29a      	uxth	r2, r3
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 80092dc:	683b      	ldr	r3, [r7, #0]
 80092de:	3304      	adds	r3, #4
 80092e0:	781b      	ldrb	r3, [r3, #0]
 80092e2:	b29a      	uxth	r2, r3
 80092e4:	683b      	ldr	r3, [r7, #0]
 80092e6:	3305      	adds	r3, #5
 80092e8:	781b      	ldrb	r3, [r3, #0]
 80092ea:	b29b      	uxth	r3, r3
 80092ec:	021b      	lsls	r3, r3, #8
 80092ee:	b29b      	uxth	r3, r3
 80092f0:	4413      	add	r3, r2
 80092f2:	b29a      	uxth	r2, r3
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 80092f8:	683b      	ldr	r3, [r7, #0]
 80092fa:	3306      	adds	r3, #6
 80092fc:	781b      	ldrb	r3, [r3, #0]
 80092fe:	b29a      	uxth	r2, r3
 8009300:	683b      	ldr	r3, [r7, #0]
 8009302:	3307      	adds	r3, #7
 8009304:	781b      	ldrb	r3, [r3, #0]
 8009306:	b29b      	uxth	r3, r3
 8009308:	021b      	lsls	r3, r3, #8
 800930a:	b29b      	uxth	r3, r3
 800930c:	4413      	add	r3, r2
 800930e:	b29a      	uxth	r2, r3
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	80da      	strh	r2, [r3, #6]

}
 8009314:	bf00      	nop
 8009316:	370c      	adds	r7, #12
 8009318:	46bd      	mov	sp, r7
 800931a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800931e:	4770      	bx	lr

08009320 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8009320:	b580      	push	{r7, lr}
 8009322:	b082      	sub	sp, #8
 8009324:	af00      	add	r7, sp, #0
 8009326:	6078      	str	r0, [r7, #4]
 8009328:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800932a:	2180      	movs	r1, #128	; 0x80
 800932c:	6878      	ldr	r0, [r7, #4]
 800932e:	f000 fc9b 	bl	8009c68 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8009332:	2100      	movs	r1, #0
 8009334:	6878      	ldr	r0, [r7, #4]
 8009336:	f000 fc97 	bl	8009c68 <USBD_LL_StallEP>
}
 800933a:	bf00      	nop
 800933c:	3708      	adds	r7, #8
 800933e:	46bd      	mov	sp, r7
 8009340:	bd80      	pop	{r7, pc}

08009342 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009342:	b580      	push	{r7, lr}
 8009344:	b086      	sub	sp, #24
 8009346:	af00      	add	r7, sp, #0
 8009348:	60f8      	str	r0, [r7, #12]
 800934a:	60b9      	str	r1, [r7, #8]
 800934c:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800934e:	2300      	movs	r3, #0
 8009350:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	2b00      	cmp	r3, #0
 8009356:	d032      	beq.n	80093be <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8009358:	68f8      	ldr	r0, [r7, #12]
 800935a:	f000 f834 	bl	80093c6 <USBD_GetLen>
 800935e:	4603      	mov	r3, r0
 8009360:	3301      	adds	r3, #1
 8009362:	b29b      	uxth	r3, r3
 8009364:	005b      	lsls	r3, r3, #1
 8009366:	b29a      	uxth	r2, r3
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800936c:	7dfb      	ldrb	r3, [r7, #23]
 800936e:	1c5a      	adds	r2, r3, #1
 8009370:	75fa      	strb	r2, [r7, #23]
 8009372:	461a      	mov	r2, r3
 8009374:	68bb      	ldr	r3, [r7, #8]
 8009376:	4413      	add	r3, r2
 8009378:	687a      	ldr	r2, [r7, #4]
 800937a:	7812      	ldrb	r2, [r2, #0]
 800937c:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800937e:	7dfb      	ldrb	r3, [r7, #23]
 8009380:	1c5a      	adds	r2, r3, #1
 8009382:	75fa      	strb	r2, [r7, #23]
 8009384:	461a      	mov	r2, r3
 8009386:	68bb      	ldr	r3, [r7, #8]
 8009388:	4413      	add	r3, r2
 800938a:	2203      	movs	r2, #3
 800938c:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800938e:	e012      	b.n	80093b6 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	1c5a      	adds	r2, r3, #1
 8009394:	60fa      	str	r2, [r7, #12]
 8009396:	7dfa      	ldrb	r2, [r7, #23]
 8009398:	1c51      	adds	r1, r2, #1
 800939a:	75f9      	strb	r1, [r7, #23]
 800939c:	4611      	mov	r1, r2
 800939e:	68ba      	ldr	r2, [r7, #8]
 80093a0:	440a      	add	r2, r1
 80093a2:	781b      	ldrb	r3, [r3, #0]
 80093a4:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 80093a6:	7dfb      	ldrb	r3, [r7, #23]
 80093a8:	1c5a      	adds	r2, r3, #1
 80093aa:	75fa      	strb	r2, [r7, #23]
 80093ac:	461a      	mov	r2, r3
 80093ae:	68bb      	ldr	r3, [r7, #8]
 80093b0:	4413      	add	r3, r2
 80093b2:	2200      	movs	r2, #0
 80093b4:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	781b      	ldrb	r3, [r3, #0]
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d1e8      	bne.n	8009390 <USBD_GetString+0x4e>
    }
  }
}
 80093be:	bf00      	nop
 80093c0:	3718      	adds	r7, #24
 80093c2:	46bd      	mov	sp, r7
 80093c4:	bd80      	pop	{r7, pc}

080093c6 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80093c6:	b480      	push	{r7}
 80093c8:	b085      	sub	sp, #20
 80093ca:	af00      	add	r7, sp, #0
 80093cc:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80093ce:	2300      	movs	r3, #0
 80093d0:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 80093d2:	e005      	b.n	80093e0 <USBD_GetLen+0x1a>
  {
    len++;
 80093d4:	7bfb      	ldrb	r3, [r7, #15]
 80093d6:	3301      	adds	r3, #1
 80093d8:	73fb      	strb	r3, [r7, #15]
    buf++;
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	3301      	adds	r3, #1
 80093de:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	781b      	ldrb	r3, [r3, #0]
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d1f5      	bne.n	80093d4 <USBD_GetLen+0xe>
  }

  return len;
 80093e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80093ea:	4618      	mov	r0, r3
 80093ec:	3714      	adds	r7, #20
 80093ee:	46bd      	mov	sp, r7
 80093f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093f4:	4770      	bx	lr

080093f6 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 80093f6:	b580      	push	{r7, lr}
 80093f8:	b084      	sub	sp, #16
 80093fa:	af00      	add	r7, sp, #0
 80093fc:	60f8      	str	r0, [r7, #12]
 80093fe:	60b9      	str	r1, [r7, #8]
 8009400:	4613      	mov	r3, r2
 8009402:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009404:	68fb      	ldr	r3, [r7, #12]
 8009406:	2202      	movs	r2, #2
 8009408:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800940c:	88fa      	ldrh	r2, [r7, #6]
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8009412:	88fa      	ldrh	r2, [r7, #6]
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009418:	88fb      	ldrh	r3, [r7, #6]
 800941a:	68ba      	ldr	r2, [r7, #8]
 800941c:	2100      	movs	r1, #0
 800941e:	68f8      	ldr	r0, [r7, #12]
 8009420:	f000 fcab 	bl	8009d7a <USBD_LL_Transmit>

  return USBD_OK;
 8009424:	2300      	movs	r3, #0
}
 8009426:	4618      	mov	r0, r3
 8009428:	3710      	adds	r7, #16
 800942a:	46bd      	mov	sp, r7
 800942c:	bd80      	pop	{r7, pc}

0800942e <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800942e:	b580      	push	{r7, lr}
 8009430:	b084      	sub	sp, #16
 8009432:	af00      	add	r7, sp, #0
 8009434:	60f8      	str	r0, [r7, #12]
 8009436:	60b9      	str	r1, [r7, #8]
 8009438:	4613      	mov	r3, r2
 800943a:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800943c:	88fb      	ldrh	r3, [r7, #6]
 800943e:	68ba      	ldr	r2, [r7, #8]
 8009440:	2100      	movs	r1, #0
 8009442:	68f8      	ldr	r0, [r7, #12]
 8009444:	f000 fc99 	bl	8009d7a <USBD_LL_Transmit>

  return USBD_OK;
 8009448:	2300      	movs	r3, #0
}
 800944a:	4618      	mov	r0, r3
 800944c:	3710      	adds	r7, #16
 800944e:	46bd      	mov	sp, r7
 8009450:	bd80      	pop	{r7, pc}

08009452 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8009452:	b580      	push	{r7, lr}
 8009454:	b084      	sub	sp, #16
 8009456:	af00      	add	r7, sp, #0
 8009458:	60f8      	str	r0, [r7, #12]
 800945a:	60b9      	str	r1, [r7, #8]
 800945c:	4613      	mov	r3, r2
 800945e:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	2203      	movs	r2, #3
 8009464:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8009468:	88fa      	ldrh	r2, [r7, #6]
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8009470:	88fa      	ldrh	r2, [r7, #6]
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009478:	88fb      	ldrh	r3, [r7, #6]
 800947a:	68ba      	ldr	r2, [r7, #8]
 800947c:	2100      	movs	r1, #0
 800947e:	68f8      	ldr	r0, [r7, #12]
 8009480:	f000 fc9e 	bl	8009dc0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009484:	2300      	movs	r3, #0
}
 8009486:	4618      	mov	r0, r3
 8009488:	3710      	adds	r7, #16
 800948a:	46bd      	mov	sp, r7
 800948c:	bd80      	pop	{r7, pc}

0800948e <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800948e:	b580      	push	{r7, lr}
 8009490:	b084      	sub	sp, #16
 8009492:	af00      	add	r7, sp, #0
 8009494:	60f8      	str	r0, [r7, #12]
 8009496:	60b9      	str	r1, [r7, #8]
 8009498:	4613      	mov	r3, r2
 800949a:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800949c:	88fb      	ldrh	r3, [r7, #6]
 800949e:	68ba      	ldr	r2, [r7, #8]
 80094a0:	2100      	movs	r1, #0
 80094a2:	68f8      	ldr	r0, [r7, #12]
 80094a4:	f000 fc8c 	bl	8009dc0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80094a8:	2300      	movs	r3, #0
}
 80094aa:	4618      	mov	r0, r3
 80094ac:	3710      	adds	r7, #16
 80094ae:	46bd      	mov	sp, r7
 80094b0:	bd80      	pop	{r7, pc}

080094b2 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80094b2:	b580      	push	{r7, lr}
 80094b4:	b082      	sub	sp, #8
 80094b6:	af00      	add	r7, sp, #0
 80094b8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	2204      	movs	r2, #4
 80094be:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80094c2:	2300      	movs	r3, #0
 80094c4:	2200      	movs	r2, #0
 80094c6:	2100      	movs	r1, #0
 80094c8:	6878      	ldr	r0, [r7, #4]
 80094ca:	f000 fc56 	bl	8009d7a <USBD_LL_Transmit>

  return USBD_OK;
 80094ce:	2300      	movs	r3, #0
}
 80094d0:	4618      	mov	r0, r3
 80094d2:	3708      	adds	r7, #8
 80094d4:	46bd      	mov	sp, r7
 80094d6:	bd80      	pop	{r7, pc}

080094d8 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80094d8:	b580      	push	{r7, lr}
 80094da:	b082      	sub	sp, #8
 80094dc:	af00      	add	r7, sp, #0
 80094de:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	2205      	movs	r2, #5
 80094e4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80094e8:	2300      	movs	r3, #0
 80094ea:	2200      	movs	r2, #0
 80094ec:	2100      	movs	r1, #0
 80094ee:	6878      	ldr	r0, [r7, #4]
 80094f0:	f000 fc66 	bl	8009dc0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80094f4:	2300      	movs	r3, #0
}
 80094f6:	4618      	mov	r0, r3
 80094f8:	3708      	adds	r7, #8
 80094fa:	46bd      	mov	sp, r7
 80094fc:	bd80      	pop	{r7, pc}
	...

08009500 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009500:	b580      	push	{r7, lr}
 8009502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009504:	2200      	movs	r2, #0
 8009506:	4912      	ldr	r1, [pc, #72]	; (8009550 <MX_USB_DEVICE_Init+0x50>)
 8009508:	4812      	ldr	r0, [pc, #72]	; (8009554 <MX_USB_DEVICE_Init+0x54>)
 800950a:	f7fe ff3f 	bl	800838c <USBD_Init>
 800950e:	4603      	mov	r3, r0
 8009510:	2b00      	cmp	r3, #0
 8009512:	d001      	beq.n	8009518 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009514:	f7f7 fcba 	bl	8000e8c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8009518:	490f      	ldr	r1, [pc, #60]	; (8009558 <MX_USB_DEVICE_Init+0x58>)
 800951a:	480e      	ldr	r0, [pc, #56]	; (8009554 <MX_USB_DEVICE_Init+0x54>)
 800951c:	f7fe ff6e 	bl	80083fc <USBD_RegisterClass>
 8009520:	4603      	mov	r3, r0
 8009522:	2b00      	cmp	r3, #0
 8009524:	d001      	beq.n	800952a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8009526:	f7f7 fcb1 	bl	8000e8c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800952a:	490c      	ldr	r1, [pc, #48]	; (800955c <MX_USB_DEVICE_Init+0x5c>)
 800952c:	4809      	ldr	r0, [pc, #36]	; (8009554 <MX_USB_DEVICE_Init+0x54>)
 800952e:	f7fe fe8f 	bl	8008250 <USBD_CDC_RegisterInterface>
 8009532:	4603      	mov	r3, r0
 8009534:	2b00      	cmp	r3, #0
 8009536:	d001      	beq.n	800953c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8009538:	f7f7 fca8 	bl	8000e8c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800953c:	4805      	ldr	r0, [pc, #20]	; (8009554 <MX_USB_DEVICE_Init+0x54>)
 800953e:	f7fe ff83 	bl	8008448 <USBD_Start>
 8009542:	4603      	mov	r3, r0
 8009544:	2b00      	cmp	r3, #0
 8009546:	d001      	beq.n	800954c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8009548:	f7f7 fca0 	bl	8000e8c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800954c:	bf00      	nop
 800954e:	bd80      	pop	{r7, pc}
 8009550:	2000012c 	.word	0x2000012c
 8009554:	20000274 	.word	0x20000274
 8009558:	20000018 	.word	0x20000018
 800955c:	2000011c 	.word	0x2000011c

08009560 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8009560:	b580      	push	{r7, lr}
 8009562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8009564:	2200      	movs	r2, #0
 8009566:	4905      	ldr	r1, [pc, #20]	; (800957c <CDC_Init_FS+0x1c>)
 8009568:	4805      	ldr	r0, [pc, #20]	; (8009580 <CDC_Init_FS+0x20>)
 800956a:	f7fe fe88 	bl	800827e <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800956e:	4905      	ldr	r1, [pc, #20]	; (8009584 <CDC_Init_FS+0x24>)
 8009570:	4803      	ldr	r0, [pc, #12]	; (8009580 <CDC_Init_FS+0x20>)
 8009572:	f7fe fe9e 	bl	80082b2 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8009576:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8009578:	4618      	mov	r0, r3
 800957a:	bd80      	pop	{r7, pc}
 800957c:	20000938 	.word	0x20000938
 8009580:	20000274 	.word	0x20000274
 8009584:	20000538 	.word	0x20000538

08009588 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8009588:	b480      	push	{r7}
 800958a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800958c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800958e:	4618      	mov	r0, r3
 8009590:	46bd      	mov	sp, r7
 8009592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009596:	4770      	bx	lr

08009598 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009598:	b480      	push	{r7}
 800959a:	b083      	sub	sp, #12
 800959c:	af00      	add	r7, sp, #0
 800959e:	4603      	mov	r3, r0
 80095a0:	6039      	str	r1, [r7, #0]
 80095a2:	71fb      	strb	r3, [r7, #7]
 80095a4:	4613      	mov	r3, r2
 80095a6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80095a8:	79fb      	ldrb	r3, [r7, #7]
 80095aa:	2b23      	cmp	r3, #35	; 0x23
 80095ac:	d84a      	bhi.n	8009644 <CDC_Control_FS+0xac>
 80095ae:	a201      	add	r2, pc, #4	; (adr r2, 80095b4 <CDC_Control_FS+0x1c>)
 80095b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095b4:	08009645 	.word	0x08009645
 80095b8:	08009645 	.word	0x08009645
 80095bc:	08009645 	.word	0x08009645
 80095c0:	08009645 	.word	0x08009645
 80095c4:	08009645 	.word	0x08009645
 80095c8:	08009645 	.word	0x08009645
 80095cc:	08009645 	.word	0x08009645
 80095d0:	08009645 	.word	0x08009645
 80095d4:	08009645 	.word	0x08009645
 80095d8:	08009645 	.word	0x08009645
 80095dc:	08009645 	.word	0x08009645
 80095e0:	08009645 	.word	0x08009645
 80095e4:	08009645 	.word	0x08009645
 80095e8:	08009645 	.word	0x08009645
 80095ec:	08009645 	.word	0x08009645
 80095f0:	08009645 	.word	0x08009645
 80095f4:	08009645 	.word	0x08009645
 80095f8:	08009645 	.word	0x08009645
 80095fc:	08009645 	.word	0x08009645
 8009600:	08009645 	.word	0x08009645
 8009604:	08009645 	.word	0x08009645
 8009608:	08009645 	.word	0x08009645
 800960c:	08009645 	.word	0x08009645
 8009610:	08009645 	.word	0x08009645
 8009614:	08009645 	.word	0x08009645
 8009618:	08009645 	.word	0x08009645
 800961c:	08009645 	.word	0x08009645
 8009620:	08009645 	.word	0x08009645
 8009624:	08009645 	.word	0x08009645
 8009628:	08009645 	.word	0x08009645
 800962c:	08009645 	.word	0x08009645
 8009630:	08009645 	.word	0x08009645
 8009634:	08009645 	.word	0x08009645
 8009638:	08009645 	.word	0x08009645
 800963c:	08009645 	.word	0x08009645
 8009640:	08009645 	.word	0x08009645
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8009644:	bf00      	nop
  }

  return (USBD_OK);
 8009646:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009648:	4618      	mov	r0, r3
 800964a:	370c      	adds	r7, #12
 800964c:	46bd      	mov	sp, r7
 800964e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009652:	4770      	bx	lr

08009654 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8009654:	b580      	push	{r7, lr}
 8009656:	b082      	sub	sp, #8
 8009658:	af00      	add	r7, sp, #0
 800965a:	6078      	str	r0, [r7, #4]
 800965c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  //CDC_Transmit_FS(Buf, *Len);
  extern void slcan_usb_rx(uint8_t* Buf, uint32_t Len);
  slcan_usb_rx(Buf, *Len);
 800965e:	683b      	ldr	r3, [r7, #0]
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	4619      	mov	r1, r3
 8009664:	6878      	ldr	r0, [r7, #4]
 8009666:	f7f7 fbd7 	bl	8000e18 <slcan_usb_rx>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800966a:	6879      	ldr	r1, [r7, #4]
 800966c:	4805      	ldr	r0, [pc, #20]	; (8009684 <CDC_Receive_FS+0x30>)
 800966e:	f7fe fe20 	bl	80082b2 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8009672:	4804      	ldr	r0, [pc, #16]	; (8009684 <CDC_Receive_FS+0x30>)
 8009674:	f7fe fe60 	bl	8008338 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8009678:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800967a:	4618      	mov	r0, r3
 800967c:	3708      	adds	r7, #8
 800967e:	46bd      	mov	sp, r7
 8009680:	bd80      	pop	{r7, pc}
 8009682:	bf00      	nop
 8009684:	20000274 	.word	0x20000274

08009688 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8009688:	b580      	push	{r7, lr}
 800968a:	b084      	sub	sp, #16
 800968c:	af00      	add	r7, sp, #0
 800968e:	6078      	str	r0, [r7, #4]
 8009690:	460b      	mov	r3, r1
 8009692:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8009694:	2300      	movs	r3, #0
 8009696:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  // SLCAN sporočila so kratka, a vseeno preveri dolžino
  if (Len > APP_TX_DATA_SIZE) {
 8009698:	887b      	ldrh	r3, [r7, #2]
 800969a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800969e:	d901      	bls.n	80096a4 <CDC_Transmit_FS+0x1c>
    return USBD_FAIL;
 80096a0:	2302      	movs	r3, #2
 80096a2:	e01f      	b.n	80096e4 <CDC_Transmit_FS+0x5c>
  }
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80096a4:	4b11      	ldr	r3, [pc, #68]	; (80096ec <CDC_Transmit_FS+0x64>)
 80096a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80096aa:	60bb      	str	r3, [r7, #8]
  if (hcdc == NULL || hcdc->TxState != 0) {
 80096ac:	68bb      	ldr	r3, [r7, #8]
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d004      	beq.n	80096bc <CDC_Transmit_FS+0x34>
 80096b2:	68bb      	ldr	r3, [r7, #8]
 80096b4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d001      	beq.n	80096c0 <CDC_Transmit_FS+0x38>
    return USBD_BUSY;
 80096bc:	2301      	movs	r3, #1
 80096be:	e011      	b.n	80096e4 <CDC_Transmit_FS+0x5c>
  }
  // Kopiraj podatke v UserTxBufferFS zaradi robustnosti
  memcpy(UserTxBufferFS, Buf, Len);
 80096c0:	887b      	ldrh	r3, [r7, #2]
 80096c2:	461a      	mov	r2, r3
 80096c4:	6879      	ldr	r1, [r7, #4]
 80096c6:	480a      	ldr	r0, [pc, #40]	; (80096f0 <CDC_Transmit_FS+0x68>)
 80096c8:	f000 fe34 	bl	800a334 <memcpy>
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, Len);
 80096cc:	887b      	ldrh	r3, [r7, #2]
 80096ce:	461a      	mov	r2, r3
 80096d0:	4907      	ldr	r1, [pc, #28]	; (80096f0 <CDC_Transmit_FS+0x68>)
 80096d2:	4806      	ldr	r0, [pc, #24]	; (80096ec <CDC_Transmit_FS+0x64>)
 80096d4:	f7fe fdd3 	bl	800827e <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80096d8:	4804      	ldr	r0, [pc, #16]	; (80096ec <CDC_Transmit_FS+0x64>)
 80096da:	f7fe fdfe 	bl	80082da <USBD_CDC_TransmitPacket>
 80096de:	4603      	mov	r3, r0
 80096e0:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80096e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80096e4:	4618      	mov	r0, r3
 80096e6:	3710      	adds	r7, #16
 80096e8:	46bd      	mov	sp, r7
 80096ea:	bd80      	pop	{r7, pc}
 80096ec:	20000274 	.word	0x20000274
 80096f0:	20000938 	.word	0x20000938

080096f4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80096f4:	b480      	push	{r7}
 80096f6:	b083      	sub	sp, #12
 80096f8:	af00      	add	r7, sp, #0
 80096fa:	4603      	mov	r3, r0
 80096fc:	6039      	str	r1, [r7, #0]
 80096fe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009700:	683b      	ldr	r3, [r7, #0]
 8009702:	2212      	movs	r2, #18
 8009704:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8009706:	4b03      	ldr	r3, [pc, #12]	; (8009714 <USBD_FS_DeviceDescriptor+0x20>)
}
 8009708:	4618      	mov	r0, r3
 800970a:	370c      	adds	r7, #12
 800970c:	46bd      	mov	sp, r7
 800970e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009712:	4770      	bx	lr
 8009714:	20000148 	.word	0x20000148

08009718 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009718:	b480      	push	{r7}
 800971a:	b083      	sub	sp, #12
 800971c:	af00      	add	r7, sp, #0
 800971e:	4603      	mov	r3, r0
 8009720:	6039      	str	r1, [r7, #0]
 8009722:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009724:	683b      	ldr	r3, [r7, #0]
 8009726:	2204      	movs	r2, #4
 8009728:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800972a:	4b03      	ldr	r3, [pc, #12]	; (8009738 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800972c:	4618      	mov	r0, r3
 800972e:	370c      	adds	r7, #12
 8009730:	46bd      	mov	sp, r7
 8009732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009736:	4770      	bx	lr
 8009738:	2000015c 	.word	0x2000015c

0800973c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800973c:	b580      	push	{r7, lr}
 800973e:	b082      	sub	sp, #8
 8009740:	af00      	add	r7, sp, #0
 8009742:	4603      	mov	r3, r0
 8009744:	6039      	str	r1, [r7, #0]
 8009746:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009748:	79fb      	ldrb	r3, [r7, #7]
 800974a:	2b00      	cmp	r3, #0
 800974c:	d105      	bne.n	800975a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800974e:	683a      	ldr	r2, [r7, #0]
 8009750:	4907      	ldr	r1, [pc, #28]	; (8009770 <USBD_FS_ProductStrDescriptor+0x34>)
 8009752:	4808      	ldr	r0, [pc, #32]	; (8009774 <USBD_FS_ProductStrDescriptor+0x38>)
 8009754:	f7ff fdf5 	bl	8009342 <USBD_GetString>
 8009758:	e004      	b.n	8009764 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800975a:	683a      	ldr	r2, [r7, #0]
 800975c:	4904      	ldr	r1, [pc, #16]	; (8009770 <USBD_FS_ProductStrDescriptor+0x34>)
 800975e:	4805      	ldr	r0, [pc, #20]	; (8009774 <USBD_FS_ProductStrDescriptor+0x38>)
 8009760:	f7ff fdef 	bl	8009342 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009764:	4b02      	ldr	r3, [pc, #8]	; (8009770 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8009766:	4618      	mov	r0, r3
 8009768:	3708      	adds	r7, #8
 800976a:	46bd      	mov	sp, r7
 800976c:	bd80      	pop	{r7, pc}
 800976e:	bf00      	nop
 8009770:	20000d38 	.word	0x20000d38
 8009774:	0800b2dc 	.word	0x0800b2dc

08009778 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009778:	b580      	push	{r7, lr}
 800977a:	b082      	sub	sp, #8
 800977c:	af00      	add	r7, sp, #0
 800977e:	4603      	mov	r3, r0
 8009780:	6039      	str	r1, [r7, #0]
 8009782:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009784:	683a      	ldr	r2, [r7, #0]
 8009786:	4904      	ldr	r1, [pc, #16]	; (8009798 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009788:	4804      	ldr	r0, [pc, #16]	; (800979c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800978a:	f7ff fdda 	bl	8009342 <USBD_GetString>
  return USBD_StrDesc;
 800978e:	4b02      	ldr	r3, [pc, #8]	; (8009798 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009790:	4618      	mov	r0, r3
 8009792:	3708      	adds	r7, #8
 8009794:	46bd      	mov	sp, r7
 8009796:	bd80      	pop	{r7, pc}
 8009798:	20000d38 	.word	0x20000d38
 800979c:	0800b2e4 	.word	0x0800b2e4

080097a0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80097a0:	b580      	push	{r7, lr}
 80097a2:	b082      	sub	sp, #8
 80097a4:	af00      	add	r7, sp, #0
 80097a6:	4603      	mov	r3, r0
 80097a8:	6039      	str	r1, [r7, #0]
 80097aa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80097ac:	683b      	ldr	r3, [r7, #0]
 80097ae:	221a      	movs	r2, #26
 80097b0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80097b2:	f000 f843 	bl	800983c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80097b6:	4b02      	ldr	r3, [pc, #8]	; (80097c0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80097b8:	4618      	mov	r0, r3
 80097ba:	3708      	adds	r7, #8
 80097bc:	46bd      	mov	sp, r7
 80097be:	bd80      	pop	{r7, pc}
 80097c0:	20000160 	.word	0x20000160

080097c4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80097c4:	b580      	push	{r7, lr}
 80097c6:	b082      	sub	sp, #8
 80097c8:	af00      	add	r7, sp, #0
 80097ca:	4603      	mov	r3, r0
 80097cc:	6039      	str	r1, [r7, #0]
 80097ce:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80097d0:	79fb      	ldrb	r3, [r7, #7]
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	d105      	bne.n	80097e2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80097d6:	683a      	ldr	r2, [r7, #0]
 80097d8:	4907      	ldr	r1, [pc, #28]	; (80097f8 <USBD_FS_ConfigStrDescriptor+0x34>)
 80097da:	4808      	ldr	r0, [pc, #32]	; (80097fc <USBD_FS_ConfigStrDescriptor+0x38>)
 80097dc:	f7ff fdb1 	bl	8009342 <USBD_GetString>
 80097e0:	e004      	b.n	80097ec <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80097e2:	683a      	ldr	r2, [r7, #0]
 80097e4:	4904      	ldr	r1, [pc, #16]	; (80097f8 <USBD_FS_ConfigStrDescriptor+0x34>)
 80097e6:	4805      	ldr	r0, [pc, #20]	; (80097fc <USBD_FS_ConfigStrDescriptor+0x38>)
 80097e8:	f7ff fdab 	bl	8009342 <USBD_GetString>
  }
  return USBD_StrDesc;
 80097ec:	4b02      	ldr	r3, [pc, #8]	; (80097f8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80097ee:	4618      	mov	r0, r3
 80097f0:	3708      	adds	r7, #8
 80097f2:	46bd      	mov	sp, r7
 80097f4:	bd80      	pop	{r7, pc}
 80097f6:	bf00      	nop
 80097f8:	20000d38 	.word	0x20000d38
 80097fc:	0800b2f8 	.word	0x0800b2f8

08009800 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009800:	b580      	push	{r7, lr}
 8009802:	b082      	sub	sp, #8
 8009804:	af00      	add	r7, sp, #0
 8009806:	4603      	mov	r3, r0
 8009808:	6039      	str	r1, [r7, #0]
 800980a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800980c:	79fb      	ldrb	r3, [r7, #7]
 800980e:	2b00      	cmp	r3, #0
 8009810:	d105      	bne.n	800981e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009812:	683a      	ldr	r2, [r7, #0]
 8009814:	4907      	ldr	r1, [pc, #28]	; (8009834 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009816:	4808      	ldr	r0, [pc, #32]	; (8009838 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009818:	f7ff fd93 	bl	8009342 <USBD_GetString>
 800981c:	e004      	b.n	8009828 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800981e:	683a      	ldr	r2, [r7, #0]
 8009820:	4904      	ldr	r1, [pc, #16]	; (8009834 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009822:	4805      	ldr	r0, [pc, #20]	; (8009838 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009824:	f7ff fd8d 	bl	8009342 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009828:	4b02      	ldr	r3, [pc, #8]	; (8009834 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800982a:	4618      	mov	r0, r3
 800982c:	3708      	adds	r7, #8
 800982e:	46bd      	mov	sp, r7
 8009830:	bd80      	pop	{r7, pc}
 8009832:	bf00      	nop
 8009834:	20000d38 	.word	0x20000d38
 8009838:	0800b304 	.word	0x0800b304

0800983c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800983c:	b580      	push	{r7, lr}
 800983e:	b084      	sub	sp, #16
 8009840:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009842:	4b0f      	ldr	r3, [pc, #60]	; (8009880 <Get_SerialNum+0x44>)
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009848:	4b0e      	ldr	r3, [pc, #56]	; (8009884 <Get_SerialNum+0x48>)
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800984e:	4b0e      	ldr	r3, [pc, #56]	; (8009888 <Get_SerialNum+0x4c>)
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009854:	68fa      	ldr	r2, [r7, #12]
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	4413      	add	r3, r2
 800985a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	2b00      	cmp	r3, #0
 8009860:	d009      	beq.n	8009876 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009862:	2208      	movs	r2, #8
 8009864:	4909      	ldr	r1, [pc, #36]	; (800988c <Get_SerialNum+0x50>)
 8009866:	68f8      	ldr	r0, [r7, #12]
 8009868:	f000 f814 	bl	8009894 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800986c:	2204      	movs	r2, #4
 800986e:	4908      	ldr	r1, [pc, #32]	; (8009890 <Get_SerialNum+0x54>)
 8009870:	68b8      	ldr	r0, [r7, #8]
 8009872:	f000 f80f 	bl	8009894 <IntToUnicode>
  }
}
 8009876:	bf00      	nop
 8009878:	3710      	adds	r7, #16
 800987a:	46bd      	mov	sp, r7
 800987c:	bd80      	pop	{r7, pc}
 800987e:	bf00      	nop
 8009880:	1ffff7ac 	.word	0x1ffff7ac
 8009884:	1ffff7b0 	.word	0x1ffff7b0
 8009888:	1ffff7b4 	.word	0x1ffff7b4
 800988c:	20000162 	.word	0x20000162
 8009890:	20000172 	.word	0x20000172

08009894 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009894:	b480      	push	{r7}
 8009896:	b087      	sub	sp, #28
 8009898:	af00      	add	r7, sp, #0
 800989a:	60f8      	str	r0, [r7, #12]
 800989c:	60b9      	str	r1, [r7, #8]
 800989e:	4613      	mov	r3, r2
 80098a0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80098a2:	2300      	movs	r3, #0
 80098a4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80098a6:	2300      	movs	r3, #0
 80098a8:	75fb      	strb	r3, [r7, #23]
 80098aa:	e027      	b.n	80098fc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	0f1b      	lsrs	r3, r3, #28
 80098b0:	2b09      	cmp	r3, #9
 80098b2:	d80b      	bhi.n	80098cc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	0f1b      	lsrs	r3, r3, #28
 80098b8:	b2da      	uxtb	r2, r3
 80098ba:	7dfb      	ldrb	r3, [r7, #23]
 80098bc:	005b      	lsls	r3, r3, #1
 80098be:	4619      	mov	r1, r3
 80098c0:	68bb      	ldr	r3, [r7, #8]
 80098c2:	440b      	add	r3, r1
 80098c4:	3230      	adds	r2, #48	; 0x30
 80098c6:	b2d2      	uxtb	r2, r2
 80098c8:	701a      	strb	r2, [r3, #0]
 80098ca:	e00a      	b.n	80098e2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	0f1b      	lsrs	r3, r3, #28
 80098d0:	b2da      	uxtb	r2, r3
 80098d2:	7dfb      	ldrb	r3, [r7, #23]
 80098d4:	005b      	lsls	r3, r3, #1
 80098d6:	4619      	mov	r1, r3
 80098d8:	68bb      	ldr	r3, [r7, #8]
 80098da:	440b      	add	r3, r1
 80098dc:	3237      	adds	r2, #55	; 0x37
 80098de:	b2d2      	uxtb	r2, r2
 80098e0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	011b      	lsls	r3, r3, #4
 80098e6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80098e8:	7dfb      	ldrb	r3, [r7, #23]
 80098ea:	005b      	lsls	r3, r3, #1
 80098ec:	3301      	adds	r3, #1
 80098ee:	68ba      	ldr	r2, [r7, #8]
 80098f0:	4413      	add	r3, r2
 80098f2:	2200      	movs	r2, #0
 80098f4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80098f6:	7dfb      	ldrb	r3, [r7, #23]
 80098f8:	3301      	adds	r3, #1
 80098fa:	75fb      	strb	r3, [r7, #23]
 80098fc:	7dfa      	ldrb	r2, [r7, #23]
 80098fe:	79fb      	ldrb	r3, [r7, #7]
 8009900:	429a      	cmp	r2, r3
 8009902:	d3d3      	bcc.n	80098ac <IntToUnicode+0x18>
  }
}
 8009904:	bf00      	nop
 8009906:	bf00      	nop
 8009908:	371c      	adds	r7, #28
 800990a:	46bd      	mov	sp, r7
 800990c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009910:	4770      	bx	lr
	...

08009914 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009914:	b580      	push	{r7, lr}
 8009916:	b08a      	sub	sp, #40	; 0x28
 8009918:	af00      	add	r7, sp, #0
 800991a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800991c:	f107 0314 	add.w	r3, r7, #20
 8009920:	2200      	movs	r2, #0
 8009922:	601a      	str	r2, [r3, #0]
 8009924:	605a      	str	r2, [r3, #4]
 8009926:	609a      	str	r2, [r3, #8]
 8009928:	60da      	str	r2, [r3, #12]
 800992a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB)
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	4a1f      	ldr	r2, [pc, #124]	; (80099b0 <HAL_PCD_MspInit+0x9c>)
 8009932:	4293      	cmp	r3, r2
 8009934:	d137      	bne.n	80099a6 <HAL_PCD_MspInit+0x92>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009936:	4b1f      	ldr	r3, [pc, #124]	; (80099b4 <HAL_PCD_MspInit+0xa0>)
 8009938:	695b      	ldr	r3, [r3, #20]
 800993a:	4a1e      	ldr	r2, [pc, #120]	; (80099b4 <HAL_PCD_MspInit+0xa0>)
 800993c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009940:	6153      	str	r3, [r2, #20]
 8009942:	4b1c      	ldr	r3, [pc, #112]	; (80099b4 <HAL_PCD_MspInit+0xa0>)
 8009944:	695b      	ldr	r3, [r3, #20]
 8009946:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800994a:	613b      	str	r3, [r7, #16]
 800994c:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = USB__Pin|USB_A12_Pin;
 800994e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8009952:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009954:	2302      	movs	r3, #2
 8009956:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009958:	2300      	movs	r3, #0
 800995a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800995c:	2303      	movs	r3, #3
 800995e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 8009960:	230e      	movs	r3, #14
 8009962:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009964:	f107 0314 	add.w	r3, r7, #20
 8009968:	4619      	mov	r1, r3
 800996a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800996e:	f7f8 fca1 	bl	80022b4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8009972:	4b10      	ldr	r3, [pc, #64]	; (80099b4 <HAL_PCD_MspInit+0xa0>)
 8009974:	69db      	ldr	r3, [r3, #28]
 8009976:	4a0f      	ldr	r2, [pc, #60]	; (80099b4 <HAL_PCD_MspInit+0xa0>)
 8009978:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800997c:	61d3      	str	r3, [r2, #28]
 800997e:	4b0d      	ldr	r3, [pc, #52]	; (80099b4 <HAL_PCD_MspInit+0xa0>)
 8009980:	69db      	ldr	r3, [r3, #28]
 8009982:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009986:	60fb      	str	r3, [r7, #12]
 8009988:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    __HAL_REMAPINTERRUPT_USB_ENABLE();
 800998a:	4b0b      	ldr	r3, [pc, #44]	; (80099b8 <HAL_PCD_MspInit+0xa4>)
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	4a0a      	ldr	r2, [pc, #40]	; (80099b8 <HAL_PCD_MspInit+0xa4>)
 8009990:	f043 0320 	orr.w	r3, r3, #32
 8009994:	6013      	str	r3, [r2, #0]
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 8009996:	2200      	movs	r2, #0
 8009998:	2100      	movs	r1, #0
 800999a:	204b      	movs	r0, #75	; 0x4b
 800999c:	f7f8 fc53 	bl	8002246 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 80099a0:	204b      	movs	r0, #75	; 0x4b
 80099a2:	f7f8 fc6c 	bl	800227e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80099a6:	bf00      	nop
 80099a8:	3728      	adds	r7, #40	; 0x28
 80099aa:	46bd      	mov	sp, r7
 80099ac:	bd80      	pop	{r7, pc}
 80099ae:	bf00      	nop
 80099b0:	40005c00 	.word	0x40005c00
 80099b4:	40021000 	.word	0x40021000
 80099b8:	40010000 	.word	0x40010000

080099bc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80099bc:	b580      	push	{r7, lr}
 80099be:	b082      	sub	sp, #8
 80099c0:	af00      	add	r7, sp, #0
 80099c2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	f8d3 22d0 	ldr.w	r2, [r3, #720]	; 0x2d0
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	f503 7326 	add.w	r3, r3, #664	; 0x298
 80099d0:	4619      	mov	r1, r3
 80099d2:	4610      	mov	r0, r2
 80099d4:	f7fe fd81 	bl	80084da <USBD_LL_SetupStage>
}
 80099d8:	bf00      	nop
 80099da:	3708      	adds	r7, #8
 80099dc:	46bd      	mov	sp, r7
 80099de:	bd80      	pop	{r7, pc}

080099e0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80099e0:	b580      	push	{r7, lr}
 80099e2:	b082      	sub	sp, #8
 80099e4:	af00      	add	r7, sp, #0
 80099e6:	6078      	str	r0, [r7, #4]
 80099e8:	460b      	mov	r3, r1
 80099ea:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	f8d3 02d0 	ldr.w	r0, [r3, #720]	; 0x2d0
 80099f2:	78fa      	ldrb	r2, [r7, #3]
 80099f4:	6879      	ldr	r1, [r7, #4]
 80099f6:	4613      	mov	r3, r2
 80099f8:	009b      	lsls	r3, r3, #2
 80099fa:	4413      	add	r3, r2
 80099fc:	00db      	lsls	r3, r3, #3
 80099fe:	440b      	add	r3, r1
 8009a00:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009a04:	681a      	ldr	r2, [r3, #0]
 8009a06:	78fb      	ldrb	r3, [r7, #3]
 8009a08:	4619      	mov	r1, r3
 8009a0a:	f7fe fdb3 	bl	8008574 <USBD_LL_DataOutStage>
}
 8009a0e:	bf00      	nop
 8009a10:	3708      	adds	r7, #8
 8009a12:	46bd      	mov	sp, r7
 8009a14:	bd80      	pop	{r7, pc}

08009a16 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009a16:	b580      	push	{r7, lr}
 8009a18:	b082      	sub	sp, #8
 8009a1a:	af00      	add	r7, sp, #0
 8009a1c:	6078      	str	r0, [r7, #4]
 8009a1e:	460b      	mov	r3, r1
 8009a20:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	f8d3 02d0 	ldr.w	r0, [r3, #720]	; 0x2d0
 8009a28:	78fa      	ldrb	r2, [r7, #3]
 8009a2a:	6879      	ldr	r1, [r7, #4]
 8009a2c:	4613      	mov	r3, r2
 8009a2e:	009b      	lsls	r3, r3, #2
 8009a30:	4413      	add	r3, r2
 8009a32:	00db      	lsls	r3, r3, #3
 8009a34:	440b      	add	r3, r1
 8009a36:	3324      	adds	r3, #36	; 0x24
 8009a38:	681a      	ldr	r2, [r3, #0]
 8009a3a:	78fb      	ldrb	r3, [r7, #3]
 8009a3c:	4619      	mov	r1, r3
 8009a3e:	f7fe fe0a 	bl	8008656 <USBD_LL_DataInStage>
}
 8009a42:	bf00      	nop
 8009a44:	3708      	adds	r7, #8
 8009a46:	46bd      	mov	sp, r7
 8009a48:	bd80      	pop	{r7, pc}

08009a4a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009a4a:	b580      	push	{r7, lr}
 8009a4c:	b082      	sub	sp, #8
 8009a4e:	af00      	add	r7, sp, #0
 8009a50:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	f8d3 32d0 	ldr.w	r3, [r3, #720]	; 0x2d0
 8009a58:	4618      	mov	r0, r3
 8009a5a:	f7fe ff1d 	bl	8008898 <USBD_LL_SOF>
}
 8009a5e:	bf00      	nop
 8009a60:	3708      	adds	r7, #8
 8009a62:	46bd      	mov	sp, r7
 8009a64:	bd80      	pop	{r7, pc}

08009a66 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009a66:	b580      	push	{r7, lr}
 8009a68:	b084      	sub	sp, #16
 8009a6a:	af00      	add	r7, sp, #0
 8009a6c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009a6e:	2301      	movs	r3, #1
 8009a70:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	795b      	ldrb	r3, [r3, #5]
 8009a76:	2b02      	cmp	r3, #2
 8009a78:	d001      	beq.n	8009a7e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8009a7a:	f7f7 fa07 	bl	8000e8c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	f8d3 32d0 	ldr.w	r3, [r3, #720]	; 0x2d0
 8009a84:	7bfa      	ldrb	r2, [r7, #15]
 8009a86:	4611      	mov	r1, r2
 8009a88:	4618      	mov	r0, r3
 8009a8a:	f7fe feca 	bl	8008822 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	f8d3 32d0 	ldr.w	r3, [r3, #720]	; 0x2d0
 8009a94:	4618      	mov	r0, r3
 8009a96:	f7fe fe83 	bl	80087a0 <USBD_LL_Reset>
}
 8009a9a:	bf00      	nop
 8009a9c:	3710      	adds	r7, #16
 8009a9e:	46bd      	mov	sp, r7
 8009aa0:	bd80      	pop	{r7, pc}
	...

08009aa4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009aa4:	b580      	push	{r7, lr}
 8009aa6:	b082      	sub	sp, #8
 8009aa8:	af00      	add	r7, sp, #0
 8009aaa:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	f8d3 32d0 	ldr.w	r3, [r3, #720]	; 0x2d0
 8009ab2:	4618      	mov	r0, r3
 8009ab4:	f7fe fec5 	bl	8008842 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	7a5b      	ldrb	r3, [r3, #9]
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	d005      	beq.n	8009acc <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009ac0:	4b04      	ldr	r3, [pc, #16]	; (8009ad4 <HAL_PCD_SuspendCallback+0x30>)
 8009ac2:	691b      	ldr	r3, [r3, #16]
 8009ac4:	4a03      	ldr	r2, [pc, #12]	; (8009ad4 <HAL_PCD_SuspendCallback+0x30>)
 8009ac6:	f043 0306 	orr.w	r3, r3, #6
 8009aca:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009acc:	bf00      	nop
 8009ace:	3708      	adds	r7, #8
 8009ad0:	46bd      	mov	sp, r7
 8009ad2:	bd80      	pop	{r7, pc}
 8009ad4:	e000ed00 	.word	0xe000ed00

08009ad8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009ad8:	b580      	push	{r7, lr}
 8009ada:	b082      	sub	sp, #8
 8009adc:	af00      	add	r7, sp, #0
 8009ade:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	f8d3 32d0 	ldr.w	r3, [r3, #720]	; 0x2d0
 8009ae6:	4618      	mov	r0, r3
 8009ae8:	f7fe fec0 	bl	800886c <USBD_LL_Resume>
}
 8009aec:	bf00      	nop
 8009aee:	3708      	adds	r7, #8
 8009af0:	46bd      	mov	sp, r7
 8009af2:	bd80      	pop	{r7, pc}

08009af4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009af4:	b580      	push	{r7, lr}
 8009af6:	b082      	sub	sp, #8
 8009af8:	af00      	add	r7, sp, #0
 8009afa:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8009afc:	4a28      	ldr	r2, [pc, #160]	; (8009ba0 <USBD_LL_Init+0xac>)
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	f8c2 32d0 	str.w	r3, [r2, #720]	; 0x2d0
  pdev->pData = &hpcd_USB_FS;
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	4a26      	ldr	r2, [pc, #152]	; (8009ba0 <USBD_LL_Init+0xac>)
 8009b08:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 8009b0c:	4b24      	ldr	r3, [pc, #144]	; (8009ba0 <USBD_LL_Init+0xac>)
 8009b0e:	4a25      	ldr	r2, [pc, #148]	; (8009ba4 <USBD_LL_Init+0xb0>)
 8009b10:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8009b12:	4b23      	ldr	r3, [pc, #140]	; (8009ba0 <USBD_LL_Init+0xac>)
 8009b14:	2208      	movs	r2, #8
 8009b16:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8009b18:	4b21      	ldr	r3, [pc, #132]	; (8009ba0 <USBD_LL_Init+0xac>)
 8009b1a:	2202      	movs	r2, #2
 8009b1c:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8009b1e:	4b20      	ldr	r3, [pc, #128]	; (8009ba0 <USBD_LL_Init+0xac>)
 8009b20:	2202      	movs	r2, #2
 8009b22:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8009b24:	4b1e      	ldr	r3, [pc, #120]	; (8009ba0 <USBD_LL_Init+0xac>)
 8009b26:	2200      	movs	r2, #0
 8009b28:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8009b2a:	4b1d      	ldr	r3, [pc, #116]	; (8009ba0 <USBD_LL_Init+0xac>)
 8009b2c:	2200      	movs	r2, #0
 8009b2e:	72da      	strb	r2, [r3, #11]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8009b30:	481b      	ldr	r0, [pc, #108]	; (8009ba0 <USBD_LL_Init+0xac>)
 8009b32:	f7f8 fd51 	bl	80025d8 <HAL_PCD_Init>
 8009b36:	4603      	mov	r3, r0
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	d001      	beq.n	8009b40 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8009b3c:	f7f7 f9a6 	bl	8000e8c <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009b46:	2318      	movs	r3, #24
 8009b48:	2200      	movs	r2, #0
 8009b4a:	2100      	movs	r1, #0
 8009b4c:	f7fa f9cb 	bl	8003ee6 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009b56:	2358      	movs	r3, #88	; 0x58
 8009b58:	2200      	movs	r2, #0
 8009b5a:	2180      	movs	r1, #128	; 0x80
 8009b5c:	f7fa f9c3 	bl	8003ee6 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009b66:	23c0      	movs	r3, #192	; 0xc0
 8009b68:	2200      	movs	r2, #0
 8009b6a:	2181      	movs	r1, #129	; 0x81
 8009b6c:	f7fa f9bb 	bl	8003ee6 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009b76:	f44f 7388 	mov.w	r3, #272	; 0x110
 8009b7a:	2200      	movs	r2, #0
 8009b7c:	2101      	movs	r1, #1
 8009b7e:	f7fa f9b2 	bl	8003ee6 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009b88:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009b8c:	2200      	movs	r2, #0
 8009b8e:	2182      	movs	r1, #130	; 0x82
 8009b90:	f7fa f9a9 	bl	8003ee6 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8009b94:	2300      	movs	r3, #0
}
 8009b96:	4618      	mov	r0, r3
 8009b98:	3708      	adds	r7, #8
 8009b9a:	46bd      	mov	sp, r7
 8009b9c:	bd80      	pop	{r7, pc}
 8009b9e:	bf00      	nop
 8009ba0:	20000f38 	.word	0x20000f38
 8009ba4:	40005c00 	.word	0x40005c00

08009ba8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009ba8:	b580      	push	{r7, lr}
 8009baa:	b084      	sub	sp, #16
 8009bac:	af00      	add	r7, sp, #0
 8009bae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009bb0:	2300      	movs	r3, #0
 8009bb2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009bb4:	2300      	movs	r3, #0
 8009bb6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009bbe:	4618      	mov	r0, r3
 8009bc0:	f7f8 fdd1 	bl	8002766 <HAL_PCD_Start>
 8009bc4:	4603      	mov	r3, r0
 8009bc6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009bc8:	7bfb      	ldrb	r3, [r7, #15]
 8009bca:	4618      	mov	r0, r3
 8009bcc:	f000 f952 	bl	8009e74 <USBD_Get_USB_Status>
 8009bd0:	4603      	mov	r3, r0
 8009bd2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009bd4:	7bbb      	ldrb	r3, [r7, #14]
}
 8009bd6:	4618      	mov	r0, r3
 8009bd8:	3710      	adds	r7, #16
 8009bda:	46bd      	mov	sp, r7
 8009bdc:	bd80      	pop	{r7, pc}

08009bde <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009bde:	b580      	push	{r7, lr}
 8009be0:	b084      	sub	sp, #16
 8009be2:	af00      	add	r7, sp, #0
 8009be4:	6078      	str	r0, [r7, #4]
 8009be6:	4608      	mov	r0, r1
 8009be8:	4611      	mov	r1, r2
 8009bea:	461a      	mov	r2, r3
 8009bec:	4603      	mov	r3, r0
 8009bee:	70fb      	strb	r3, [r7, #3]
 8009bf0:	460b      	mov	r3, r1
 8009bf2:	70bb      	strb	r3, [r7, #2]
 8009bf4:	4613      	mov	r3, r2
 8009bf6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009bf8:	2300      	movs	r3, #0
 8009bfa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009bfc:	2300      	movs	r3, #0
 8009bfe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009c06:	78bb      	ldrb	r3, [r7, #2]
 8009c08:	883a      	ldrh	r2, [r7, #0]
 8009c0a:	78f9      	ldrb	r1, [r7, #3]
 8009c0c:	f7f8 fec9 	bl	80029a2 <HAL_PCD_EP_Open>
 8009c10:	4603      	mov	r3, r0
 8009c12:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009c14:	7bfb      	ldrb	r3, [r7, #15]
 8009c16:	4618      	mov	r0, r3
 8009c18:	f000 f92c 	bl	8009e74 <USBD_Get_USB_Status>
 8009c1c:	4603      	mov	r3, r0
 8009c1e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009c20:	7bbb      	ldrb	r3, [r7, #14]
}
 8009c22:	4618      	mov	r0, r3
 8009c24:	3710      	adds	r7, #16
 8009c26:	46bd      	mov	sp, r7
 8009c28:	bd80      	pop	{r7, pc}

08009c2a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009c2a:	b580      	push	{r7, lr}
 8009c2c:	b084      	sub	sp, #16
 8009c2e:	af00      	add	r7, sp, #0
 8009c30:	6078      	str	r0, [r7, #4]
 8009c32:	460b      	mov	r3, r1
 8009c34:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009c36:	2300      	movs	r3, #0
 8009c38:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009c3a:	2300      	movs	r3, #0
 8009c3c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009c44:	78fa      	ldrb	r2, [r7, #3]
 8009c46:	4611      	mov	r1, r2
 8009c48:	4618      	mov	r0, r3
 8009c4a:	f7f8 ff07 	bl	8002a5c <HAL_PCD_EP_Close>
 8009c4e:	4603      	mov	r3, r0
 8009c50:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009c52:	7bfb      	ldrb	r3, [r7, #15]
 8009c54:	4618      	mov	r0, r3
 8009c56:	f000 f90d 	bl	8009e74 <USBD_Get_USB_Status>
 8009c5a:	4603      	mov	r3, r0
 8009c5c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009c5e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009c60:	4618      	mov	r0, r3
 8009c62:	3710      	adds	r7, #16
 8009c64:	46bd      	mov	sp, r7
 8009c66:	bd80      	pop	{r7, pc}

08009c68 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009c68:	b580      	push	{r7, lr}
 8009c6a:	b084      	sub	sp, #16
 8009c6c:	af00      	add	r7, sp, #0
 8009c6e:	6078      	str	r0, [r7, #4]
 8009c70:	460b      	mov	r3, r1
 8009c72:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009c74:	2300      	movs	r3, #0
 8009c76:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009c78:	2300      	movs	r3, #0
 8009c7a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009c82:	78fa      	ldrb	r2, [r7, #3]
 8009c84:	4611      	mov	r1, r2
 8009c86:	4618      	mov	r0, r3
 8009c88:	f7f8 ffb0 	bl	8002bec <HAL_PCD_EP_SetStall>
 8009c8c:	4603      	mov	r3, r0
 8009c8e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009c90:	7bfb      	ldrb	r3, [r7, #15]
 8009c92:	4618      	mov	r0, r3
 8009c94:	f000 f8ee 	bl	8009e74 <USBD_Get_USB_Status>
 8009c98:	4603      	mov	r3, r0
 8009c9a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009c9c:	7bbb      	ldrb	r3, [r7, #14]
}
 8009c9e:	4618      	mov	r0, r3
 8009ca0:	3710      	adds	r7, #16
 8009ca2:	46bd      	mov	sp, r7
 8009ca4:	bd80      	pop	{r7, pc}

08009ca6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009ca6:	b580      	push	{r7, lr}
 8009ca8:	b084      	sub	sp, #16
 8009caa:	af00      	add	r7, sp, #0
 8009cac:	6078      	str	r0, [r7, #4]
 8009cae:	460b      	mov	r3, r1
 8009cb0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009cb2:	2300      	movs	r3, #0
 8009cb4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009cb6:	2300      	movs	r3, #0
 8009cb8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009cc0:	78fa      	ldrb	r2, [r7, #3]
 8009cc2:	4611      	mov	r1, r2
 8009cc4:	4618      	mov	r0, r3
 8009cc6:	f7f8 ffe3 	bl	8002c90 <HAL_PCD_EP_ClrStall>
 8009cca:	4603      	mov	r3, r0
 8009ccc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009cce:	7bfb      	ldrb	r3, [r7, #15]
 8009cd0:	4618      	mov	r0, r3
 8009cd2:	f000 f8cf 	bl	8009e74 <USBD_Get_USB_Status>
 8009cd6:	4603      	mov	r3, r0
 8009cd8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009cda:	7bbb      	ldrb	r3, [r7, #14]
}
 8009cdc:	4618      	mov	r0, r3
 8009cde:	3710      	adds	r7, #16
 8009ce0:	46bd      	mov	sp, r7
 8009ce2:	bd80      	pop	{r7, pc}

08009ce4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009ce4:	b480      	push	{r7}
 8009ce6:	b085      	sub	sp, #20
 8009ce8:	af00      	add	r7, sp, #0
 8009cea:	6078      	str	r0, [r7, #4]
 8009cec:	460b      	mov	r3, r1
 8009cee:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009cf6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009cf8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	da0b      	bge.n	8009d18 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009d00:	78fb      	ldrb	r3, [r7, #3]
 8009d02:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009d06:	68f9      	ldr	r1, [r7, #12]
 8009d08:	4613      	mov	r3, r2
 8009d0a:	009b      	lsls	r3, r3, #2
 8009d0c:	4413      	add	r3, r2
 8009d0e:	00db      	lsls	r3, r3, #3
 8009d10:	440b      	add	r3, r1
 8009d12:	3312      	adds	r3, #18
 8009d14:	781b      	ldrb	r3, [r3, #0]
 8009d16:	e00b      	b.n	8009d30 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009d18:	78fb      	ldrb	r3, [r7, #3]
 8009d1a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009d1e:	68f9      	ldr	r1, [r7, #12]
 8009d20:	4613      	mov	r3, r2
 8009d22:	009b      	lsls	r3, r3, #2
 8009d24:	4413      	add	r3, r2
 8009d26:	00db      	lsls	r3, r3, #3
 8009d28:	440b      	add	r3, r1
 8009d2a:	f503 73a9 	add.w	r3, r3, #338	; 0x152
 8009d2e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009d30:	4618      	mov	r0, r3
 8009d32:	3714      	adds	r7, #20
 8009d34:	46bd      	mov	sp, r7
 8009d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d3a:	4770      	bx	lr

08009d3c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009d3c:	b580      	push	{r7, lr}
 8009d3e:	b084      	sub	sp, #16
 8009d40:	af00      	add	r7, sp, #0
 8009d42:	6078      	str	r0, [r7, #4]
 8009d44:	460b      	mov	r3, r1
 8009d46:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009d48:	2300      	movs	r3, #0
 8009d4a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009d4c:	2300      	movs	r3, #0
 8009d4e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009d56:	78fa      	ldrb	r2, [r7, #3]
 8009d58:	4611      	mov	r1, r2
 8009d5a:	4618      	mov	r0, r3
 8009d5c:	f7f8 fdfd 	bl	800295a <HAL_PCD_SetAddress>
 8009d60:	4603      	mov	r3, r0
 8009d62:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009d64:	7bfb      	ldrb	r3, [r7, #15]
 8009d66:	4618      	mov	r0, r3
 8009d68:	f000 f884 	bl	8009e74 <USBD_Get_USB_Status>
 8009d6c:	4603      	mov	r3, r0
 8009d6e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009d70:	7bbb      	ldrb	r3, [r7, #14]
}
 8009d72:	4618      	mov	r0, r3
 8009d74:	3710      	adds	r7, #16
 8009d76:	46bd      	mov	sp, r7
 8009d78:	bd80      	pop	{r7, pc}

08009d7a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8009d7a:	b580      	push	{r7, lr}
 8009d7c:	b086      	sub	sp, #24
 8009d7e:	af00      	add	r7, sp, #0
 8009d80:	60f8      	str	r0, [r7, #12]
 8009d82:	607a      	str	r2, [r7, #4]
 8009d84:	461a      	mov	r2, r3
 8009d86:	460b      	mov	r3, r1
 8009d88:	72fb      	strb	r3, [r7, #11]
 8009d8a:	4613      	mov	r3, r2
 8009d8c:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009d8e:	2300      	movs	r3, #0
 8009d90:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009d92:	2300      	movs	r3, #0
 8009d94:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009d96:	68fb      	ldr	r3, [r7, #12]
 8009d98:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009d9c:	893b      	ldrh	r3, [r7, #8]
 8009d9e:	7af9      	ldrb	r1, [r7, #11]
 8009da0:	687a      	ldr	r2, [r7, #4]
 8009da2:	f7f8 feec 	bl	8002b7e <HAL_PCD_EP_Transmit>
 8009da6:	4603      	mov	r3, r0
 8009da8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009daa:	7dfb      	ldrb	r3, [r7, #23]
 8009dac:	4618      	mov	r0, r3
 8009dae:	f000 f861 	bl	8009e74 <USBD_Get_USB_Status>
 8009db2:	4603      	mov	r3, r0
 8009db4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009db6:	7dbb      	ldrb	r3, [r7, #22]
}
 8009db8:	4618      	mov	r0, r3
 8009dba:	3718      	adds	r7, #24
 8009dbc:	46bd      	mov	sp, r7
 8009dbe:	bd80      	pop	{r7, pc}

08009dc0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8009dc0:	b580      	push	{r7, lr}
 8009dc2:	b086      	sub	sp, #24
 8009dc4:	af00      	add	r7, sp, #0
 8009dc6:	60f8      	str	r0, [r7, #12]
 8009dc8:	607a      	str	r2, [r7, #4]
 8009dca:	461a      	mov	r2, r3
 8009dcc:	460b      	mov	r3, r1
 8009dce:	72fb      	strb	r3, [r7, #11]
 8009dd0:	4613      	mov	r3, r2
 8009dd2:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009dd4:	2300      	movs	r3, #0
 8009dd6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009dd8:	2300      	movs	r3, #0
 8009dda:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009ddc:	68fb      	ldr	r3, [r7, #12]
 8009dde:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009de2:	893b      	ldrh	r3, [r7, #8]
 8009de4:	7af9      	ldrb	r1, [r7, #11]
 8009de6:	687a      	ldr	r2, [r7, #4]
 8009de8:	f7f8 fe80 	bl	8002aec <HAL_PCD_EP_Receive>
 8009dec:	4603      	mov	r3, r0
 8009dee:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009df0:	7dfb      	ldrb	r3, [r7, #23]
 8009df2:	4618      	mov	r0, r3
 8009df4:	f000 f83e 	bl	8009e74 <USBD_Get_USB_Status>
 8009df8:	4603      	mov	r3, r0
 8009dfa:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009dfc:	7dbb      	ldrb	r3, [r7, #22]
}
 8009dfe:	4618      	mov	r0, r3
 8009e00:	3718      	adds	r7, #24
 8009e02:	46bd      	mov	sp, r7
 8009e04:	bd80      	pop	{r7, pc}

08009e06 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009e06:	b580      	push	{r7, lr}
 8009e08:	b082      	sub	sp, #8
 8009e0a:	af00      	add	r7, sp, #0
 8009e0c:	6078      	str	r0, [r7, #4]
 8009e0e:	460b      	mov	r3, r1
 8009e10:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009e18:	78fa      	ldrb	r2, [r7, #3]
 8009e1a:	4611      	mov	r1, r2
 8009e1c:	4618      	mov	r0, r3
 8009e1e:	f7f8 fe96 	bl	8002b4e <HAL_PCD_EP_GetRxCount>
 8009e22:	4603      	mov	r3, r0
}
 8009e24:	4618      	mov	r0, r3
 8009e26:	3708      	adds	r7, #8
 8009e28:	46bd      	mov	sp, r7
 8009e2a:	bd80      	pop	{r7, pc}

08009e2c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009e2c:	b480      	push	{r7}
 8009e2e:	b083      	sub	sp, #12
 8009e30:	af00      	add	r7, sp, #0
 8009e32:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009e34:	4b03      	ldr	r3, [pc, #12]	; (8009e44 <USBD_static_malloc+0x18>)
}
 8009e36:	4618      	mov	r0, r3
 8009e38:	370c      	adds	r7, #12
 8009e3a:	46bd      	mov	sp, r7
 8009e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e40:	4770      	bx	lr
 8009e42:	bf00      	nop
 8009e44:	2000120c 	.word	0x2000120c

08009e48 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009e48:	b480      	push	{r7}
 8009e4a:	b083      	sub	sp, #12
 8009e4c:	af00      	add	r7, sp, #0
 8009e4e:	6078      	str	r0, [r7, #4]

}
 8009e50:	bf00      	nop
 8009e52:	370c      	adds	r7, #12
 8009e54:	46bd      	mov	sp, r7
 8009e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e5a:	4770      	bx	lr

08009e5c <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009e5c:	b480      	push	{r7}
 8009e5e:	b083      	sub	sp, #12
 8009e60:	af00      	add	r7, sp, #0
 8009e62:	6078      	str	r0, [r7, #4]
 8009e64:	460b      	mov	r3, r1
 8009e66:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8009e68:	bf00      	nop
 8009e6a:	370c      	adds	r7, #12
 8009e6c:	46bd      	mov	sp, r7
 8009e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e72:	4770      	bx	lr

08009e74 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009e74:	b480      	push	{r7}
 8009e76:	b085      	sub	sp, #20
 8009e78:	af00      	add	r7, sp, #0
 8009e7a:	4603      	mov	r3, r0
 8009e7c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009e7e:	2300      	movs	r3, #0
 8009e80:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009e82:	79fb      	ldrb	r3, [r7, #7]
 8009e84:	2b03      	cmp	r3, #3
 8009e86:	d817      	bhi.n	8009eb8 <USBD_Get_USB_Status+0x44>
 8009e88:	a201      	add	r2, pc, #4	; (adr r2, 8009e90 <USBD_Get_USB_Status+0x1c>)
 8009e8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e8e:	bf00      	nop
 8009e90:	08009ea1 	.word	0x08009ea1
 8009e94:	08009ea7 	.word	0x08009ea7
 8009e98:	08009ead 	.word	0x08009ead
 8009e9c:	08009eb3 	.word	0x08009eb3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009ea0:	2300      	movs	r3, #0
 8009ea2:	73fb      	strb	r3, [r7, #15]
    break;
 8009ea4:	e00b      	b.n	8009ebe <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009ea6:	2302      	movs	r3, #2
 8009ea8:	73fb      	strb	r3, [r7, #15]
    break;
 8009eaa:	e008      	b.n	8009ebe <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009eac:	2301      	movs	r3, #1
 8009eae:	73fb      	strb	r3, [r7, #15]
    break;
 8009eb0:	e005      	b.n	8009ebe <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009eb2:	2302      	movs	r3, #2
 8009eb4:	73fb      	strb	r3, [r7, #15]
    break;
 8009eb6:	e002      	b.n	8009ebe <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009eb8:	2302      	movs	r3, #2
 8009eba:	73fb      	strb	r3, [r7, #15]
    break;
 8009ebc:	bf00      	nop
  }
  return usb_status;
 8009ebe:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ec0:	4618      	mov	r0, r3
 8009ec2:	3714      	adds	r7, #20
 8009ec4:	46bd      	mov	sp, r7
 8009ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eca:	4770      	bx	lr

08009ecc <_strtol_l.constprop.0>:
 8009ecc:	2b01      	cmp	r3, #1
 8009ece:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009ed2:	d001      	beq.n	8009ed8 <_strtol_l.constprop.0+0xc>
 8009ed4:	2b24      	cmp	r3, #36	; 0x24
 8009ed6:	d906      	bls.n	8009ee6 <_strtol_l.constprop.0+0x1a>
 8009ed8:	f000 fa00 	bl	800a2dc <__errno>
 8009edc:	2316      	movs	r3, #22
 8009ede:	6003      	str	r3, [r0, #0]
 8009ee0:	2000      	movs	r0, #0
 8009ee2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009ee6:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8009fcc <_strtol_l.constprop.0+0x100>
 8009eea:	460d      	mov	r5, r1
 8009eec:	462e      	mov	r6, r5
 8009eee:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009ef2:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8009ef6:	f017 0708 	ands.w	r7, r7, #8
 8009efa:	d1f7      	bne.n	8009eec <_strtol_l.constprop.0+0x20>
 8009efc:	2c2d      	cmp	r4, #45	; 0x2d
 8009efe:	d132      	bne.n	8009f66 <_strtol_l.constprop.0+0x9a>
 8009f00:	782c      	ldrb	r4, [r5, #0]
 8009f02:	2701      	movs	r7, #1
 8009f04:	1cb5      	adds	r5, r6, #2
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	d05b      	beq.n	8009fc2 <_strtol_l.constprop.0+0xf6>
 8009f0a:	2b10      	cmp	r3, #16
 8009f0c:	d109      	bne.n	8009f22 <_strtol_l.constprop.0+0x56>
 8009f0e:	2c30      	cmp	r4, #48	; 0x30
 8009f10:	d107      	bne.n	8009f22 <_strtol_l.constprop.0+0x56>
 8009f12:	782c      	ldrb	r4, [r5, #0]
 8009f14:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8009f18:	2c58      	cmp	r4, #88	; 0x58
 8009f1a:	d14d      	bne.n	8009fb8 <_strtol_l.constprop.0+0xec>
 8009f1c:	786c      	ldrb	r4, [r5, #1]
 8009f1e:	2310      	movs	r3, #16
 8009f20:	3502      	adds	r5, #2
 8009f22:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8009f26:	f108 38ff 	add.w	r8, r8, #4294967295
 8009f2a:	f04f 0e00 	mov.w	lr, #0
 8009f2e:	fbb8 f9f3 	udiv	r9, r8, r3
 8009f32:	4676      	mov	r6, lr
 8009f34:	fb03 8a19 	mls	sl, r3, r9, r8
 8009f38:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8009f3c:	f1bc 0f09 	cmp.w	ip, #9
 8009f40:	d816      	bhi.n	8009f70 <_strtol_l.constprop.0+0xa4>
 8009f42:	4664      	mov	r4, ip
 8009f44:	42a3      	cmp	r3, r4
 8009f46:	dd24      	ble.n	8009f92 <_strtol_l.constprop.0+0xc6>
 8009f48:	f1be 3fff 	cmp.w	lr, #4294967295
 8009f4c:	d008      	beq.n	8009f60 <_strtol_l.constprop.0+0x94>
 8009f4e:	45b1      	cmp	r9, r6
 8009f50:	d31c      	bcc.n	8009f8c <_strtol_l.constprop.0+0xc0>
 8009f52:	d101      	bne.n	8009f58 <_strtol_l.constprop.0+0x8c>
 8009f54:	45a2      	cmp	sl, r4
 8009f56:	db19      	blt.n	8009f8c <_strtol_l.constprop.0+0xc0>
 8009f58:	fb06 4603 	mla	r6, r6, r3, r4
 8009f5c:	f04f 0e01 	mov.w	lr, #1
 8009f60:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009f64:	e7e8      	b.n	8009f38 <_strtol_l.constprop.0+0x6c>
 8009f66:	2c2b      	cmp	r4, #43	; 0x2b
 8009f68:	bf04      	itt	eq
 8009f6a:	782c      	ldrbeq	r4, [r5, #0]
 8009f6c:	1cb5      	addeq	r5, r6, #2
 8009f6e:	e7ca      	b.n	8009f06 <_strtol_l.constprop.0+0x3a>
 8009f70:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8009f74:	f1bc 0f19 	cmp.w	ip, #25
 8009f78:	d801      	bhi.n	8009f7e <_strtol_l.constprop.0+0xb2>
 8009f7a:	3c37      	subs	r4, #55	; 0x37
 8009f7c:	e7e2      	b.n	8009f44 <_strtol_l.constprop.0+0x78>
 8009f7e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8009f82:	f1bc 0f19 	cmp.w	ip, #25
 8009f86:	d804      	bhi.n	8009f92 <_strtol_l.constprop.0+0xc6>
 8009f88:	3c57      	subs	r4, #87	; 0x57
 8009f8a:	e7db      	b.n	8009f44 <_strtol_l.constprop.0+0x78>
 8009f8c:	f04f 3eff 	mov.w	lr, #4294967295
 8009f90:	e7e6      	b.n	8009f60 <_strtol_l.constprop.0+0x94>
 8009f92:	f1be 3fff 	cmp.w	lr, #4294967295
 8009f96:	d105      	bne.n	8009fa4 <_strtol_l.constprop.0+0xd8>
 8009f98:	2322      	movs	r3, #34	; 0x22
 8009f9a:	6003      	str	r3, [r0, #0]
 8009f9c:	4646      	mov	r6, r8
 8009f9e:	b942      	cbnz	r2, 8009fb2 <_strtol_l.constprop.0+0xe6>
 8009fa0:	4630      	mov	r0, r6
 8009fa2:	e79e      	b.n	8009ee2 <_strtol_l.constprop.0+0x16>
 8009fa4:	b107      	cbz	r7, 8009fa8 <_strtol_l.constprop.0+0xdc>
 8009fa6:	4276      	negs	r6, r6
 8009fa8:	2a00      	cmp	r2, #0
 8009faa:	d0f9      	beq.n	8009fa0 <_strtol_l.constprop.0+0xd4>
 8009fac:	f1be 0f00 	cmp.w	lr, #0
 8009fb0:	d000      	beq.n	8009fb4 <_strtol_l.constprop.0+0xe8>
 8009fb2:	1e69      	subs	r1, r5, #1
 8009fb4:	6011      	str	r1, [r2, #0]
 8009fb6:	e7f3      	b.n	8009fa0 <_strtol_l.constprop.0+0xd4>
 8009fb8:	2430      	movs	r4, #48	; 0x30
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	d1b1      	bne.n	8009f22 <_strtol_l.constprop.0+0x56>
 8009fbe:	2308      	movs	r3, #8
 8009fc0:	e7af      	b.n	8009f22 <_strtol_l.constprop.0+0x56>
 8009fc2:	2c30      	cmp	r4, #48	; 0x30
 8009fc4:	d0a5      	beq.n	8009f12 <_strtol_l.constprop.0+0x46>
 8009fc6:	230a      	movs	r3, #10
 8009fc8:	e7ab      	b.n	8009f22 <_strtol_l.constprop.0+0x56>
 8009fca:	bf00      	nop
 8009fcc:	0800b345 	.word	0x0800b345

08009fd0 <strtol>:
 8009fd0:	4613      	mov	r3, r2
 8009fd2:	460a      	mov	r2, r1
 8009fd4:	4601      	mov	r1, r0
 8009fd6:	4802      	ldr	r0, [pc, #8]	; (8009fe0 <strtol+0x10>)
 8009fd8:	6800      	ldr	r0, [r0, #0]
 8009fda:	f7ff bf77 	b.w	8009ecc <_strtol_l.constprop.0>
 8009fde:	bf00      	nop
 8009fe0:	200001d4 	.word	0x200001d4

08009fe4 <std>:
 8009fe4:	2300      	movs	r3, #0
 8009fe6:	b510      	push	{r4, lr}
 8009fe8:	4604      	mov	r4, r0
 8009fea:	e9c0 3300 	strd	r3, r3, [r0]
 8009fee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009ff2:	6083      	str	r3, [r0, #8]
 8009ff4:	8181      	strh	r1, [r0, #12]
 8009ff6:	6643      	str	r3, [r0, #100]	; 0x64
 8009ff8:	81c2      	strh	r2, [r0, #14]
 8009ffa:	6183      	str	r3, [r0, #24]
 8009ffc:	4619      	mov	r1, r3
 8009ffe:	2208      	movs	r2, #8
 800a000:	305c      	adds	r0, #92	; 0x5c
 800a002:	f000 f91c 	bl	800a23e <memset>
 800a006:	4b05      	ldr	r3, [pc, #20]	; (800a01c <std+0x38>)
 800a008:	6263      	str	r3, [r4, #36]	; 0x24
 800a00a:	4b05      	ldr	r3, [pc, #20]	; (800a020 <std+0x3c>)
 800a00c:	62a3      	str	r3, [r4, #40]	; 0x28
 800a00e:	4b05      	ldr	r3, [pc, #20]	; (800a024 <std+0x40>)
 800a010:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a012:	4b05      	ldr	r3, [pc, #20]	; (800a028 <std+0x44>)
 800a014:	6224      	str	r4, [r4, #32]
 800a016:	6323      	str	r3, [r4, #48]	; 0x30
 800a018:	bd10      	pop	{r4, pc}
 800a01a:	bf00      	nop
 800a01c:	0800a1b9 	.word	0x0800a1b9
 800a020:	0800a1db 	.word	0x0800a1db
 800a024:	0800a213 	.word	0x0800a213
 800a028:	0800a237 	.word	0x0800a237

0800a02c <stdio_exit_handler>:
 800a02c:	4a02      	ldr	r2, [pc, #8]	; (800a038 <stdio_exit_handler+0xc>)
 800a02e:	4903      	ldr	r1, [pc, #12]	; (800a03c <stdio_exit_handler+0x10>)
 800a030:	4803      	ldr	r0, [pc, #12]	; (800a040 <stdio_exit_handler+0x14>)
 800a032:	f000 b869 	b.w	800a108 <_fwalk_sglue>
 800a036:	bf00      	nop
 800a038:	2000017c 	.word	0x2000017c
 800a03c:	0800aea5 	.word	0x0800aea5
 800a040:	20000188 	.word	0x20000188

0800a044 <cleanup_stdio>:
 800a044:	6841      	ldr	r1, [r0, #4]
 800a046:	4b0c      	ldr	r3, [pc, #48]	; (800a078 <cleanup_stdio+0x34>)
 800a048:	4299      	cmp	r1, r3
 800a04a:	b510      	push	{r4, lr}
 800a04c:	4604      	mov	r4, r0
 800a04e:	d001      	beq.n	800a054 <cleanup_stdio+0x10>
 800a050:	f000 ff28 	bl	800aea4 <_fflush_r>
 800a054:	68a1      	ldr	r1, [r4, #8]
 800a056:	4b09      	ldr	r3, [pc, #36]	; (800a07c <cleanup_stdio+0x38>)
 800a058:	4299      	cmp	r1, r3
 800a05a:	d002      	beq.n	800a062 <cleanup_stdio+0x1e>
 800a05c:	4620      	mov	r0, r4
 800a05e:	f000 ff21 	bl	800aea4 <_fflush_r>
 800a062:	68e1      	ldr	r1, [r4, #12]
 800a064:	4b06      	ldr	r3, [pc, #24]	; (800a080 <cleanup_stdio+0x3c>)
 800a066:	4299      	cmp	r1, r3
 800a068:	d004      	beq.n	800a074 <cleanup_stdio+0x30>
 800a06a:	4620      	mov	r0, r4
 800a06c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a070:	f000 bf18 	b.w	800aea4 <_fflush_r>
 800a074:	bd10      	pop	{r4, pc}
 800a076:	bf00      	nop
 800a078:	2000142c 	.word	0x2000142c
 800a07c:	20001494 	.word	0x20001494
 800a080:	200014fc 	.word	0x200014fc

0800a084 <global_stdio_init.part.0>:
 800a084:	b510      	push	{r4, lr}
 800a086:	4b0b      	ldr	r3, [pc, #44]	; (800a0b4 <global_stdio_init.part.0+0x30>)
 800a088:	4c0b      	ldr	r4, [pc, #44]	; (800a0b8 <global_stdio_init.part.0+0x34>)
 800a08a:	4a0c      	ldr	r2, [pc, #48]	; (800a0bc <global_stdio_init.part.0+0x38>)
 800a08c:	601a      	str	r2, [r3, #0]
 800a08e:	4620      	mov	r0, r4
 800a090:	2200      	movs	r2, #0
 800a092:	2104      	movs	r1, #4
 800a094:	f7ff ffa6 	bl	8009fe4 <std>
 800a098:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800a09c:	2201      	movs	r2, #1
 800a09e:	2109      	movs	r1, #9
 800a0a0:	f7ff ffa0 	bl	8009fe4 <std>
 800a0a4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800a0a8:	2202      	movs	r2, #2
 800a0aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a0ae:	2112      	movs	r1, #18
 800a0b0:	f7ff bf98 	b.w	8009fe4 <std>
 800a0b4:	20001564 	.word	0x20001564
 800a0b8:	2000142c 	.word	0x2000142c
 800a0bc:	0800a02d 	.word	0x0800a02d

0800a0c0 <__sfp_lock_acquire>:
 800a0c0:	4801      	ldr	r0, [pc, #4]	; (800a0c8 <__sfp_lock_acquire+0x8>)
 800a0c2:	f000 b935 	b.w	800a330 <__retarget_lock_acquire_recursive>
 800a0c6:	bf00      	nop
 800a0c8:	2000156d 	.word	0x2000156d

0800a0cc <__sfp_lock_release>:
 800a0cc:	4801      	ldr	r0, [pc, #4]	; (800a0d4 <__sfp_lock_release+0x8>)
 800a0ce:	f000 b930 	b.w	800a332 <__retarget_lock_release_recursive>
 800a0d2:	bf00      	nop
 800a0d4:	2000156d 	.word	0x2000156d

0800a0d8 <__sinit>:
 800a0d8:	b510      	push	{r4, lr}
 800a0da:	4604      	mov	r4, r0
 800a0dc:	f7ff fff0 	bl	800a0c0 <__sfp_lock_acquire>
 800a0e0:	6a23      	ldr	r3, [r4, #32]
 800a0e2:	b11b      	cbz	r3, 800a0ec <__sinit+0x14>
 800a0e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a0e8:	f7ff bff0 	b.w	800a0cc <__sfp_lock_release>
 800a0ec:	4b04      	ldr	r3, [pc, #16]	; (800a100 <__sinit+0x28>)
 800a0ee:	6223      	str	r3, [r4, #32]
 800a0f0:	4b04      	ldr	r3, [pc, #16]	; (800a104 <__sinit+0x2c>)
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	d1f5      	bne.n	800a0e4 <__sinit+0xc>
 800a0f8:	f7ff ffc4 	bl	800a084 <global_stdio_init.part.0>
 800a0fc:	e7f2      	b.n	800a0e4 <__sinit+0xc>
 800a0fe:	bf00      	nop
 800a100:	0800a045 	.word	0x0800a045
 800a104:	20001564 	.word	0x20001564

0800a108 <_fwalk_sglue>:
 800a108:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a10c:	4607      	mov	r7, r0
 800a10e:	4688      	mov	r8, r1
 800a110:	4614      	mov	r4, r2
 800a112:	2600      	movs	r6, #0
 800a114:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a118:	f1b9 0901 	subs.w	r9, r9, #1
 800a11c:	d505      	bpl.n	800a12a <_fwalk_sglue+0x22>
 800a11e:	6824      	ldr	r4, [r4, #0]
 800a120:	2c00      	cmp	r4, #0
 800a122:	d1f7      	bne.n	800a114 <_fwalk_sglue+0xc>
 800a124:	4630      	mov	r0, r6
 800a126:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a12a:	89ab      	ldrh	r3, [r5, #12]
 800a12c:	2b01      	cmp	r3, #1
 800a12e:	d907      	bls.n	800a140 <_fwalk_sglue+0x38>
 800a130:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a134:	3301      	adds	r3, #1
 800a136:	d003      	beq.n	800a140 <_fwalk_sglue+0x38>
 800a138:	4629      	mov	r1, r5
 800a13a:	4638      	mov	r0, r7
 800a13c:	47c0      	blx	r8
 800a13e:	4306      	orrs	r6, r0
 800a140:	3568      	adds	r5, #104	; 0x68
 800a142:	e7e9      	b.n	800a118 <_fwalk_sglue+0x10>

0800a144 <iprintf>:
 800a144:	b40f      	push	{r0, r1, r2, r3}
 800a146:	b507      	push	{r0, r1, r2, lr}
 800a148:	4906      	ldr	r1, [pc, #24]	; (800a164 <iprintf+0x20>)
 800a14a:	ab04      	add	r3, sp, #16
 800a14c:	6808      	ldr	r0, [r1, #0]
 800a14e:	f853 2b04 	ldr.w	r2, [r3], #4
 800a152:	6881      	ldr	r1, [r0, #8]
 800a154:	9301      	str	r3, [sp, #4]
 800a156:	f000 fb75 	bl	800a844 <_vfiprintf_r>
 800a15a:	b003      	add	sp, #12
 800a15c:	f85d eb04 	ldr.w	lr, [sp], #4
 800a160:	b004      	add	sp, #16
 800a162:	4770      	bx	lr
 800a164:	200001d4 	.word	0x200001d4

0800a168 <putchar>:
 800a168:	4b02      	ldr	r3, [pc, #8]	; (800a174 <putchar+0xc>)
 800a16a:	4601      	mov	r1, r0
 800a16c:	6818      	ldr	r0, [r3, #0]
 800a16e:	6882      	ldr	r2, [r0, #8]
 800a170:	f000 bec0 	b.w	800aef4 <_putc_r>
 800a174:	200001d4 	.word	0x200001d4

0800a178 <siprintf>:
 800a178:	b40e      	push	{r1, r2, r3}
 800a17a:	b500      	push	{lr}
 800a17c:	b09c      	sub	sp, #112	; 0x70
 800a17e:	ab1d      	add	r3, sp, #116	; 0x74
 800a180:	9002      	str	r0, [sp, #8]
 800a182:	9006      	str	r0, [sp, #24]
 800a184:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a188:	4809      	ldr	r0, [pc, #36]	; (800a1b0 <siprintf+0x38>)
 800a18a:	9107      	str	r1, [sp, #28]
 800a18c:	9104      	str	r1, [sp, #16]
 800a18e:	4909      	ldr	r1, [pc, #36]	; (800a1b4 <siprintf+0x3c>)
 800a190:	f853 2b04 	ldr.w	r2, [r3], #4
 800a194:	9105      	str	r1, [sp, #20]
 800a196:	6800      	ldr	r0, [r0, #0]
 800a198:	9301      	str	r3, [sp, #4]
 800a19a:	a902      	add	r1, sp, #8
 800a19c:	f000 fa2a 	bl	800a5f4 <_svfiprintf_r>
 800a1a0:	9b02      	ldr	r3, [sp, #8]
 800a1a2:	2200      	movs	r2, #0
 800a1a4:	701a      	strb	r2, [r3, #0]
 800a1a6:	b01c      	add	sp, #112	; 0x70
 800a1a8:	f85d eb04 	ldr.w	lr, [sp], #4
 800a1ac:	b003      	add	sp, #12
 800a1ae:	4770      	bx	lr
 800a1b0:	200001d4 	.word	0x200001d4
 800a1b4:	ffff0208 	.word	0xffff0208

0800a1b8 <__sread>:
 800a1b8:	b510      	push	{r4, lr}
 800a1ba:	460c      	mov	r4, r1
 800a1bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a1c0:	f000 f868 	bl	800a294 <_read_r>
 800a1c4:	2800      	cmp	r0, #0
 800a1c6:	bfab      	itete	ge
 800a1c8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a1ca:	89a3      	ldrhlt	r3, [r4, #12]
 800a1cc:	181b      	addge	r3, r3, r0
 800a1ce:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a1d2:	bfac      	ite	ge
 800a1d4:	6563      	strge	r3, [r4, #84]	; 0x54
 800a1d6:	81a3      	strhlt	r3, [r4, #12]
 800a1d8:	bd10      	pop	{r4, pc}

0800a1da <__swrite>:
 800a1da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a1de:	461f      	mov	r7, r3
 800a1e0:	898b      	ldrh	r3, [r1, #12]
 800a1e2:	05db      	lsls	r3, r3, #23
 800a1e4:	4605      	mov	r5, r0
 800a1e6:	460c      	mov	r4, r1
 800a1e8:	4616      	mov	r6, r2
 800a1ea:	d505      	bpl.n	800a1f8 <__swrite+0x1e>
 800a1ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a1f0:	2302      	movs	r3, #2
 800a1f2:	2200      	movs	r2, #0
 800a1f4:	f000 f83c 	bl	800a270 <_lseek_r>
 800a1f8:	89a3      	ldrh	r3, [r4, #12]
 800a1fa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a1fe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a202:	81a3      	strh	r3, [r4, #12]
 800a204:	4632      	mov	r2, r6
 800a206:	463b      	mov	r3, r7
 800a208:	4628      	mov	r0, r5
 800a20a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a20e:	f000 b853 	b.w	800a2b8 <_write_r>

0800a212 <__sseek>:
 800a212:	b510      	push	{r4, lr}
 800a214:	460c      	mov	r4, r1
 800a216:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a21a:	f000 f829 	bl	800a270 <_lseek_r>
 800a21e:	1c43      	adds	r3, r0, #1
 800a220:	89a3      	ldrh	r3, [r4, #12]
 800a222:	bf15      	itete	ne
 800a224:	6560      	strne	r0, [r4, #84]	; 0x54
 800a226:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a22a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a22e:	81a3      	strheq	r3, [r4, #12]
 800a230:	bf18      	it	ne
 800a232:	81a3      	strhne	r3, [r4, #12]
 800a234:	bd10      	pop	{r4, pc}

0800a236 <__sclose>:
 800a236:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a23a:	f000 b809 	b.w	800a250 <_close_r>

0800a23e <memset>:
 800a23e:	4402      	add	r2, r0
 800a240:	4603      	mov	r3, r0
 800a242:	4293      	cmp	r3, r2
 800a244:	d100      	bne.n	800a248 <memset+0xa>
 800a246:	4770      	bx	lr
 800a248:	f803 1b01 	strb.w	r1, [r3], #1
 800a24c:	e7f9      	b.n	800a242 <memset+0x4>
	...

0800a250 <_close_r>:
 800a250:	b538      	push	{r3, r4, r5, lr}
 800a252:	4d06      	ldr	r5, [pc, #24]	; (800a26c <_close_r+0x1c>)
 800a254:	2300      	movs	r3, #0
 800a256:	4604      	mov	r4, r0
 800a258:	4608      	mov	r0, r1
 800a25a:	602b      	str	r3, [r5, #0]
 800a25c:	f7f6 ff15 	bl	800108a <_close>
 800a260:	1c43      	adds	r3, r0, #1
 800a262:	d102      	bne.n	800a26a <_close_r+0x1a>
 800a264:	682b      	ldr	r3, [r5, #0]
 800a266:	b103      	cbz	r3, 800a26a <_close_r+0x1a>
 800a268:	6023      	str	r3, [r4, #0]
 800a26a:	bd38      	pop	{r3, r4, r5, pc}
 800a26c:	20001568 	.word	0x20001568

0800a270 <_lseek_r>:
 800a270:	b538      	push	{r3, r4, r5, lr}
 800a272:	4d07      	ldr	r5, [pc, #28]	; (800a290 <_lseek_r+0x20>)
 800a274:	4604      	mov	r4, r0
 800a276:	4608      	mov	r0, r1
 800a278:	4611      	mov	r1, r2
 800a27a:	2200      	movs	r2, #0
 800a27c:	602a      	str	r2, [r5, #0]
 800a27e:	461a      	mov	r2, r3
 800a280:	f7f6 ff2a 	bl	80010d8 <_lseek>
 800a284:	1c43      	adds	r3, r0, #1
 800a286:	d102      	bne.n	800a28e <_lseek_r+0x1e>
 800a288:	682b      	ldr	r3, [r5, #0]
 800a28a:	b103      	cbz	r3, 800a28e <_lseek_r+0x1e>
 800a28c:	6023      	str	r3, [r4, #0]
 800a28e:	bd38      	pop	{r3, r4, r5, pc}
 800a290:	20001568 	.word	0x20001568

0800a294 <_read_r>:
 800a294:	b538      	push	{r3, r4, r5, lr}
 800a296:	4d07      	ldr	r5, [pc, #28]	; (800a2b4 <_read_r+0x20>)
 800a298:	4604      	mov	r4, r0
 800a29a:	4608      	mov	r0, r1
 800a29c:	4611      	mov	r1, r2
 800a29e:	2200      	movs	r2, #0
 800a2a0:	602a      	str	r2, [r5, #0]
 800a2a2:	461a      	mov	r2, r3
 800a2a4:	f7f6 feb8 	bl	8001018 <_read>
 800a2a8:	1c43      	adds	r3, r0, #1
 800a2aa:	d102      	bne.n	800a2b2 <_read_r+0x1e>
 800a2ac:	682b      	ldr	r3, [r5, #0]
 800a2ae:	b103      	cbz	r3, 800a2b2 <_read_r+0x1e>
 800a2b0:	6023      	str	r3, [r4, #0]
 800a2b2:	bd38      	pop	{r3, r4, r5, pc}
 800a2b4:	20001568 	.word	0x20001568

0800a2b8 <_write_r>:
 800a2b8:	b538      	push	{r3, r4, r5, lr}
 800a2ba:	4d07      	ldr	r5, [pc, #28]	; (800a2d8 <_write_r+0x20>)
 800a2bc:	4604      	mov	r4, r0
 800a2be:	4608      	mov	r0, r1
 800a2c0:	4611      	mov	r1, r2
 800a2c2:	2200      	movs	r2, #0
 800a2c4:	602a      	str	r2, [r5, #0]
 800a2c6:	461a      	mov	r2, r3
 800a2c8:	f7f6 fec3 	bl	8001052 <_write>
 800a2cc:	1c43      	adds	r3, r0, #1
 800a2ce:	d102      	bne.n	800a2d6 <_write_r+0x1e>
 800a2d0:	682b      	ldr	r3, [r5, #0]
 800a2d2:	b103      	cbz	r3, 800a2d6 <_write_r+0x1e>
 800a2d4:	6023      	str	r3, [r4, #0]
 800a2d6:	bd38      	pop	{r3, r4, r5, pc}
 800a2d8:	20001568 	.word	0x20001568

0800a2dc <__errno>:
 800a2dc:	4b01      	ldr	r3, [pc, #4]	; (800a2e4 <__errno+0x8>)
 800a2de:	6818      	ldr	r0, [r3, #0]
 800a2e0:	4770      	bx	lr
 800a2e2:	bf00      	nop
 800a2e4:	200001d4 	.word	0x200001d4

0800a2e8 <__libc_init_array>:
 800a2e8:	b570      	push	{r4, r5, r6, lr}
 800a2ea:	4d0d      	ldr	r5, [pc, #52]	; (800a320 <__libc_init_array+0x38>)
 800a2ec:	4c0d      	ldr	r4, [pc, #52]	; (800a324 <__libc_init_array+0x3c>)
 800a2ee:	1b64      	subs	r4, r4, r5
 800a2f0:	10a4      	asrs	r4, r4, #2
 800a2f2:	2600      	movs	r6, #0
 800a2f4:	42a6      	cmp	r6, r4
 800a2f6:	d109      	bne.n	800a30c <__libc_init_array+0x24>
 800a2f8:	4d0b      	ldr	r5, [pc, #44]	; (800a328 <__libc_init_array+0x40>)
 800a2fa:	4c0c      	ldr	r4, [pc, #48]	; (800a32c <__libc_init_array+0x44>)
 800a2fc:	f000 ffaa 	bl	800b254 <_init>
 800a300:	1b64      	subs	r4, r4, r5
 800a302:	10a4      	asrs	r4, r4, #2
 800a304:	2600      	movs	r6, #0
 800a306:	42a6      	cmp	r6, r4
 800a308:	d105      	bne.n	800a316 <__libc_init_array+0x2e>
 800a30a:	bd70      	pop	{r4, r5, r6, pc}
 800a30c:	f855 3b04 	ldr.w	r3, [r5], #4
 800a310:	4798      	blx	r3
 800a312:	3601      	adds	r6, #1
 800a314:	e7ee      	b.n	800a2f4 <__libc_init_array+0xc>
 800a316:	f855 3b04 	ldr.w	r3, [r5], #4
 800a31a:	4798      	blx	r3
 800a31c:	3601      	adds	r6, #1
 800a31e:	e7f2      	b.n	800a306 <__libc_init_array+0x1e>
 800a320:	0800b478 	.word	0x0800b478
 800a324:	0800b478 	.word	0x0800b478
 800a328:	0800b478 	.word	0x0800b478
 800a32c:	0800b47c 	.word	0x0800b47c

0800a330 <__retarget_lock_acquire_recursive>:
 800a330:	4770      	bx	lr

0800a332 <__retarget_lock_release_recursive>:
 800a332:	4770      	bx	lr

0800a334 <memcpy>:
 800a334:	440a      	add	r2, r1
 800a336:	4291      	cmp	r1, r2
 800a338:	f100 33ff 	add.w	r3, r0, #4294967295
 800a33c:	d100      	bne.n	800a340 <memcpy+0xc>
 800a33e:	4770      	bx	lr
 800a340:	b510      	push	{r4, lr}
 800a342:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a346:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a34a:	4291      	cmp	r1, r2
 800a34c:	d1f9      	bne.n	800a342 <memcpy+0xe>
 800a34e:	bd10      	pop	{r4, pc}

0800a350 <_free_r>:
 800a350:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a352:	2900      	cmp	r1, #0
 800a354:	d044      	beq.n	800a3e0 <_free_r+0x90>
 800a356:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a35a:	9001      	str	r0, [sp, #4]
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	f1a1 0404 	sub.w	r4, r1, #4
 800a362:	bfb8      	it	lt
 800a364:	18e4      	addlt	r4, r4, r3
 800a366:	f000 f8df 	bl	800a528 <__malloc_lock>
 800a36a:	4a1e      	ldr	r2, [pc, #120]	; (800a3e4 <_free_r+0x94>)
 800a36c:	9801      	ldr	r0, [sp, #4]
 800a36e:	6813      	ldr	r3, [r2, #0]
 800a370:	b933      	cbnz	r3, 800a380 <_free_r+0x30>
 800a372:	6063      	str	r3, [r4, #4]
 800a374:	6014      	str	r4, [r2, #0]
 800a376:	b003      	add	sp, #12
 800a378:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a37c:	f000 b8da 	b.w	800a534 <__malloc_unlock>
 800a380:	42a3      	cmp	r3, r4
 800a382:	d908      	bls.n	800a396 <_free_r+0x46>
 800a384:	6825      	ldr	r5, [r4, #0]
 800a386:	1961      	adds	r1, r4, r5
 800a388:	428b      	cmp	r3, r1
 800a38a:	bf01      	itttt	eq
 800a38c:	6819      	ldreq	r1, [r3, #0]
 800a38e:	685b      	ldreq	r3, [r3, #4]
 800a390:	1949      	addeq	r1, r1, r5
 800a392:	6021      	streq	r1, [r4, #0]
 800a394:	e7ed      	b.n	800a372 <_free_r+0x22>
 800a396:	461a      	mov	r2, r3
 800a398:	685b      	ldr	r3, [r3, #4]
 800a39a:	b10b      	cbz	r3, 800a3a0 <_free_r+0x50>
 800a39c:	42a3      	cmp	r3, r4
 800a39e:	d9fa      	bls.n	800a396 <_free_r+0x46>
 800a3a0:	6811      	ldr	r1, [r2, #0]
 800a3a2:	1855      	adds	r5, r2, r1
 800a3a4:	42a5      	cmp	r5, r4
 800a3a6:	d10b      	bne.n	800a3c0 <_free_r+0x70>
 800a3a8:	6824      	ldr	r4, [r4, #0]
 800a3aa:	4421      	add	r1, r4
 800a3ac:	1854      	adds	r4, r2, r1
 800a3ae:	42a3      	cmp	r3, r4
 800a3b0:	6011      	str	r1, [r2, #0]
 800a3b2:	d1e0      	bne.n	800a376 <_free_r+0x26>
 800a3b4:	681c      	ldr	r4, [r3, #0]
 800a3b6:	685b      	ldr	r3, [r3, #4]
 800a3b8:	6053      	str	r3, [r2, #4]
 800a3ba:	440c      	add	r4, r1
 800a3bc:	6014      	str	r4, [r2, #0]
 800a3be:	e7da      	b.n	800a376 <_free_r+0x26>
 800a3c0:	d902      	bls.n	800a3c8 <_free_r+0x78>
 800a3c2:	230c      	movs	r3, #12
 800a3c4:	6003      	str	r3, [r0, #0]
 800a3c6:	e7d6      	b.n	800a376 <_free_r+0x26>
 800a3c8:	6825      	ldr	r5, [r4, #0]
 800a3ca:	1961      	adds	r1, r4, r5
 800a3cc:	428b      	cmp	r3, r1
 800a3ce:	bf04      	itt	eq
 800a3d0:	6819      	ldreq	r1, [r3, #0]
 800a3d2:	685b      	ldreq	r3, [r3, #4]
 800a3d4:	6063      	str	r3, [r4, #4]
 800a3d6:	bf04      	itt	eq
 800a3d8:	1949      	addeq	r1, r1, r5
 800a3da:	6021      	streq	r1, [r4, #0]
 800a3dc:	6054      	str	r4, [r2, #4]
 800a3de:	e7ca      	b.n	800a376 <_free_r+0x26>
 800a3e0:	b003      	add	sp, #12
 800a3e2:	bd30      	pop	{r4, r5, pc}
 800a3e4:	20001570 	.word	0x20001570

0800a3e8 <sbrk_aligned>:
 800a3e8:	b570      	push	{r4, r5, r6, lr}
 800a3ea:	4e0e      	ldr	r6, [pc, #56]	; (800a424 <sbrk_aligned+0x3c>)
 800a3ec:	460c      	mov	r4, r1
 800a3ee:	6831      	ldr	r1, [r6, #0]
 800a3f0:	4605      	mov	r5, r0
 800a3f2:	b911      	cbnz	r1, 800a3fa <sbrk_aligned+0x12>
 800a3f4:	f000 fe62 	bl	800b0bc <_sbrk_r>
 800a3f8:	6030      	str	r0, [r6, #0]
 800a3fa:	4621      	mov	r1, r4
 800a3fc:	4628      	mov	r0, r5
 800a3fe:	f000 fe5d 	bl	800b0bc <_sbrk_r>
 800a402:	1c43      	adds	r3, r0, #1
 800a404:	d00a      	beq.n	800a41c <sbrk_aligned+0x34>
 800a406:	1cc4      	adds	r4, r0, #3
 800a408:	f024 0403 	bic.w	r4, r4, #3
 800a40c:	42a0      	cmp	r0, r4
 800a40e:	d007      	beq.n	800a420 <sbrk_aligned+0x38>
 800a410:	1a21      	subs	r1, r4, r0
 800a412:	4628      	mov	r0, r5
 800a414:	f000 fe52 	bl	800b0bc <_sbrk_r>
 800a418:	3001      	adds	r0, #1
 800a41a:	d101      	bne.n	800a420 <sbrk_aligned+0x38>
 800a41c:	f04f 34ff 	mov.w	r4, #4294967295
 800a420:	4620      	mov	r0, r4
 800a422:	bd70      	pop	{r4, r5, r6, pc}
 800a424:	20001574 	.word	0x20001574

0800a428 <_malloc_r>:
 800a428:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a42c:	1ccd      	adds	r5, r1, #3
 800a42e:	f025 0503 	bic.w	r5, r5, #3
 800a432:	3508      	adds	r5, #8
 800a434:	2d0c      	cmp	r5, #12
 800a436:	bf38      	it	cc
 800a438:	250c      	movcc	r5, #12
 800a43a:	2d00      	cmp	r5, #0
 800a43c:	4607      	mov	r7, r0
 800a43e:	db01      	blt.n	800a444 <_malloc_r+0x1c>
 800a440:	42a9      	cmp	r1, r5
 800a442:	d905      	bls.n	800a450 <_malloc_r+0x28>
 800a444:	230c      	movs	r3, #12
 800a446:	603b      	str	r3, [r7, #0]
 800a448:	2600      	movs	r6, #0
 800a44a:	4630      	mov	r0, r6
 800a44c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a450:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800a524 <_malloc_r+0xfc>
 800a454:	f000 f868 	bl	800a528 <__malloc_lock>
 800a458:	f8d8 3000 	ldr.w	r3, [r8]
 800a45c:	461c      	mov	r4, r3
 800a45e:	bb5c      	cbnz	r4, 800a4b8 <_malloc_r+0x90>
 800a460:	4629      	mov	r1, r5
 800a462:	4638      	mov	r0, r7
 800a464:	f7ff ffc0 	bl	800a3e8 <sbrk_aligned>
 800a468:	1c43      	adds	r3, r0, #1
 800a46a:	4604      	mov	r4, r0
 800a46c:	d155      	bne.n	800a51a <_malloc_r+0xf2>
 800a46e:	f8d8 4000 	ldr.w	r4, [r8]
 800a472:	4626      	mov	r6, r4
 800a474:	2e00      	cmp	r6, #0
 800a476:	d145      	bne.n	800a504 <_malloc_r+0xdc>
 800a478:	2c00      	cmp	r4, #0
 800a47a:	d048      	beq.n	800a50e <_malloc_r+0xe6>
 800a47c:	6823      	ldr	r3, [r4, #0]
 800a47e:	4631      	mov	r1, r6
 800a480:	4638      	mov	r0, r7
 800a482:	eb04 0903 	add.w	r9, r4, r3
 800a486:	f000 fe19 	bl	800b0bc <_sbrk_r>
 800a48a:	4581      	cmp	r9, r0
 800a48c:	d13f      	bne.n	800a50e <_malloc_r+0xe6>
 800a48e:	6821      	ldr	r1, [r4, #0]
 800a490:	1a6d      	subs	r5, r5, r1
 800a492:	4629      	mov	r1, r5
 800a494:	4638      	mov	r0, r7
 800a496:	f7ff ffa7 	bl	800a3e8 <sbrk_aligned>
 800a49a:	3001      	adds	r0, #1
 800a49c:	d037      	beq.n	800a50e <_malloc_r+0xe6>
 800a49e:	6823      	ldr	r3, [r4, #0]
 800a4a0:	442b      	add	r3, r5
 800a4a2:	6023      	str	r3, [r4, #0]
 800a4a4:	f8d8 3000 	ldr.w	r3, [r8]
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	d038      	beq.n	800a51e <_malloc_r+0xf6>
 800a4ac:	685a      	ldr	r2, [r3, #4]
 800a4ae:	42a2      	cmp	r2, r4
 800a4b0:	d12b      	bne.n	800a50a <_malloc_r+0xe2>
 800a4b2:	2200      	movs	r2, #0
 800a4b4:	605a      	str	r2, [r3, #4]
 800a4b6:	e00f      	b.n	800a4d8 <_malloc_r+0xb0>
 800a4b8:	6822      	ldr	r2, [r4, #0]
 800a4ba:	1b52      	subs	r2, r2, r5
 800a4bc:	d41f      	bmi.n	800a4fe <_malloc_r+0xd6>
 800a4be:	2a0b      	cmp	r2, #11
 800a4c0:	d917      	bls.n	800a4f2 <_malloc_r+0xca>
 800a4c2:	1961      	adds	r1, r4, r5
 800a4c4:	42a3      	cmp	r3, r4
 800a4c6:	6025      	str	r5, [r4, #0]
 800a4c8:	bf18      	it	ne
 800a4ca:	6059      	strne	r1, [r3, #4]
 800a4cc:	6863      	ldr	r3, [r4, #4]
 800a4ce:	bf08      	it	eq
 800a4d0:	f8c8 1000 	streq.w	r1, [r8]
 800a4d4:	5162      	str	r2, [r4, r5]
 800a4d6:	604b      	str	r3, [r1, #4]
 800a4d8:	4638      	mov	r0, r7
 800a4da:	f104 060b 	add.w	r6, r4, #11
 800a4de:	f000 f829 	bl	800a534 <__malloc_unlock>
 800a4e2:	f026 0607 	bic.w	r6, r6, #7
 800a4e6:	1d23      	adds	r3, r4, #4
 800a4e8:	1af2      	subs	r2, r6, r3
 800a4ea:	d0ae      	beq.n	800a44a <_malloc_r+0x22>
 800a4ec:	1b9b      	subs	r3, r3, r6
 800a4ee:	50a3      	str	r3, [r4, r2]
 800a4f0:	e7ab      	b.n	800a44a <_malloc_r+0x22>
 800a4f2:	42a3      	cmp	r3, r4
 800a4f4:	6862      	ldr	r2, [r4, #4]
 800a4f6:	d1dd      	bne.n	800a4b4 <_malloc_r+0x8c>
 800a4f8:	f8c8 2000 	str.w	r2, [r8]
 800a4fc:	e7ec      	b.n	800a4d8 <_malloc_r+0xb0>
 800a4fe:	4623      	mov	r3, r4
 800a500:	6864      	ldr	r4, [r4, #4]
 800a502:	e7ac      	b.n	800a45e <_malloc_r+0x36>
 800a504:	4634      	mov	r4, r6
 800a506:	6876      	ldr	r6, [r6, #4]
 800a508:	e7b4      	b.n	800a474 <_malloc_r+0x4c>
 800a50a:	4613      	mov	r3, r2
 800a50c:	e7cc      	b.n	800a4a8 <_malloc_r+0x80>
 800a50e:	230c      	movs	r3, #12
 800a510:	603b      	str	r3, [r7, #0]
 800a512:	4638      	mov	r0, r7
 800a514:	f000 f80e 	bl	800a534 <__malloc_unlock>
 800a518:	e797      	b.n	800a44a <_malloc_r+0x22>
 800a51a:	6025      	str	r5, [r4, #0]
 800a51c:	e7dc      	b.n	800a4d8 <_malloc_r+0xb0>
 800a51e:	605b      	str	r3, [r3, #4]
 800a520:	deff      	udf	#255	; 0xff
 800a522:	bf00      	nop
 800a524:	20001570 	.word	0x20001570

0800a528 <__malloc_lock>:
 800a528:	4801      	ldr	r0, [pc, #4]	; (800a530 <__malloc_lock+0x8>)
 800a52a:	f7ff bf01 	b.w	800a330 <__retarget_lock_acquire_recursive>
 800a52e:	bf00      	nop
 800a530:	2000156c 	.word	0x2000156c

0800a534 <__malloc_unlock>:
 800a534:	4801      	ldr	r0, [pc, #4]	; (800a53c <__malloc_unlock+0x8>)
 800a536:	f7ff befc 	b.w	800a332 <__retarget_lock_release_recursive>
 800a53a:	bf00      	nop
 800a53c:	2000156c 	.word	0x2000156c

0800a540 <__ssputs_r>:
 800a540:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a544:	688e      	ldr	r6, [r1, #8]
 800a546:	461f      	mov	r7, r3
 800a548:	42be      	cmp	r6, r7
 800a54a:	680b      	ldr	r3, [r1, #0]
 800a54c:	4682      	mov	sl, r0
 800a54e:	460c      	mov	r4, r1
 800a550:	4690      	mov	r8, r2
 800a552:	d82c      	bhi.n	800a5ae <__ssputs_r+0x6e>
 800a554:	898a      	ldrh	r2, [r1, #12]
 800a556:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a55a:	d026      	beq.n	800a5aa <__ssputs_r+0x6a>
 800a55c:	6965      	ldr	r5, [r4, #20]
 800a55e:	6909      	ldr	r1, [r1, #16]
 800a560:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a564:	eba3 0901 	sub.w	r9, r3, r1
 800a568:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a56c:	1c7b      	adds	r3, r7, #1
 800a56e:	444b      	add	r3, r9
 800a570:	106d      	asrs	r5, r5, #1
 800a572:	429d      	cmp	r5, r3
 800a574:	bf38      	it	cc
 800a576:	461d      	movcc	r5, r3
 800a578:	0553      	lsls	r3, r2, #21
 800a57a:	d527      	bpl.n	800a5cc <__ssputs_r+0x8c>
 800a57c:	4629      	mov	r1, r5
 800a57e:	f7ff ff53 	bl	800a428 <_malloc_r>
 800a582:	4606      	mov	r6, r0
 800a584:	b360      	cbz	r0, 800a5e0 <__ssputs_r+0xa0>
 800a586:	6921      	ldr	r1, [r4, #16]
 800a588:	464a      	mov	r2, r9
 800a58a:	f7ff fed3 	bl	800a334 <memcpy>
 800a58e:	89a3      	ldrh	r3, [r4, #12]
 800a590:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a594:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a598:	81a3      	strh	r3, [r4, #12]
 800a59a:	6126      	str	r6, [r4, #16]
 800a59c:	6165      	str	r5, [r4, #20]
 800a59e:	444e      	add	r6, r9
 800a5a0:	eba5 0509 	sub.w	r5, r5, r9
 800a5a4:	6026      	str	r6, [r4, #0]
 800a5a6:	60a5      	str	r5, [r4, #8]
 800a5a8:	463e      	mov	r6, r7
 800a5aa:	42be      	cmp	r6, r7
 800a5ac:	d900      	bls.n	800a5b0 <__ssputs_r+0x70>
 800a5ae:	463e      	mov	r6, r7
 800a5b0:	6820      	ldr	r0, [r4, #0]
 800a5b2:	4632      	mov	r2, r6
 800a5b4:	4641      	mov	r1, r8
 800a5b6:	f000 fd67 	bl	800b088 <memmove>
 800a5ba:	68a3      	ldr	r3, [r4, #8]
 800a5bc:	1b9b      	subs	r3, r3, r6
 800a5be:	60a3      	str	r3, [r4, #8]
 800a5c0:	6823      	ldr	r3, [r4, #0]
 800a5c2:	4433      	add	r3, r6
 800a5c4:	6023      	str	r3, [r4, #0]
 800a5c6:	2000      	movs	r0, #0
 800a5c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a5cc:	462a      	mov	r2, r5
 800a5ce:	f000 fd85 	bl	800b0dc <_realloc_r>
 800a5d2:	4606      	mov	r6, r0
 800a5d4:	2800      	cmp	r0, #0
 800a5d6:	d1e0      	bne.n	800a59a <__ssputs_r+0x5a>
 800a5d8:	6921      	ldr	r1, [r4, #16]
 800a5da:	4650      	mov	r0, sl
 800a5dc:	f7ff feb8 	bl	800a350 <_free_r>
 800a5e0:	230c      	movs	r3, #12
 800a5e2:	f8ca 3000 	str.w	r3, [sl]
 800a5e6:	89a3      	ldrh	r3, [r4, #12]
 800a5e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a5ec:	81a3      	strh	r3, [r4, #12]
 800a5ee:	f04f 30ff 	mov.w	r0, #4294967295
 800a5f2:	e7e9      	b.n	800a5c8 <__ssputs_r+0x88>

0800a5f4 <_svfiprintf_r>:
 800a5f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5f8:	4698      	mov	r8, r3
 800a5fa:	898b      	ldrh	r3, [r1, #12]
 800a5fc:	061b      	lsls	r3, r3, #24
 800a5fe:	b09d      	sub	sp, #116	; 0x74
 800a600:	4607      	mov	r7, r0
 800a602:	460d      	mov	r5, r1
 800a604:	4614      	mov	r4, r2
 800a606:	d50e      	bpl.n	800a626 <_svfiprintf_r+0x32>
 800a608:	690b      	ldr	r3, [r1, #16]
 800a60a:	b963      	cbnz	r3, 800a626 <_svfiprintf_r+0x32>
 800a60c:	2140      	movs	r1, #64	; 0x40
 800a60e:	f7ff ff0b 	bl	800a428 <_malloc_r>
 800a612:	6028      	str	r0, [r5, #0]
 800a614:	6128      	str	r0, [r5, #16]
 800a616:	b920      	cbnz	r0, 800a622 <_svfiprintf_r+0x2e>
 800a618:	230c      	movs	r3, #12
 800a61a:	603b      	str	r3, [r7, #0]
 800a61c:	f04f 30ff 	mov.w	r0, #4294967295
 800a620:	e0d0      	b.n	800a7c4 <_svfiprintf_r+0x1d0>
 800a622:	2340      	movs	r3, #64	; 0x40
 800a624:	616b      	str	r3, [r5, #20]
 800a626:	2300      	movs	r3, #0
 800a628:	9309      	str	r3, [sp, #36]	; 0x24
 800a62a:	2320      	movs	r3, #32
 800a62c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a630:	f8cd 800c 	str.w	r8, [sp, #12]
 800a634:	2330      	movs	r3, #48	; 0x30
 800a636:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800a7dc <_svfiprintf_r+0x1e8>
 800a63a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a63e:	f04f 0901 	mov.w	r9, #1
 800a642:	4623      	mov	r3, r4
 800a644:	469a      	mov	sl, r3
 800a646:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a64a:	b10a      	cbz	r2, 800a650 <_svfiprintf_r+0x5c>
 800a64c:	2a25      	cmp	r2, #37	; 0x25
 800a64e:	d1f9      	bne.n	800a644 <_svfiprintf_r+0x50>
 800a650:	ebba 0b04 	subs.w	fp, sl, r4
 800a654:	d00b      	beq.n	800a66e <_svfiprintf_r+0x7a>
 800a656:	465b      	mov	r3, fp
 800a658:	4622      	mov	r2, r4
 800a65a:	4629      	mov	r1, r5
 800a65c:	4638      	mov	r0, r7
 800a65e:	f7ff ff6f 	bl	800a540 <__ssputs_r>
 800a662:	3001      	adds	r0, #1
 800a664:	f000 80a9 	beq.w	800a7ba <_svfiprintf_r+0x1c6>
 800a668:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a66a:	445a      	add	r2, fp
 800a66c:	9209      	str	r2, [sp, #36]	; 0x24
 800a66e:	f89a 3000 	ldrb.w	r3, [sl]
 800a672:	2b00      	cmp	r3, #0
 800a674:	f000 80a1 	beq.w	800a7ba <_svfiprintf_r+0x1c6>
 800a678:	2300      	movs	r3, #0
 800a67a:	f04f 32ff 	mov.w	r2, #4294967295
 800a67e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a682:	f10a 0a01 	add.w	sl, sl, #1
 800a686:	9304      	str	r3, [sp, #16]
 800a688:	9307      	str	r3, [sp, #28]
 800a68a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a68e:	931a      	str	r3, [sp, #104]	; 0x68
 800a690:	4654      	mov	r4, sl
 800a692:	2205      	movs	r2, #5
 800a694:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a698:	4850      	ldr	r0, [pc, #320]	; (800a7dc <_svfiprintf_r+0x1e8>)
 800a69a:	f7f5 fd99 	bl	80001d0 <memchr>
 800a69e:	9a04      	ldr	r2, [sp, #16]
 800a6a0:	b9d8      	cbnz	r0, 800a6da <_svfiprintf_r+0xe6>
 800a6a2:	06d0      	lsls	r0, r2, #27
 800a6a4:	bf44      	itt	mi
 800a6a6:	2320      	movmi	r3, #32
 800a6a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a6ac:	0711      	lsls	r1, r2, #28
 800a6ae:	bf44      	itt	mi
 800a6b0:	232b      	movmi	r3, #43	; 0x2b
 800a6b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a6b6:	f89a 3000 	ldrb.w	r3, [sl]
 800a6ba:	2b2a      	cmp	r3, #42	; 0x2a
 800a6bc:	d015      	beq.n	800a6ea <_svfiprintf_r+0xf6>
 800a6be:	9a07      	ldr	r2, [sp, #28]
 800a6c0:	4654      	mov	r4, sl
 800a6c2:	2000      	movs	r0, #0
 800a6c4:	f04f 0c0a 	mov.w	ip, #10
 800a6c8:	4621      	mov	r1, r4
 800a6ca:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a6ce:	3b30      	subs	r3, #48	; 0x30
 800a6d0:	2b09      	cmp	r3, #9
 800a6d2:	d94d      	bls.n	800a770 <_svfiprintf_r+0x17c>
 800a6d4:	b1b0      	cbz	r0, 800a704 <_svfiprintf_r+0x110>
 800a6d6:	9207      	str	r2, [sp, #28]
 800a6d8:	e014      	b.n	800a704 <_svfiprintf_r+0x110>
 800a6da:	eba0 0308 	sub.w	r3, r0, r8
 800a6de:	fa09 f303 	lsl.w	r3, r9, r3
 800a6e2:	4313      	orrs	r3, r2
 800a6e4:	9304      	str	r3, [sp, #16]
 800a6e6:	46a2      	mov	sl, r4
 800a6e8:	e7d2      	b.n	800a690 <_svfiprintf_r+0x9c>
 800a6ea:	9b03      	ldr	r3, [sp, #12]
 800a6ec:	1d19      	adds	r1, r3, #4
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	9103      	str	r1, [sp, #12]
 800a6f2:	2b00      	cmp	r3, #0
 800a6f4:	bfbb      	ittet	lt
 800a6f6:	425b      	neglt	r3, r3
 800a6f8:	f042 0202 	orrlt.w	r2, r2, #2
 800a6fc:	9307      	strge	r3, [sp, #28]
 800a6fe:	9307      	strlt	r3, [sp, #28]
 800a700:	bfb8      	it	lt
 800a702:	9204      	strlt	r2, [sp, #16]
 800a704:	7823      	ldrb	r3, [r4, #0]
 800a706:	2b2e      	cmp	r3, #46	; 0x2e
 800a708:	d10c      	bne.n	800a724 <_svfiprintf_r+0x130>
 800a70a:	7863      	ldrb	r3, [r4, #1]
 800a70c:	2b2a      	cmp	r3, #42	; 0x2a
 800a70e:	d134      	bne.n	800a77a <_svfiprintf_r+0x186>
 800a710:	9b03      	ldr	r3, [sp, #12]
 800a712:	1d1a      	adds	r2, r3, #4
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	9203      	str	r2, [sp, #12]
 800a718:	2b00      	cmp	r3, #0
 800a71a:	bfb8      	it	lt
 800a71c:	f04f 33ff 	movlt.w	r3, #4294967295
 800a720:	3402      	adds	r4, #2
 800a722:	9305      	str	r3, [sp, #20]
 800a724:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800a7ec <_svfiprintf_r+0x1f8>
 800a728:	7821      	ldrb	r1, [r4, #0]
 800a72a:	2203      	movs	r2, #3
 800a72c:	4650      	mov	r0, sl
 800a72e:	f7f5 fd4f 	bl	80001d0 <memchr>
 800a732:	b138      	cbz	r0, 800a744 <_svfiprintf_r+0x150>
 800a734:	9b04      	ldr	r3, [sp, #16]
 800a736:	eba0 000a 	sub.w	r0, r0, sl
 800a73a:	2240      	movs	r2, #64	; 0x40
 800a73c:	4082      	lsls	r2, r0
 800a73e:	4313      	orrs	r3, r2
 800a740:	3401      	adds	r4, #1
 800a742:	9304      	str	r3, [sp, #16]
 800a744:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a748:	4825      	ldr	r0, [pc, #148]	; (800a7e0 <_svfiprintf_r+0x1ec>)
 800a74a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a74e:	2206      	movs	r2, #6
 800a750:	f7f5 fd3e 	bl	80001d0 <memchr>
 800a754:	2800      	cmp	r0, #0
 800a756:	d038      	beq.n	800a7ca <_svfiprintf_r+0x1d6>
 800a758:	4b22      	ldr	r3, [pc, #136]	; (800a7e4 <_svfiprintf_r+0x1f0>)
 800a75a:	bb1b      	cbnz	r3, 800a7a4 <_svfiprintf_r+0x1b0>
 800a75c:	9b03      	ldr	r3, [sp, #12]
 800a75e:	3307      	adds	r3, #7
 800a760:	f023 0307 	bic.w	r3, r3, #7
 800a764:	3308      	adds	r3, #8
 800a766:	9303      	str	r3, [sp, #12]
 800a768:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a76a:	4433      	add	r3, r6
 800a76c:	9309      	str	r3, [sp, #36]	; 0x24
 800a76e:	e768      	b.n	800a642 <_svfiprintf_r+0x4e>
 800a770:	fb0c 3202 	mla	r2, ip, r2, r3
 800a774:	460c      	mov	r4, r1
 800a776:	2001      	movs	r0, #1
 800a778:	e7a6      	b.n	800a6c8 <_svfiprintf_r+0xd4>
 800a77a:	2300      	movs	r3, #0
 800a77c:	3401      	adds	r4, #1
 800a77e:	9305      	str	r3, [sp, #20]
 800a780:	4619      	mov	r1, r3
 800a782:	f04f 0c0a 	mov.w	ip, #10
 800a786:	4620      	mov	r0, r4
 800a788:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a78c:	3a30      	subs	r2, #48	; 0x30
 800a78e:	2a09      	cmp	r2, #9
 800a790:	d903      	bls.n	800a79a <_svfiprintf_r+0x1a6>
 800a792:	2b00      	cmp	r3, #0
 800a794:	d0c6      	beq.n	800a724 <_svfiprintf_r+0x130>
 800a796:	9105      	str	r1, [sp, #20]
 800a798:	e7c4      	b.n	800a724 <_svfiprintf_r+0x130>
 800a79a:	fb0c 2101 	mla	r1, ip, r1, r2
 800a79e:	4604      	mov	r4, r0
 800a7a0:	2301      	movs	r3, #1
 800a7a2:	e7f0      	b.n	800a786 <_svfiprintf_r+0x192>
 800a7a4:	ab03      	add	r3, sp, #12
 800a7a6:	9300      	str	r3, [sp, #0]
 800a7a8:	462a      	mov	r2, r5
 800a7aa:	4b0f      	ldr	r3, [pc, #60]	; (800a7e8 <_svfiprintf_r+0x1f4>)
 800a7ac:	a904      	add	r1, sp, #16
 800a7ae:	4638      	mov	r0, r7
 800a7b0:	f3af 8000 	nop.w
 800a7b4:	1c42      	adds	r2, r0, #1
 800a7b6:	4606      	mov	r6, r0
 800a7b8:	d1d6      	bne.n	800a768 <_svfiprintf_r+0x174>
 800a7ba:	89ab      	ldrh	r3, [r5, #12]
 800a7bc:	065b      	lsls	r3, r3, #25
 800a7be:	f53f af2d 	bmi.w	800a61c <_svfiprintf_r+0x28>
 800a7c2:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a7c4:	b01d      	add	sp, #116	; 0x74
 800a7c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a7ca:	ab03      	add	r3, sp, #12
 800a7cc:	9300      	str	r3, [sp, #0]
 800a7ce:	462a      	mov	r2, r5
 800a7d0:	4b05      	ldr	r3, [pc, #20]	; (800a7e8 <_svfiprintf_r+0x1f4>)
 800a7d2:	a904      	add	r1, sp, #16
 800a7d4:	4638      	mov	r0, r7
 800a7d6:	f000 f9bd 	bl	800ab54 <_printf_i>
 800a7da:	e7eb      	b.n	800a7b4 <_svfiprintf_r+0x1c0>
 800a7dc:	0800b445 	.word	0x0800b445
 800a7e0:	0800b44f 	.word	0x0800b44f
 800a7e4:	00000000 	.word	0x00000000
 800a7e8:	0800a541 	.word	0x0800a541
 800a7ec:	0800b44b 	.word	0x0800b44b

0800a7f0 <__sfputc_r>:
 800a7f0:	6893      	ldr	r3, [r2, #8]
 800a7f2:	3b01      	subs	r3, #1
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	b410      	push	{r4}
 800a7f8:	6093      	str	r3, [r2, #8]
 800a7fa:	da08      	bge.n	800a80e <__sfputc_r+0x1e>
 800a7fc:	6994      	ldr	r4, [r2, #24]
 800a7fe:	42a3      	cmp	r3, r4
 800a800:	db01      	blt.n	800a806 <__sfputc_r+0x16>
 800a802:	290a      	cmp	r1, #10
 800a804:	d103      	bne.n	800a80e <__sfputc_r+0x1e>
 800a806:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a80a:	f000 bba7 	b.w	800af5c <__swbuf_r>
 800a80e:	6813      	ldr	r3, [r2, #0]
 800a810:	1c58      	adds	r0, r3, #1
 800a812:	6010      	str	r0, [r2, #0]
 800a814:	7019      	strb	r1, [r3, #0]
 800a816:	4608      	mov	r0, r1
 800a818:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a81c:	4770      	bx	lr

0800a81e <__sfputs_r>:
 800a81e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a820:	4606      	mov	r6, r0
 800a822:	460f      	mov	r7, r1
 800a824:	4614      	mov	r4, r2
 800a826:	18d5      	adds	r5, r2, r3
 800a828:	42ac      	cmp	r4, r5
 800a82a:	d101      	bne.n	800a830 <__sfputs_r+0x12>
 800a82c:	2000      	movs	r0, #0
 800a82e:	e007      	b.n	800a840 <__sfputs_r+0x22>
 800a830:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a834:	463a      	mov	r2, r7
 800a836:	4630      	mov	r0, r6
 800a838:	f7ff ffda 	bl	800a7f0 <__sfputc_r>
 800a83c:	1c43      	adds	r3, r0, #1
 800a83e:	d1f3      	bne.n	800a828 <__sfputs_r+0xa>
 800a840:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a844 <_vfiprintf_r>:
 800a844:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a848:	460d      	mov	r5, r1
 800a84a:	b09d      	sub	sp, #116	; 0x74
 800a84c:	4614      	mov	r4, r2
 800a84e:	4698      	mov	r8, r3
 800a850:	4606      	mov	r6, r0
 800a852:	b118      	cbz	r0, 800a85c <_vfiprintf_r+0x18>
 800a854:	6a03      	ldr	r3, [r0, #32]
 800a856:	b90b      	cbnz	r3, 800a85c <_vfiprintf_r+0x18>
 800a858:	f7ff fc3e 	bl	800a0d8 <__sinit>
 800a85c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a85e:	07d9      	lsls	r1, r3, #31
 800a860:	d405      	bmi.n	800a86e <_vfiprintf_r+0x2a>
 800a862:	89ab      	ldrh	r3, [r5, #12]
 800a864:	059a      	lsls	r2, r3, #22
 800a866:	d402      	bmi.n	800a86e <_vfiprintf_r+0x2a>
 800a868:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a86a:	f7ff fd61 	bl	800a330 <__retarget_lock_acquire_recursive>
 800a86e:	89ab      	ldrh	r3, [r5, #12]
 800a870:	071b      	lsls	r3, r3, #28
 800a872:	d501      	bpl.n	800a878 <_vfiprintf_r+0x34>
 800a874:	692b      	ldr	r3, [r5, #16]
 800a876:	b99b      	cbnz	r3, 800a8a0 <_vfiprintf_r+0x5c>
 800a878:	4629      	mov	r1, r5
 800a87a:	4630      	mov	r0, r6
 800a87c:	f000 fbac 	bl	800afd8 <__swsetup_r>
 800a880:	b170      	cbz	r0, 800a8a0 <_vfiprintf_r+0x5c>
 800a882:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a884:	07dc      	lsls	r4, r3, #31
 800a886:	d504      	bpl.n	800a892 <_vfiprintf_r+0x4e>
 800a888:	f04f 30ff 	mov.w	r0, #4294967295
 800a88c:	b01d      	add	sp, #116	; 0x74
 800a88e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a892:	89ab      	ldrh	r3, [r5, #12]
 800a894:	0598      	lsls	r0, r3, #22
 800a896:	d4f7      	bmi.n	800a888 <_vfiprintf_r+0x44>
 800a898:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a89a:	f7ff fd4a 	bl	800a332 <__retarget_lock_release_recursive>
 800a89e:	e7f3      	b.n	800a888 <_vfiprintf_r+0x44>
 800a8a0:	2300      	movs	r3, #0
 800a8a2:	9309      	str	r3, [sp, #36]	; 0x24
 800a8a4:	2320      	movs	r3, #32
 800a8a6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a8aa:	f8cd 800c 	str.w	r8, [sp, #12]
 800a8ae:	2330      	movs	r3, #48	; 0x30
 800a8b0:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800aa64 <_vfiprintf_r+0x220>
 800a8b4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a8b8:	f04f 0901 	mov.w	r9, #1
 800a8bc:	4623      	mov	r3, r4
 800a8be:	469a      	mov	sl, r3
 800a8c0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a8c4:	b10a      	cbz	r2, 800a8ca <_vfiprintf_r+0x86>
 800a8c6:	2a25      	cmp	r2, #37	; 0x25
 800a8c8:	d1f9      	bne.n	800a8be <_vfiprintf_r+0x7a>
 800a8ca:	ebba 0b04 	subs.w	fp, sl, r4
 800a8ce:	d00b      	beq.n	800a8e8 <_vfiprintf_r+0xa4>
 800a8d0:	465b      	mov	r3, fp
 800a8d2:	4622      	mov	r2, r4
 800a8d4:	4629      	mov	r1, r5
 800a8d6:	4630      	mov	r0, r6
 800a8d8:	f7ff ffa1 	bl	800a81e <__sfputs_r>
 800a8dc:	3001      	adds	r0, #1
 800a8de:	f000 80a9 	beq.w	800aa34 <_vfiprintf_r+0x1f0>
 800a8e2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a8e4:	445a      	add	r2, fp
 800a8e6:	9209      	str	r2, [sp, #36]	; 0x24
 800a8e8:	f89a 3000 	ldrb.w	r3, [sl]
 800a8ec:	2b00      	cmp	r3, #0
 800a8ee:	f000 80a1 	beq.w	800aa34 <_vfiprintf_r+0x1f0>
 800a8f2:	2300      	movs	r3, #0
 800a8f4:	f04f 32ff 	mov.w	r2, #4294967295
 800a8f8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a8fc:	f10a 0a01 	add.w	sl, sl, #1
 800a900:	9304      	str	r3, [sp, #16]
 800a902:	9307      	str	r3, [sp, #28]
 800a904:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a908:	931a      	str	r3, [sp, #104]	; 0x68
 800a90a:	4654      	mov	r4, sl
 800a90c:	2205      	movs	r2, #5
 800a90e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a912:	4854      	ldr	r0, [pc, #336]	; (800aa64 <_vfiprintf_r+0x220>)
 800a914:	f7f5 fc5c 	bl	80001d0 <memchr>
 800a918:	9a04      	ldr	r2, [sp, #16]
 800a91a:	b9d8      	cbnz	r0, 800a954 <_vfiprintf_r+0x110>
 800a91c:	06d1      	lsls	r1, r2, #27
 800a91e:	bf44      	itt	mi
 800a920:	2320      	movmi	r3, #32
 800a922:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a926:	0713      	lsls	r3, r2, #28
 800a928:	bf44      	itt	mi
 800a92a:	232b      	movmi	r3, #43	; 0x2b
 800a92c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a930:	f89a 3000 	ldrb.w	r3, [sl]
 800a934:	2b2a      	cmp	r3, #42	; 0x2a
 800a936:	d015      	beq.n	800a964 <_vfiprintf_r+0x120>
 800a938:	9a07      	ldr	r2, [sp, #28]
 800a93a:	4654      	mov	r4, sl
 800a93c:	2000      	movs	r0, #0
 800a93e:	f04f 0c0a 	mov.w	ip, #10
 800a942:	4621      	mov	r1, r4
 800a944:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a948:	3b30      	subs	r3, #48	; 0x30
 800a94a:	2b09      	cmp	r3, #9
 800a94c:	d94d      	bls.n	800a9ea <_vfiprintf_r+0x1a6>
 800a94e:	b1b0      	cbz	r0, 800a97e <_vfiprintf_r+0x13a>
 800a950:	9207      	str	r2, [sp, #28]
 800a952:	e014      	b.n	800a97e <_vfiprintf_r+0x13a>
 800a954:	eba0 0308 	sub.w	r3, r0, r8
 800a958:	fa09 f303 	lsl.w	r3, r9, r3
 800a95c:	4313      	orrs	r3, r2
 800a95e:	9304      	str	r3, [sp, #16]
 800a960:	46a2      	mov	sl, r4
 800a962:	e7d2      	b.n	800a90a <_vfiprintf_r+0xc6>
 800a964:	9b03      	ldr	r3, [sp, #12]
 800a966:	1d19      	adds	r1, r3, #4
 800a968:	681b      	ldr	r3, [r3, #0]
 800a96a:	9103      	str	r1, [sp, #12]
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	bfbb      	ittet	lt
 800a970:	425b      	neglt	r3, r3
 800a972:	f042 0202 	orrlt.w	r2, r2, #2
 800a976:	9307      	strge	r3, [sp, #28]
 800a978:	9307      	strlt	r3, [sp, #28]
 800a97a:	bfb8      	it	lt
 800a97c:	9204      	strlt	r2, [sp, #16]
 800a97e:	7823      	ldrb	r3, [r4, #0]
 800a980:	2b2e      	cmp	r3, #46	; 0x2e
 800a982:	d10c      	bne.n	800a99e <_vfiprintf_r+0x15a>
 800a984:	7863      	ldrb	r3, [r4, #1]
 800a986:	2b2a      	cmp	r3, #42	; 0x2a
 800a988:	d134      	bne.n	800a9f4 <_vfiprintf_r+0x1b0>
 800a98a:	9b03      	ldr	r3, [sp, #12]
 800a98c:	1d1a      	adds	r2, r3, #4
 800a98e:	681b      	ldr	r3, [r3, #0]
 800a990:	9203      	str	r2, [sp, #12]
 800a992:	2b00      	cmp	r3, #0
 800a994:	bfb8      	it	lt
 800a996:	f04f 33ff 	movlt.w	r3, #4294967295
 800a99a:	3402      	adds	r4, #2
 800a99c:	9305      	str	r3, [sp, #20]
 800a99e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800aa74 <_vfiprintf_r+0x230>
 800a9a2:	7821      	ldrb	r1, [r4, #0]
 800a9a4:	2203      	movs	r2, #3
 800a9a6:	4650      	mov	r0, sl
 800a9a8:	f7f5 fc12 	bl	80001d0 <memchr>
 800a9ac:	b138      	cbz	r0, 800a9be <_vfiprintf_r+0x17a>
 800a9ae:	9b04      	ldr	r3, [sp, #16]
 800a9b0:	eba0 000a 	sub.w	r0, r0, sl
 800a9b4:	2240      	movs	r2, #64	; 0x40
 800a9b6:	4082      	lsls	r2, r0
 800a9b8:	4313      	orrs	r3, r2
 800a9ba:	3401      	adds	r4, #1
 800a9bc:	9304      	str	r3, [sp, #16]
 800a9be:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a9c2:	4829      	ldr	r0, [pc, #164]	; (800aa68 <_vfiprintf_r+0x224>)
 800a9c4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a9c8:	2206      	movs	r2, #6
 800a9ca:	f7f5 fc01 	bl	80001d0 <memchr>
 800a9ce:	2800      	cmp	r0, #0
 800a9d0:	d03f      	beq.n	800aa52 <_vfiprintf_r+0x20e>
 800a9d2:	4b26      	ldr	r3, [pc, #152]	; (800aa6c <_vfiprintf_r+0x228>)
 800a9d4:	bb1b      	cbnz	r3, 800aa1e <_vfiprintf_r+0x1da>
 800a9d6:	9b03      	ldr	r3, [sp, #12]
 800a9d8:	3307      	adds	r3, #7
 800a9da:	f023 0307 	bic.w	r3, r3, #7
 800a9de:	3308      	adds	r3, #8
 800a9e0:	9303      	str	r3, [sp, #12]
 800a9e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a9e4:	443b      	add	r3, r7
 800a9e6:	9309      	str	r3, [sp, #36]	; 0x24
 800a9e8:	e768      	b.n	800a8bc <_vfiprintf_r+0x78>
 800a9ea:	fb0c 3202 	mla	r2, ip, r2, r3
 800a9ee:	460c      	mov	r4, r1
 800a9f0:	2001      	movs	r0, #1
 800a9f2:	e7a6      	b.n	800a942 <_vfiprintf_r+0xfe>
 800a9f4:	2300      	movs	r3, #0
 800a9f6:	3401      	adds	r4, #1
 800a9f8:	9305      	str	r3, [sp, #20]
 800a9fa:	4619      	mov	r1, r3
 800a9fc:	f04f 0c0a 	mov.w	ip, #10
 800aa00:	4620      	mov	r0, r4
 800aa02:	f810 2b01 	ldrb.w	r2, [r0], #1
 800aa06:	3a30      	subs	r2, #48	; 0x30
 800aa08:	2a09      	cmp	r2, #9
 800aa0a:	d903      	bls.n	800aa14 <_vfiprintf_r+0x1d0>
 800aa0c:	2b00      	cmp	r3, #0
 800aa0e:	d0c6      	beq.n	800a99e <_vfiprintf_r+0x15a>
 800aa10:	9105      	str	r1, [sp, #20]
 800aa12:	e7c4      	b.n	800a99e <_vfiprintf_r+0x15a>
 800aa14:	fb0c 2101 	mla	r1, ip, r1, r2
 800aa18:	4604      	mov	r4, r0
 800aa1a:	2301      	movs	r3, #1
 800aa1c:	e7f0      	b.n	800aa00 <_vfiprintf_r+0x1bc>
 800aa1e:	ab03      	add	r3, sp, #12
 800aa20:	9300      	str	r3, [sp, #0]
 800aa22:	462a      	mov	r2, r5
 800aa24:	4b12      	ldr	r3, [pc, #72]	; (800aa70 <_vfiprintf_r+0x22c>)
 800aa26:	a904      	add	r1, sp, #16
 800aa28:	4630      	mov	r0, r6
 800aa2a:	f3af 8000 	nop.w
 800aa2e:	4607      	mov	r7, r0
 800aa30:	1c78      	adds	r0, r7, #1
 800aa32:	d1d6      	bne.n	800a9e2 <_vfiprintf_r+0x19e>
 800aa34:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800aa36:	07d9      	lsls	r1, r3, #31
 800aa38:	d405      	bmi.n	800aa46 <_vfiprintf_r+0x202>
 800aa3a:	89ab      	ldrh	r3, [r5, #12]
 800aa3c:	059a      	lsls	r2, r3, #22
 800aa3e:	d402      	bmi.n	800aa46 <_vfiprintf_r+0x202>
 800aa40:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800aa42:	f7ff fc76 	bl	800a332 <__retarget_lock_release_recursive>
 800aa46:	89ab      	ldrh	r3, [r5, #12]
 800aa48:	065b      	lsls	r3, r3, #25
 800aa4a:	f53f af1d 	bmi.w	800a888 <_vfiprintf_r+0x44>
 800aa4e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800aa50:	e71c      	b.n	800a88c <_vfiprintf_r+0x48>
 800aa52:	ab03      	add	r3, sp, #12
 800aa54:	9300      	str	r3, [sp, #0]
 800aa56:	462a      	mov	r2, r5
 800aa58:	4b05      	ldr	r3, [pc, #20]	; (800aa70 <_vfiprintf_r+0x22c>)
 800aa5a:	a904      	add	r1, sp, #16
 800aa5c:	4630      	mov	r0, r6
 800aa5e:	f000 f879 	bl	800ab54 <_printf_i>
 800aa62:	e7e4      	b.n	800aa2e <_vfiprintf_r+0x1ea>
 800aa64:	0800b445 	.word	0x0800b445
 800aa68:	0800b44f 	.word	0x0800b44f
 800aa6c:	00000000 	.word	0x00000000
 800aa70:	0800a81f 	.word	0x0800a81f
 800aa74:	0800b44b 	.word	0x0800b44b

0800aa78 <_printf_common>:
 800aa78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aa7c:	4616      	mov	r6, r2
 800aa7e:	4699      	mov	r9, r3
 800aa80:	688a      	ldr	r2, [r1, #8]
 800aa82:	690b      	ldr	r3, [r1, #16]
 800aa84:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800aa88:	4293      	cmp	r3, r2
 800aa8a:	bfb8      	it	lt
 800aa8c:	4613      	movlt	r3, r2
 800aa8e:	6033      	str	r3, [r6, #0]
 800aa90:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800aa94:	4607      	mov	r7, r0
 800aa96:	460c      	mov	r4, r1
 800aa98:	b10a      	cbz	r2, 800aa9e <_printf_common+0x26>
 800aa9a:	3301      	adds	r3, #1
 800aa9c:	6033      	str	r3, [r6, #0]
 800aa9e:	6823      	ldr	r3, [r4, #0]
 800aaa0:	0699      	lsls	r1, r3, #26
 800aaa2:	bf42      	ittt	mi
 800aaa4:	6833      	ldrmi	r3, [r6, #0]
 800aaa6:	3302      	addmi	r3, #2
 800aaa8:	6033      	strmi	r3, [r6, #0]
 800aaaa:	6825      	ldr	r5, [r4, #0]
 800aaac:	f015 0506 	ands.w	r5, r5, #6
 800aab0:	d106      	bne.n	800aac0 <_printf_common+0x48>
 800aab2:	f104 0a19 	add.w	sl, r4, #25
 800aab6:	68e3      	ldr	r3, [r4, #12]
 800aab8:	6832      	ldr	r2, [r6, #0]
 800aaba:	1a9b      	subs	r3, r3, r2
 800aabc:	42ab      	cmp	r3, r5
 800aabe:	dc26      	bgt.n	800ab0e <_printf_common+0x96>
 800aac0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800aac4:	1e13      	subs	r3, r2, #0
 800aac6:	6822      	ldr	r2, [r4, #0]
 800aac8:	bf18      	it	ne
 800aaca:	2301      	movne	r3, #1
 800aacc:	0692      	lsls	r2, r2, #26
 800aace:	d42b      	bmi.n	800ab28 <_printf_common+0xb0>
 800aad0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800aad4:	4649      	mov	r1, r9
 800aad6:	4638      	mov	r0, r7
 800aad8:	47c0      	blx	r8
 800aada:	3001      	adds	r0, #1
 800aadc:	d01e      	beq.n	800ab1c <_printf_common+0xa4>
 800aade:	6823      	ldr	r3, [r4, #0]
 800aae0:	6922      	ldr	r2, [r4, #16]
 800aae2:	f003 0306 	and.w	r3, r3, #6
 800aae6:	2b04      	cmp	r3, #4
 800aae8:	bf02      	ittt	eq
 800aaea:	68e5      	ldreq	r5, [r4, #12]
 800aaec:	6833      	ldreq	r3, [r6, #0]
 800aaee:	1aed      	subeq	r5, r5, r3
 800aaf0:	68a3      	ldr	r3, [r4, #8]
 800aaf2:	bf0c      	ite	eq
 800aaf4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800aaf8:	2500      	movne	r5, #0
 800aafa:	4293      	cmp	r3, r2
 800aafc:	bfc4      	itt	gt
 800aafe:	1a9b      	subgt	r3, r3, r2
 800ab00:	18ed      	addgt	r5, r5, r3
 800ab02:	2600      	movs	r6, #0
 800ab04:	341a      	adds	r4, #26
 800ab06:	42b5      	cmp	r5, r6
 800ab08:	d11a      	bne.n	800ab40 <_printf_common+0xc8>
 800ab0a:	2000      	movs	r0, #0
 800ab0c:	e008      	b.n	800ab20 <_printf_common+0xa8>
 800ab0e:	2301      	movs	r3, #1
 800ab10:	4652      	mov	r2, sl
 800ab12:	4649      	mov	r1, r9
 800ab14:	4638      	mov	r0, r7
 800ab16:	47c0      	blx	r8
 800ab18:	3001      	adds	r0, #1
 800ab1a:	d103      	bne.n	800ab24 <_printf_common+0xac>
 800ab1c:	f04f 30ff 	mov.w	r0, #4294967295
 800ab20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ab24:	3501      	adds	r5, #1
 800ab26:	e7c6      	b.n	800aab6 <_printf_common+0x3e>
 800ab28:	18e1      	adds	r1, r4, r3
 800ab2a:	1c5a      	adds	r2, r3, #1
 800ab2c:	2030      	movs	r0, #48	; 0x30
 800ab2e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ab32:	4422      	add	r2, r4
 800ab34:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ab38:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ab3c:	3302      	adds	r3, #2
 800ab3e:	e7c7      	b.n	800aad0 <_printf_common+0x58>
 800ab40:	2301      	movs	r3, #1
 800ab42:	4622      	mov	r2, r4
 800ab44:	4649      	mov	r1, r9
 800ab46:	4638      	mov	r0, r7
 800ab48:	47c0      	blx	r8
 800ab4a:	3001      	adds	r0, #1
 800ab4c:	d0e6      	beq.n	800ab1c <_printf_common+0xa4>
 800ab4e:	3601      	adds	r6, #1
 800ab50:	e7d9      	b.n	800ab06 <_printf_common+0x8e>
	...

0800ab54 <_printf_i>:
 800ab54:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ab58:	7e0f      	ldrb	r7, [r1, #24]
 800ab5a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ab5c:	2f78      	cmp	r7, #120	; 0x78
 800ab5e:	4691      	mov	r9, r2
 800ab60:	4680      	mov	r8, r0
 800ab62:	460c      	mov	r4, r1
 800ab64:	469a      	mov	sl, r3
 800ab66:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800ab6a:	d807      	bhi.n	800ab7c <_printf_i+0x28>
 800ab6c:	2f62      	cmp	r7, #98	; 0x62
 800ab6e:	d80a      	bhi.n	800ab86 <_printf_i+0x32>
 800ab70:	2f00      	cmp	r7, #0
 800ab72:	f000 80d4 	beq.w	800ad1e <_printf_i+0x1ca>
 800ab76:	2f58      	cmp	r7, #88	; 0x58
 800ab78:	f000 80c0 	beq.w	800acfc <_printf_i+0x1a8>
 800ab7c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ab80:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ab84:	e03a      	b.n	800abfc <_printf_i+0xa8>
 800ab86:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ab8a:	2b15      	cmp	r3, #21
 800ab8c:	d8f6      	bhi.n	800ab7c <_printf_i+0x28>
 800ab8e:	a101      	add	r1, pc, #4	; (adr r1, 800ab94 <_printf_i+0x40>)
 800ab90:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ab94:	0800abed 	.word	0x0800abed
 800ab98:	0800ac01 	.word	0x0800ac01
 800ab9c:	0800ab7d 	.word	0x0800ab7d
 800aba0:	0800ab7d 	.word	0x0800ab7d
 800aba4:	0800ab7d 	.word	0x0800ab7d
 800aba8:	0800ab7d 	.word	0x0800ab7d
 800abac:	0800ac01 	.word	0x0800ac01
 800abb0:	0800ab7d 	.word	0x0800ab7d
 800abb4:	0800ab7d 	.word	0x0800ab7d
 800abb8:	0800ab7d 	.word	0x0800ab7d
 800abbc:	0800ab7d 	.word	0x0800ab7d
 800abc0:	0800ad05 	.word	0x0800ad05
 800abc4:	0800ac2d 	.word	0x0800ac2d
 800abc8:	0800acbf 	.word	0x0800acbf
 800abcc:	0800ab7d 	.word	0x0800ab7d
 800abd0:	0800ab7d 	.word	0x0800ab7d
 800abd4:	0800ad27 	.word	0x0800ad27
 800abd8:	0800ab7d 	.word	0x0800ab7d
 800abdc:	0800ac2d 	.word	0x0800ac2d
 800abe0:	0800ab7d 	.word	0x0800ab7d
 800abe4:	0800ab7d 	.word	0x0800ab7d
 800abe8:	0800acc7 	.word	0x0800acc7
 800abec:	682b      	ldr	r3, [r5, #0]
 800abee:	1d1a      	adds	r2, r3, #4
 800abf0:	681b      	ldr	r3, [r3, #0]
 800abf2:	602a      	str	r2, [r5, #0]
 800abf4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800abf8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800abfc:	2301      	movs	r3, #1
 800abfe:	e09f      	b.n	800ad40 <_printf_i+0x1ec>
 800ac00:	6820      	ldr	r0, [r4, #0]
 800ac02:	682b      	ldr	r3, [r5, #0]
 800ac04:	0607      	lsls	r7, r0, #24
 800ac06:	f103 0104 	add.w	r1, r3, #4
 800ac0a:	6029      	str	r1, [r5, #0]
 800ac0c:	d501      	bpl.n	800ac12 <_printf_i+0xbe>
 800ac0e:	681e      	ldr	r6, [r3, #0]
 800ac10:	e003      	b.n	800ac1a <_printf_i+0xc6>
 800ac12:	0646      	lsls	r6, r0, #25
 800ac14:	d5fb      	bpl.n	800ac0e <_printf_i+0xba>
 800ac16:	f9b3 6000 	ldrsh.w	r6, [r3]
 800ac1a:	2e00      	cmp	r6, #0
 800ac1c:	da03      	bge.n	800ac26 <_printf_i+0xd2>
 800ac1e:	232d      	movs	r3, #45	; 0x2d
 800ac20:	4276      	negs	r6, r6
 800ac22:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ac26:	485a      	ldr	r0, [pc, #360]	; (800ad90 <_printf_i+0x23c>)
 800ac28:	230a      	movs	r3, #10
 800ac2a:	e012      	b.n	800ac52 <_printf_i+0xfe>
 800ac2c:	682b      	ldr	r3, [r5, #0]
 800ac2e:	6820      	ldr	r0, [r4, #0]
 800ac30:	1d19      	adds	r1, r3, #4
 800ac32:	6029      	str	r1, [r5, #0]
 800ac34:	0605      	lsls	r5, r0, #24
 800ac36:	d501      	bpl.n	800ac3c <_printf_i+0xe8>
 800ac38:	681e      	ldr	r6, [r3, #0]
 800ac3a:	e002      	b.n	800ac42 <_printf_i+0xee>
 800ac3c:	0641      	lsls	r1, r0, #25
 800ac3e:	d5fb      	bpl.n	800ac38 <_printf_i+0xe4>
 800ac40:	881e      	ldrh	r6, [r3, #0]
 800ac42:	4853      	ldr	r0, [pc, #332]	; (800ad90 <_printf_i+0x23c>)
 800ac44:	2f6f      	cmp	r7, #111	; 0x6f
 800ac46:	bf0c      	ite	eq
 800ac48:	2308      	moveq	r3, #8
 800ac4a:	230a      	movne	r3, #10
 800ac4c:	2100      	movs	r1, #0
 800ac4e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ac52:	6865      	ldr	r5, [r4, #4]
 800ac54:	60a5      	str	r5, [r4, #8]
 800ac56:	2d00      	cmp	r5, #0
 800ac58:	bfa2      	ittt	ge
 800ac5a:	6821      	ldrge	r1, [r4, #0]
 800ac5c:	f021 0104 	bicge.w	r1, r1, #4
 800ac60:	6021      	strge	r1, [r4, #0]
 800ac62:	b90e      	cbnz	r6, 800ac68 <_printf_i+0x114>
 800ac64:	2d00      	cmp	r5, #0
 800ac66:	d04b      	beq.n	800ad00 <_printf_i+0x1ac>
 800ac68:	4615      	mov	r5, r2
 800ac6a:	fbb6 f1f3 	udiv	r1, r6, r3
 800ac6e:	fb03 6711 	mls	r7, r3, r1, r6
 800ac72:	5dc7      	ldrb	r7, [r0, r7]
 800ac74:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800ac78:	4637      	mov	r7, r6
 800ac7a:	42bb      	cmp	r3, r7
 800ac7c:	460e      	mov	r6, r1
 800ac7e:	d9f4      	bls.n	800ac6a <_printf_i+0x116>
 800ac80:	2b08      	cmp	r3, #8
 800ac82:	d10b      	bne.n	800ac9c <_printf_i+0x148>
 800ac84:	6823      	ldr	r3, [r4, #0]
 800ac86:	07de      	lsls	r6, r3, #31
 800ac88:	d508      	bpl.n	800ac9c <_printf_i+0x148>
 800ac8a:	6923      	ldr	r3, [r4, #16]
 800ac8c:	6861      	ldr	r1, [r4, #4]
 800ac8e:	4299      	cmp	r1, r3
 800ac90:	bfde      	ittt	le
 800ac92:	2330      	movle	r3, #48	; 0x30
 800ac94:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ac98:	f105 35ff 	addle.w	r5, r5, #4294967295
 800ac9c:	1b52      	subs	r2, r2, r5
 800ac9e:	6122      	str	r2, [r4, #16]
 800aca0:	f8cd a000 	str.w	sl, [sp]
 800aca4:	464b      	mov	r3, r9
 800aca6:	aa03      	add	r2, sp, #12
 800aca8:	4621      	mov	r1, r4
 800acaa:	4640      	mov	r0, r8
 800acac:	f7ff fee4 	bl	800aa78 <_printf_common>
 800acb0:	3001      	adds	r0, #1
 800acb2:	d14a      	bne.n	800ad4a <_printf_i+0x1f6>
 800acb4:	f04f 30ff 	mov.w	r0, #4294967295
 800acb8:	b004      	add	sp, #16
 800acba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800acbe:	6823      	ldr	r3, [r4, #0]
 800acc0:	f043 0320 	orr.w	r3, r3, #32
 800acc4:	6023      	str	r3, [r4, #0]
 800acc6:	4833      	ldr	r0, [pc, #204]	; (800ad94 <_printf_i+0x240>)
 800acc8:	2778      	movs	r7, #120	; 0x78
 800acca:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800acce:	6823      	ldr	r3, [r4, #0]
 800acd0:	6829      	ldr	r1, [r5, #0]
 800acd2:	061f      	lsls	r7, r3, #24
 800acd4:	f851 6b04 	ldr.w	r6, [r1], #4
 800acd8:	d402      	bmi.n	800ace0 <_printf_i+0x18c>
 800acda:	065f      	lsls	r7, r3, #25
 800acdc:	bf48      	it	mi
 800acde:	b2b6      	uxthmi	r6, r6
 800ace0:	07df      	lsls	r7, r3, #31
 800ace2:	bf48      	it	mi
 800ace4:	f043 0320 	orrmi.w	r3, r3, #32
 800ace8:	6029      	str	r1, [r5, #0]
 800acea:	bf48      	it	mi
 800acec:	6023      	strmi	r3, [r4, #0]
 800acee:	b91e      	cbnz	r6, 800acf8 <_printf_i+0x1a4>
 800acf0:	6823      	ldr	r3, [r4, #0]
 800acf2:	f023 0320 	bic.w	r3, r3, #32
 800acf6:	6023      	str	r3, [r4, #0]
 800acf8:	2310      	movs	r3, #16
 800acfa:	e7a7      	b.n	800ac4c <_printf_i+0xf8>
 800acfc:	4824      	ldr	r0, [pc, #144]	; (800ad90 <_printf_i+0x23c>)
 800acfe:	e7e4      	b.n	800acca <_printf_i+0x176>
 800ad00:	4615      	mov	r5, r2
 800ad02:	e7bd      	b.n	800ac80 <_printf_i+0x12c>
 800ad04:	682b      	ldr	r3, [r5, #0]
 800ad06:	6826      	ldr	r6, [r4, #0]
 800ad08:	6961      	ldr	r1, [r4, #20]
 800ad0a:	1d18      	adds	r0, r3, #4
 800ad0c:	6028      	str	r0, [r5, #0]
 800ad0e:	0635      	lsls	r5, r6, #24
 800ad10:	681b      	ldr	r3, [r3, #0]
 800ad12:	d501      	bpl.n	800ad18 <_printf_i+0x1c4>
 800ad14:	6019      	str	r1, [r3, #0]
 800ad16:	e002      	b.n	800ad1e <_printf_i+0x1ca>
 800ad18:	0670      	lsls	r0, r6, #25
 800ad1a:	d5fb      	bpl.n	800ad14 <_printf_i+0x1c0>
 800ad1c:	8019      	strh	r1, [r3, #0]
 800ad1e:	2300      	movs	r3, #0
 800ad20:	6123      	str	r3, [r4, #16]
 800ad22:	4615      	mov	r5, r2
 800ad24:	e7bc      	b.n	800aca0 <_printf_i+0x14c>
 800ad26:	682b      	ldr	r3, [r5, #0]
 800ad28:	1d1a      	adds	r2, r3, #4
 800ad2a:	602a      	str	r2, [r5, #0]
 800ad2c:	681d      	ldr	r5, [r3, #0]
 800ad2e:	6862      	ldr	r2, [r4, #4]
 800ad30:	2100      	movs	r1, #0
 800ad32:	4628      	mov	r0, r5
 800ad34:	f7f5 fa4c 	bl	80001d0 <memchr>
 800ad38:	b108      	cbz	r0, 800ad3e <_printf_i+0x1ea>
 800ad3a:	1b40      	subs	r0, r0, r5
 800ad3c:	6060      	str	r0, [r4, #4]
 800ad3e:	6863      	ldr	r3, [r4, #4]
 800ad40:	6123      	str	r3, [r4, #16]
 800ad42:	2300      	movs	r3, #0
 800ad44:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ad48:	e7aa      	b.n	800aca0 <_printf_i+0x14c>
 800ad4a:	6923      	ldr	r3, [r4, #16]
 800ad4c:	462a      	mov	r2, r5
 800ad4e:	4649      	mov	r1, r9
 800ad50:	4640      	mov	r0, r8
 800ad52:	47d0      	blx	sl
 800ad54:	3001      	adds	r0, #1
 800ad56:	d0ad      	beq.n	800acb4 <_printf_i+0x160>
 800ad58:	6823      	ldr	r3, [r4, #0]
 800ad5a:	079b      	lsls	r3, r3, #30
 800ad5c:	d413      	bmi.n	800ad86 <_printf_i+0x232>
 800ad5e:	68e0      	ldr	r0, [r4, #12]
 800ad60:	9b03      	ldr	r3, [sp, #12]
 800ad62:	4298      	cmp	r0, r3
 800ad64:	bfb8      	it	lt
 800ad66:	4618      	movlt	r0, r3
 800ad68:	e7a6      	b.n	800acb8 <_printf_i+0x164>
 800ad6a:	2301      	movs	r3, #1
 800ad6c:	4632      	mov	r2, r6
 800ad6e:	4649      	mov	r1, r9
 800ad70:	4640      	mov	r0, r8
 800ad72:	47d0      	blx	sl
 800ad74:	3001      	adds	r0, #1
 800ad76:	d09d      	beq.n	800acb4 <_printf_i+0x160>
 800ad78:	3501      	adds	r5, #1
 800ad7a:	68e3      	ldr	r3, [r4, #12]
 800ad7c:	9903      	ldr	r1, [sp, #12]
 800ad7e:	1a5b      	subs	r3, r3, r1
 800ad80:	42ab      	cmp	r3, r5
 800ad82:	dcf2      	bgt.n	800ad6a <_printf_i+0x216>
 800ad84:	e7eb      	b.n	800ad5e <_printf_i+0x20a>
 800ad86:	2500      	movs	r5, #0
 800ad88:	f104 0619 	add.w	r6, r4, #25
 800ad8c:	e7f5      	b.n	800ad7a <_printf_i+0x226>
 800ad8e:	bf00      	nop
 800ad90:	0800b456 	.word	0x0800b456
 800ad94:	0800b467 	.word	0x0800b467

0800ad98 <__sflush_r>:
 800ad98:	898a      	ldrh	r2, [r1, #12]
 800ad9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad9e:	4605      	mov	r5, r0
 800ada0:	0710      	lsls	r0, r2, #28
 800ada2:	460c      	mov	r4, r1
 800ada4:	d458      	bmi.n	800ae58 <__sflush_r+0xc0>
 800ada6:	684b      	ldr	r3, [r1, #4]
 800ada8:	2b00      	cmp	r3, #0
 800adaa:	dc05      	bgt.n	800adb8 <__sflush_r+0x20>
 800adac:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800adae:	2b00      	cmp	r3, #0
 800adb0:	dc02      	bgt.n	800adb8 <__sflush_r+0x20>
 800adb2:	2000      	movs	r0, #0
 800adb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800adb8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800adba:	2e00      	cmp	r6, #0
 800adbc:	d0f9      	beq.n	800adb2 <__sflush_r+0x1a>
 800adbe:	2300      	movs	r3, #0
 800adc0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800adc4:	682f      	ldr	r7, [r5, #0]
 800adc6:	6a21      	ldr	r1, [r4, #32]
 800adc8:	602b      	str	r3, [r5, #0]
 800adca:	d032      	beq.n	800ae32 <__sflush_r+0x9a>
 800adcc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800adce:	89a3      	ldrh	r3, [r4, #12]
 800add0:	075a      	lsls	r2, r3, #29
 800add2:	d505      	bpl.n	800ade0 <__sflush_r+0x48>
 800add4:	6863      	ldr	r3, [r4, #4]
 800add6:	1ac0      	subs	r0, r0, r3
 800add8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800adda:	b10b      	cbz	r3, 800ade0 <__sflush_r+0x48>
 800addc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800adde:	1ac0      	subs	r0, r0, r3
 800ade0:	2300      	movs	r3, #0
 800ade2:	4602      	mov	r2, r0
 800ade4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ade6:	6a21      	ldr	r1, [r4, #32]
 800ade8:	4628      	mov	r0, r5
 800adea:	47b0      	blx	r6
 800adec:	1c43      	adds	r3, r0, #1
 800adee:	89a3      	ldrh	r3, [r4, #12]
 800adf0:	d106      	bne.n	800ae00 <__sflush_r+0x68>
 800adf2:	6829      	ldr	r1, [r5, #0]
 800adf4:	291d      	cmp	r1, #29
 800adf6:	d82b      	bhi.n	800ae50 <__sflush_r+0xb8>
 800adf8:	4a29      	ldr	r2, [pc, #164]	; (800aea0 <__sflush_r+0x108>)
 800adfa:	410a      	asrs	r2, r1
 800adfc:	07d6      	lsls	r6, r2, #31
 800adfe:	d427      	bmi.n	800ae50 <__sflush_r+0xb8>
 800ae00:	2200      	movs	r2, #0
 800ae02:	6062      	str	r2, [r4, #4]
 800ae04:	04d9      	lsls	r1, r3, #19
 800ae06:	6922      	ldr	r2, [r4, #16]
 800ae08:	6022      	str	r2, [r4, #0]
 800ae0a:	d504      	bpl.n	800ae16 <__sflush_r+0x7e>
 800ae0c:	1c42      	adds	r2, r0, #1
 800ae0e:	d101      	bne.n	800ae14 <__sflush_r+0x7c>
 800ae10:	682b      	ldr	r3, [r5, #0]
 800ae12:	b903      	cbnz	r3, 800ae16 <__sflush_r+0x7e>
 800ae14:	6560      	str	r0, [r4, #84]	; 0x54
 800ae16:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ae18:	602f      	str	r7, [r5, #0]
 800ae1a:	2900      	cmp	r1, #0
 800ae1c:	d0c9      	beq.n	800adb2 <__sflush_r+0x1a>
 800ae1e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ae22:	4299      	cmp	r1, r3
 800ae24:	d002      	beq.n	800ae2c <__sflush_r+0x94>
 800ae26:	4628      	mov	r0, r5
 800ae28:	f7ff fa92 	bl	800a350 <_free_r>
 800ae2c:	2000      	movs	r0, #0
 800ae2e:	6360      	str	r0, [r4, #52]	; 0x34
 800ae30:	e7c0      	b.n	800adb4 <__sflush_r+0x1c>
 800ae32:	2301      	movs	r3, #1
 800ae34:	4628      	mov	r0, r5
 800ae36:	47b0      	blx	r6
 800ae38:	1c41      	adds	r1, r0, #1
 800ae3a:	d1c8      	bne.n	800adce <__sflush_r+0x36>
 800ae3c:	682b      	ldr	r3, [r5, #0]
 800ae3e:	2b00      	cmp	r3, #0
 800ae40:	d0c5      	beq.n	800adce <__sflush_r+0x36>
 800ae42:	2b1d      	cmp	r3, #29
 800ae44:	d001      	beq.n	800ae4a <__sflush_r+0xb2>
 800ae46:	2b16      	cmp	r3, #22
 800ae48:	d101      	bne.n	800ae4e <__sflush_r+0xb6>
 800ae4a:	602f      	str	r7, [r5, #0]
 800ae4c:	e7b1      	b.n	800adb2 <__sflush_r+0x1a>
 800ae4e:	89a3      	ldrh	r3, [r4, #12]
 800ae50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ae54:	81a3      	strh	r3, [r4, #12]
 800ae56:	e7ad      	b.n	800adb4 <__sflush_r+0x1c>
 800ae58:	690f      	ldr	r7, [r1, #16]
 800ae5a:	2f00      	cmp	r7, #0
 800ae5c:	d0a9      	beq.n	800adb2 <__sflush_r+0x1a>
 800ae5e:	0793      	lsls	r3, r2, #30
 800ae60:	680e      	ldr	r6, [r1, #0]
 800ae62:	bf08      	it	eq
 800ae64:	694b      	ldreq	r3, [r1, #20]
 800ae66:	600f      	str	r7, [r1, #0]
 800ae68:	bf18      	it	ne
 800ae6a:	2300      	movne	r3, #0
 800ae6c:	eba6 0807 	sub.w	r8, r6, r7
 800ae70:	608b      	str	r3, [r1, #8]
 800ae72:	f1b8 0f00 	cmp.w	r8, #0
 800ae76:	dd9c      	ble.n	800adb2 <__sflush_r+0x1a>
 800ae78:	6a21      	ldr	r1, [r4, #32]
 800ae7a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ae7c:	4643      	mov	r3, r8
 800ae7e:	463a      	mov	r2, r7
 800ae80:	4628      	mov	r0, r5
 800ae82:	47b0      	blx	r6
 800ae84:	2800      	cmp	r0, #0
 800ae86:	dc06      	bgt.n	800ae96 <__sflush_r+0xfe>
 800ae88:	89a3      	ldrh	r3, [r4, #12]
 800ae8a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ae8e:	81a3      	strh	r3, [r4, #12]
 800ae90:	f04f 30ff 	mov.w	r0, #4294967295
 800ae94:	e78e      	b.n	800adb4 <__sflush_r+0x1c>
 800ae96:	4407      	add	r7, r0
 800ae98:	eba8 0800 	sub.w	r8, r8, r0
 800ae9c:	e7e9      	b.n	800ae72 <__sflush_r+0xda>
 800ae9e:	bf00      	nop
 800aea0:	dfbffffe 	.word	0xdfbffffe

0800aea4 <_fflush_r>:
 800aea4:	b538      	push	{r3, r4, r5, lr}
 800aea6:	690b      	ldr	r3, [r1, #16]
 800aea8:	4605      	mov	r5, r0
 800aeaa:	460c      	mov	r4, r1
 800aeac:	b913      	cbnz	r3, 800aeb4 <_fflush_r+0x10>
 800aeae:	2500      	movs	r5, #0
 800aeb0:	4628      	mov	r0, r5
 800aeb2:	bd38      	pop	{r3, r4, r5, pc}
 800aeb4:	b118      	cbz	r0, 800aebe <_fflush_r+0x1a>
 800aeb6:	6a03      	ldr	r3, [r0, #32]
 800aeb8:	b90b      	cbnz	r3, 800aebe <_fflush_r+0x1a>
 800aeba:	f7ff f90d 	bl	800a0d8 <__sinit>
 800aebe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aec2:	2b00      	cmp	r3, #0
 800aec4:	d0f3      	beq.n	800aeae <_fflush_r+0xa>
 800aec6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800aec8:	07d0      	lsls	r0, r2, #31
 800aeca:	d404      	bmi.n	800aed6 <_fflush_r+0x32>
 800aecc:	0599      	lsls	r1, r3, #22
 800aece:	d402      	bmi.n	800aed6 <_fflush_r+0x32>
 800aed0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800aed2:	f7ff fa2d 	bl	800a330 <__retarget_lock_acquire_recursive>
 800aed6:	4628      	mov	r0, r5
 800aed8:	4621      	mov	r1, r4
 800aeda:	f7ff ff5d 	bl	800ad98 <__sflush_r>
 800aede:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800aee0:	07da      	lsls	r2, r3, #31
 800aee2:	4605      	mov	r5, r0
 800aee4:	d4e4      	bmi.n	800aeb0 <_fflush_r+0xc>
 800aee6:	89a3      	ldrh	r3, [r4, #12]
 800aee8:	059b      	lsls	r3, r3, #22
 800aeea:	d4e1      	bmi.n	800aeb0 <_fflush_r+0xc>
 800aeec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800aeee:	f7ff fa20 	bl	800a332 <__retarget_lock_release_recursive>
 800aef2:	e7dd      	b.n	800aeb0 <_fflush_r+0xc>

0800aef4 <_putc_r>:
 800aef4:	b570      	push	{r4, r5, r6, lr}
 800aef6:	460d      	mov	r5, r1
 800aef8:	4614      	mov	r4, r2
 800aefa:	4606      	mov	r6, r0
 800aefc:	b118      	cbz	r0, 800af06 <_putc_r+0x12>
 800aefe:	6a03      	ldr	r3, [r0, #32]
 800af00:	b90b      	cbnz	r3, 800af06 <_putc_r+0x12>
 800af02:	f7ff f8e9 	bl	800a0d8 <__sinit>
 800af06:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800af08:	07d8      	lsls	r0, r3, #31
 800af0a:	d405      	bmi.n	800af18 <_putc_r+0x24>
 800af0c:	89a3      	ldrh	r3, [r4, #12]
 800af0e:	0599      	lsls	r1, r3, #22
 800af10:	d402      	bmi.n	800af18 <_putc_r+0x24>
 800af12:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800af14:	f7ff fa0c 	bl	800a330 <__retarget_lock_acquire_recursive>
 800af18:	68a3      	ldr	r3, [r4, #8]
 800af1a:	3b01      	subs	r3, #1
 800af1c:	2b00      	cmp	r3, #0
 800af1e:	60a3      	str	r3, [r4, #8]
 800af20:	da05      	bge.n	800af2e <_putc_r+0x3a>
 800af22:	69a2      	ldr	r2, [r4, #24]
 800af24:	4293      	cmp	r3, r2
 800af26:	db12      	blt.n	800af4e <_putc_r+0x5a>
 800af28:	b2eb      	uxtb	r3, r5
 800af2a:	2b0a      	cmp	r3, #10
 800af2c:	d00f      	beq.n	800af4e <_putc_r+0x5a>
 800af2e:	6823      	ldr	r3, [r4, #0]
 800af30:	1c5a      	adds	r2, r3, #1
 800af32:	6022      	str	r2, [r4, #0]
 800af34:	701d      	strb	r5, [r3, #0]
 800af36:	b2ed      	uxtb	r5, r5
 800af38:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800af3a:	07da      	lsls	r2, r3, #31
 800af3c:	d405      	bmi.n	800af4a <_putc_r+0x56>
 800af3e:	89a3      	ldrh	r3, [r4, #12]
 800af40:	059b      	lsls	r3, r3, #22
 800af42:	d402      	bmi.n	800af4a <_putc_r+0x56>
 800af44:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800af46:	f7ff f9f4 	bl	800a332 <__retarget_lock_release_recursive>
 800af4a:	4628      	mov	r0, r5
 800af4c:	bd70      	pop	{r4, r5, r6, pc}
 800af4e:	4629      	mov	r1, r5
 800af50:	4622      	mov	r2, r4
 800af52:	4630      	mov	r0, r6
 800af54:	f000 f802 	bl	800af5c <__swbuf_r>
 800af58:	4605      	mov	r5, r0
 800af5a:	e7ed      	b.n	800af38 <_putc_r+0x44>

0800af5c <__swbuf_r>:
 800af5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af5e:	460e      	mov	r6, r1
 800af60:	4614      	mov	r4, r2
 800af62:	4605      	mov	r5, r0
 800af64:	b118      	cbz	r0, 800af6e <__swbuf_r+0x12>
 800af66:	6a03      	ldr	r3, [r0, #32]
 800af68:	b90b      	cbnz	r3, 800af6e <__swbuf_r+0x12>
 800af6a:	f7ff f8b5 	bl	800a0d8 <__sinit>
 800af6e:	69a3      	ldr	r3, [r4, #24]
 800af70:	60a3      	str	r3, [r4, #8]
 800af72:	89a3      	ldrh	r3, [r4, #12]
 800af74:	071a      	lsls	r2, r3, #28
 800af76:	d525      	bpl.n	800afc4 <__swbuf_r+0x68>
 800af78:	6923      	ldr	r3, [r4, #16]
 800af7a:	b31b      	cbz	r3, 800afc4 <__swbuf_r+0x68>
 800af7c:	6823      	ldr	r3, [r4, #0]
 800af7e:	6922      	ldr	r2, [r4, #16]
 800af80:	1a98      	subs	r0, r3, r2
 800af82:	6963      	ldr	r3, [r4, #20]
 800af84:	b2f6      	uxtb	r6, r6
 800af86:	4283      	cmp	r3, r0
 800af88:	4637      	mov	r7, r6
 800af8a:	dc04      	bgt.n	800af96 <__swbuf_r+0x3a>
 800af8c:	4621      	mov	r1, r4
 800af8e:	4628      	mov	r0, r5
 800af90:	f7ff ff88 	bl	800aea4 <_fflush_r>
 800af94:	b9e0      	cbnz	r0, 800afd0 <__swbuf_r+0x74>
 800af96:	68a3      	ldr	r3, [r4, #8]
 800af98:	3b01      	subs	r3, #1
 800af9a:	60a3      	str	r3, [r4, #8]
 800af9c:	6823      	ldr	r3, [r4, #0]
 800af9e:	1c5a      	adds	r2, r3, #1
 800afa0:	6022      	str	r2, [r4, #0]
 800afa2:	701e      	strb	r6, [r3, #0]
 800afa4:	6962      	ldr	r2, [r4, #20]
 800afa6:	1c43      	adds	r3, r0, #1
 800afa8:	429a      	cmp	r2, r3
 800afaa:	d004      	beq.n	800afb6 <__swbuf_r+0x5a>
 800afac:	89a3      	ldrh	r3, [r4, #12]
 800afae:	07db      	lsls	r3, r3, #31
 800afb0:	d506      	bpl.n	800afc0 <__swbuf_r+0x64>
 800afb2:	2e0a      	cmp	r6, #10
 800afb4:	d104      	bne.n	800afc0 <__swbuf_r+0x64>
 800afb6:	4621      	mov	r1, r4
 800afb8:	4628      	mov	r0, r5
 800afba:	f7ff ff73 	bl	800aea4 <_fflush_r>
 800afbe:	b938      	cbnz	r0, 800afd0 <__swbuf_r+0x74>
 800afc0:	4638      	mov	r0, r7
 800afc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800afc4:	4621      	mov	r1, r4
 800afc6:	4628      	mov	r0, r5
 800afc8:	f000 f806 	bl	800afd8 <__swsetup_r>
 800afcc:	2800      	cmp	r0, #0
 800afce:	d0d5      	beq.n	800af7c <__swbuf_r+0x20>
 800afd0:	f04f 37ff 	mov.w	r7, #4294967295
 800afd4:	e7f4      	b.n	800afc0 <__swbuf_r+0x64>
	...

0800afd8 <__swsetup_r>:
 800afd8:	b538      	push	{r3, r4, r5, lr}
 800afda:	4b2a      	ldr	r3, [pc, #168]	; (800b084 <__swsetup_r+0xac>)
 800afdc:	4605      	mov	r5, r0
 800afde:	6818      	ldr	r0, [r3, #0]
 800afe0:	460c      	mov	r4, r1
 800afe2:	b118      	cbz	r0, 800afec <__swsetup_r+0x14>
 800afe4:	6a03      	ldr	r3, [r0, #32]
 800afe6:	b90b      	cbnz	r3, 800afec <__swsetup_r+0x14>
 800afe8:	f7ff f876 	bl	800a0d8 <__sinit>
 800afec:	89a3      	ldrh	r3, [r4, #12]
 800afee:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800aff2:	0718      	lsls	r0, r3, #28
 800aff4:	d422      	bmi.n	800b03c <__swsetup_r+0x64>
 800aff6:	06d9      	lsls	r1, r3, #27
 800aff8:	d407      	bmi.n	800b00a <__swsetup_r+0x32>
 800affa:	2309      	movs	r3, #9
 800affc:	602b      	str	r3, [r5, #0]
 800affe:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b002:	81a3      	strh	r3, [r4, #12]
 800b004:	f04f 30ff 	mov.w	r0, #4294967295
 800b008:	e034      	b.n	800b074 <__swsetup_r+0x9c>
 800b00a:	0758      	lsls	r0, r3, #29
 800b00c:	d512      	bpl.n	800b034 <__swsetup_r+0x5c>
 800b00e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b010:	b141      	cbz	r1, 800b024 <__swsetup_r+0x4c>
 800b012:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b016:	4299      	cmp	r1, r3
 800b018:	d002      	beq.n	800b020 <__swsetup_r+0x48>
 800b01a:	4628      	mov	r0, r5
 800b01c:	f7ff f998 	bl	800a350 <_free_r>
 800b020:	2300      	movs	r3, #0
 800b022:	6363      	str	r3, [r4, #52]	; 0x34
 800b024:	89a3      	ldrh	r3, [r4, #12]
 800b026:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b02a:	81a3      	strh	r3, [r4, #12]
 800b02c:	2300      	movs	r3, #0
 800b02e:	6063      	str	r3, [r4, #4]
 800b030:	6923      	ldr	r3, [r4, #16]
 800b032:	6023      	str	r3, [r4, #0]
 800b034:	89a3      	ldrh	r3, [r4, #12]
 800b036:	f043 0308 	orr.w	r3, r3, #8
 800b03a:	81a3      	strh	r3, [r4, #12]
 800b03c:	6923      	ldr	r3, [r4, #16]
 800b03e:	b94b      	cbnz	r3, 800b054 <__swsetup_r+0x7c>
 800b040:	89a3      	ldrh	r3, [r4, #12]
 800b042:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b046:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b04a:	d003      	beq.n	800b054 <__swsetup_r+0x7c>
 800b04c:	4621      	mov	r1, r4
 800b04e:	4628      	mov	r0, r5
 800b050:	f000 f899 	bl	800b186 <__smakebuf_r>
 800b054:	89a0      	ldrh	r0, [r4, #12]
 800b056:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b05a:	f010 0301 	ands.w	r3, r0, #1
 800b05e:	d00a      	beq.n	800b076 <__swsetup_r+0x9e>
 800b060:	2300      	movs	r3, #0
 800b062:	60a3      	str	r3, [r4, #8]
 800b064:	6963      	ldr	r3, [r4, #20]
 800b066:	425b      	negs	r3, r3
 800b068:	61a3      	str	r3, [r4, #24]
 800b06a:	6923      	ldr	r3, [r4, #16]
 800b06c:	b943      	cbnz	r3, 800b080 <__swsetup_r+0xa8>
 800b06e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b072:	d1c4      	bne.n	800affe <__swsetup_r+0x26>
 800b074:	bd38      	pop	{r3, r4, r5, pc}
 800b076:	0781      	lsls	r1, r0, #30
 800b078:	bf58      	it	pl
 800b07a:	6963      	ldrpl	r3, [r4, #20]
 800b07c:	60a3      	str	r3, [r4, #8]
 800b07e:	e7f4      	b.n	800b06a <__swsetup_r+0x92>
 800b080:	2000      	movs	r0, #0
 800b082:	e7f7      	b.n	800b074 <__swsetup_r+0x9c>
 800b084:	200001d4 	.word	0x200001d4

0800b088 <memmove>:
 800b088:	4288      	cmp	r0, r1
 800b08a:	b510      	push	{r4, lr}
 800b08c:	eb01 0402 	add.w	r4, r1, r2
 800b090:	d902      	bls.n	800b098 <memmove+0x10>
 800b092:	4284      	cmp	r4, r0
 800b094:	4623      	mov	r3, r4
 800b096:	d807      	bhi.n	800b0a8 <memmove+0x20>
 800b098:	1e43      	subs	r3, r0, #1
 800b09a:	42a1      	cmp	r1, r4
 800b09c:	d008      	beq.n	800b0b0 <memmove+0x28>
 800b09e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b0a2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b0a6:	e7f8      	b.n	800b09a <memmove+0x12>
 800b0a8:	4402      	add	r2, r0
 800b0aa:	4601      	mov	r1, r0
 800b0ac:	428a      	cmp	r2, r1
 800b0ae:	d100      	bne.n	800b0b2 <memmove+0x2a>
 800b0b0:	bd10      	pop	{r4, pc}
 800b0b2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b0b6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b0ba:	e7f7      	b.n	800b0ac <memmove+0x24>

0800b0bc <_sbrk_r>:
 800b0bc:	b538      	push	{r3, r4, r5, lr}
 800b0be:	4d06      	ldr	r5, [pc, #24]	; (800b0d8 <_sbrk_r+0x1c>)
 800b0c0:	2300      	movs	r3, #0
 800b0c2:	4604      	mov	r4, r0
 800b0c4:	4608      	mov	r0, r1
 800b0c6:	602b      	str	r3, [r5, #0]
 800b0c8:	f7f6 f814 	bl	80010f4 <_sbrk>
 800b0cc:	1c43      	adds	r3, r0, #1
 800b0ce:	d102      	bne.n	800b0d6 <_sbrk_r+0x1a>
 800b0d0:	682b      	ldr	r3, [r5, #0]
 800b0d2:	b103      	cbz	r3, 800b0d6 <_sbrk_r+0x1a>
 800b0d4:	6023      	str	r3, [r4, #0]
 800b0d6:	bd38      	pop	{r3, r4, r5, pc}
 800b0d8:	20001568 	.word	0x20001568

0800b0dc <_realloc_r>:
 800b0dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b0e0:	4680      	mov	r8, r0
 800b0e2:	4614      	mov	r4, r2
 800b0e4:	460e      	mov	r6, r1
 800b0e6:	b921      	cbnz	r1, 800b0f2 <_realloc_r+0x16>
 800b0e8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b0ec:	4611      	mov	r1, r2
 800b0ee:	f7ff b99b 	b.w	800a428 <_malloc_r>
 800b0f2:	b92a      	cbnz	r2, 800b100 <_realloc_r+0x24>
 800b0f4:	f7ff f92c 	bl	800a350 <_free_r>
 800b0f8:	4625      	mov	r5, r4
 800b0fa:	4628      	mov	r0, r5
 800b0fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b100:	f000 f8a0 	bl	800b244 <_malloc_usable_size_r>
 800b104:	4284      	cmp	r4, r0
 800b106:	4607      	mov	r7, r0
 800b108:	d802      	bhi.n	800b110 <_realloc_r+0x34>
 800b10a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b10e:	d812      	bhi.n	800b136 <_realloc_r+0x5a>
 800b110:	4621      	mov	r1, r4
 800b112:	4640      	mov	r0, r8
 800b114:	f7ff f988 	bl	800a428 <_malloc_r>
 800b118:	4605      	mov	r5, r0
 800b11a:	2800      	cmp	r0, #0
 800b11c:	d0ed      	beq.n	800b0fa <_realloc_r+0x1e>
 800b11e:	42bc      	cmp	r4, r7
 800b120:	4622      	mov	r2, r4
 800b122:	4631      	mov	r1, r6
 800b124:	bf28      	it	cs
 800b126:	463a      	movcs	r2, r7
 800b128:	f7ff f904 	bl	800a334 <memcpy>
 800b12c:	4631      	mov	r1, r6
 800b12e:	4640      	mov	r0, r8
 800b130:	f7ff f90e 	bl	800a350 <_free_r>
 800b134:	e7e1      	b.n	800b0fa <_realloc_r+0x1e>
 800b136:	4635      	mov	r5, r6
 800b138:	e7df      	b.n	800b0fa <_realloc_r+0x1e>

0800b13a <__swhatbuf_r>:
 800b13a:	b570      	push	{r4, r5, r6, lr}
 800b13c:	460c      	mov	r4, r1
 800b13e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b142:	2900      	cmp	r1, #0
 800b144:	b096      	sub	sp, #88	; 0x58
 800b146:	4615      	mov	r5, r2
 800b148:	461e      	mov	r6, r3
 800b14a:	da0d      	bge.n	800b168 <__swhatbuf_r+0x2e>
 800b14c:	89a3      	ldrh	r3, [r4, #12]
 800b14e:	f013 0f80 	tst.w	r3, #128	; 0x80
 800b152:	f04f 0100 	mov.w	r1, #0
 800b156:	bf0c      	ite	eq
 800b158:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800b15c:	2340      	movne	r3, #64	; 0x40
 800b15e:	2000      	movs	r0, #0
 800b160:	6031      	str	r1, [r6, #0]
 800b162:	602b      	str	r3, [r5, #0]
 800b164:	b016      	add	sp, #88	; 0x58
 800b166:	bd70      	pop	{r4, r5, r6, pc}
 800b168:	466a      	mov	r2, sp
 800b16a:	f000 f849 	bl	800b200 <_fstat_r>
 800b16e:	2800      	cmp	r0, #0
 800b170:	dbec      	blt.n	800b14c <__swhatbuf_r+0x12>
 800b172:	9901      	ldr	r1, [sp, #4]
 800b174:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800b178:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800b17c:	4259      	negs	r1, r3
 800b17e:	4159      	adcs	r1, r3
 800b180:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b184:	e7eb      	b.n	800b15e <__swhatbuf_r+0x24>

0800b186 <__smakebuf_r>:
 800b186:	898b      	ldrh	r3, [r1, #12]
 800b188:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b18a:	079d      	lsls	r5, r3, #30
 800b18c:	4606      	mov	r6, r0
 800b18e:	460c      	mov	r4, r1
 800b190:	d507      	bpl.n	800b1a2 <__smakebuf_r+0x1c>
 800b192:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b196:	6023      	str	r3, [r4, #0]
 800b198:	6123      	str	r3, [r4, #16]
 800b19a:	2301      	movs	r3, #1
 800b19c:	6163      	str	r3, [r4, #20]
 800b19e:	b002      	add	sp, #8
 800b1a0:	bd70      	pop	{r4, r5, r6, pc}
 800b1a2:	ab01      	add	r3, sp, #4
 800b1a4:	466a      	mov	r2, sp
 800b1a6:	f7ff ffc8 	bl	800b13a <__swhatbuf_r>
 800b1aa:	9900      	ldr	r1, [sp, #0]
 800b1ac:	4605      	mov	r5, r0
 800b1ae:	4630      	mov	r0, r6
 800b1b0:	f7ff f93a 	bl	800a428 <_malloc_r>
 800b1b4:	b948      	cbnz	r0, 800b1ca <__smakebuf_r+0x44>
 800b1b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b1ba:	059a      	lsls	r2, r3, #22
 800b1bc:	d4ef      	bmi.n	800b19e <__smakebuf_r+0x18>
 800b1be:	f023 0303 	bic.w	r3, r3, #3
 800b1c2:	f043 0302 	orr.w	r3, r3, #2
 800b1c6:	81a3      	strh	r3, [r4, #12]
 800b1c8:	e7e3      	b.n	800b192 <__smakebuf_r+0xc>
 800b1ca:	89a3      	ldrh	r3, [r4, #12]
 800b1cc:	6020      	str	r0, [r4, #0]
 800b1ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b1d2:	81a3      	strh	r3, [r4, #12]
 800b1d4:	9b00      	ldr	r3, [sp, #0]
 800b1d6:	6163      	str	r3, [r4, #20]
 800b1d8:	9b01      	ldr	r3, [sp, #4]
 800b1da:	6120      	str	r0, [r4, #16]
 800b1dc:	b15b      	cbz	r3, 800b1f6 <__smakebuf_r+0x70>
 800b1de:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b1e2:	4630      	mov	r0, r6
 800b1e4:	f000 f81e 	bl	800b224 <_isatty_r>
 800b1e8:	b128      	cbz	r0, 800b1f6 <__smakebuf_r+0x70>
 800b1ea:	89a3      	ldrh	r3, [r4, #12]
 800b1ec:	f023 0303 	bic.w	r3, r3, #3
 800b1f0:	f043 0301 	orr.w	r3, r3, #1
 800b1f4:	81a3      	strh	r3, [r4, #12]
 800b1f6:	89a3      	ldrh	r3, [r4, #12]
 800b1f8:	431d      	orrs	r5, r3
 800b1fa:	81a5      	strh	r5, [r4, #12]
 800b1fc:	e7cf      	b.n	800b19e <__smakebuf_r+0x18>
	...

0800b200 <_fstat_r>:
 800b200:	b538      	push	{r3, r4, r5, lr}
 800b202:	4d07      	ldr	r5, [pc, #28]	; (800b220 <_fstat_r+0x20>)
 800b204:	2300      	movs	r3, #0
 800b206:	4604      	mov	r4, r0
 800b208:	4608      	mov	r0, r1
 800b20a:	4611      	mov	r1, r2
 800b20c:	602b      	str	r3, [r5, #0]
 800b20e:	f7f5 ff48 	bl	80010a2 <_fstat>
 800b212:	1c43      	adds	r3, r0, #1
 800b214:	d102      	bne.n	800b21c <_fstat_r+0x1c>
 800b216:	682b      	ldr	r3, [r5, #0]
 800b218:	b103      	cbz	r3, 800b21c <_fstat_r+0x1c>
 800b21a:	6023      	str	r3, [r4, #0]
 800b21c:	bd38      	pop	{r3, r4, r5, pc}
 800b21e:	bf00      	nop
 800b220:	20001568 	.word	0x20001568

0800b224 <_isatty_r>:
 800b224:	b538      	push	{r3, r4, r5, lr}
 800b226:	4d06      	ldr	r5, [pc, #24]	; (800b240 <_isatty_r+0x1c>)
 800b228:	2300      	movs	r3, #0
 800b22a:	4604      	mov	r4, r0
 800b22c:	4608      	mov	r0, r1
 800b22e:	602b      	str	r3, [r5, #0]
 800b230:	f7f5 ff47 	bl	80010c2 <_isatty>
 800b234:	1c43      	adds	r3, r0, #1
 800b236:	d102      	bne.n	800b23e <_isatty_r+0x1a>
 800b238:	682b      	ldr	r3, [r5, #0]
 800b23a:	b103      	cbz	r3, 800b23e <_isatty_r+0x1a>
 800b23c:	6023      	str	r3, [r4, #0]
 800b23e:	bd38      	pop	{r3, r4, r5, pc}
 800b240:	20001568 	.word	0x20001568

0800b244 <_malloc_usable_size_r>:
 800b244:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b248:	1f18      	subs	r0, r3, #4
 800b24a:	2b00      	cmp	r3, #0
 800b24c:	bfbc      	itt	lt
 800b24e:	580b      	ldrlt	r3, [r1, r0]
 800b250:	18c0      	addlt	r0, r0, r3
 800b252:	4770      	bx	lr

0800b254 <_init>:
 800b254:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b256:	bf00      	nop
 800b258:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b25a:	bc08      	pop	{r3}
 800b25c:	469e      	mov	lr, r3
 800b25e:	4770      	bx	lr

0800b260 <_fini>:
 800b260:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b262:	bf00      	nop
 800b264:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b266:	bc08      	pop	{r3}
 800b268:	469e      	mov	lr, r3
 800b26a:	4770      	bx	lr
